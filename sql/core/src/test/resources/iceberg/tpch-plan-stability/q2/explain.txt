== Physical Plan ==
TakeOrderedAndProject (53)
+- * Project (52)
   +- * BroadcastHashJoin Inner BuildRight (51)
      :- * Project (49)
      :  +- * BroadcastHashJoin Inner BuildRight (48)
      :     :- * Project (43)
      :     :  +- * BroadcastHashJoin Inner BuildRight (42)
      :     :     :- * Project (37)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :     :     :- * Project (9)
      :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :     :- * Project (3)
      :     :     :     :     :  +- * Filter (2)
      :     :     :     :     :     +- BatchScan spark_catalog.default.part (1)
      :     :     :     :     +- BroadcastExchange (7)
      :     :     :     :        +- * Project (6)
      :     :     :     :           +- * Filter (5)
      :     :     :     :              +- BatchScan spark_catalog.default.partsupp (4)
      :     :     :     +- BroadcastExchange (35)
      :     :     :        +- * Filter (34)
      :     :     :           +- * HashAggregate (33)
      :     :     :              +- Exchange (32)
      :     :     :                 +- * HashAggregate (31)
      :     :     :                    +- * Project (30)
      :     :     :                       +- * BroadcastHashJoin Inner BuildRight (29)
      :     :     :                          :- * Project (24)
      :     :     :                          :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :     :                          :     :- * Project (18)
      :     :     :                          :     :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :     :                          :     :     :- * Project (12)
      :     :     :                          :     :     :  +- * Filter (11)
      :     :     :                          :     :     :     +- BatchScan spark_catalog.default.partsupp (10)
      :     :     :                          :     :     +- BroadcastExchange (16)
      :     :     :                          :     :        +- * Project (15)
      :     :     :                          :     :           +- * Filter (14)
      :     :     :                          :     :              +- BatchScan spark_catalog.default.supplier (13)
      :     :     :                          :     +- BroadcastExchange (22)
      :     :     :                          :        +- * Project (21)
      :     :     :                          :           +- * Filter (20)
      :     :     :                          :              +- BatchScan spark_catalog.default.nation (19)
      :     :     :                          +- BroadcastExchange (28)
      :     :     :                             +- * Project (27)
      :     :     :                                +- * Filter (26)
      :     :     :                                   +- BatchScan spark_catalog.default.region (25)
      :     :     +- BroadcastExchange (41)
      :     :        +- * Project (40)
      :     :           +- * Filter (39)
      :     :              +- BatchScan spark_catalog.default.supplier (38)
      :     +- BroadcastExchange (47)
      :        +- * Project (46)
      :           +- * Filter (45)
      :              +- BatchScan spark_catalog.default.nation (44)
      +- ReusedExchange (50)


(1) BatchScan spark_catalog.default.part
Output [4]: [p_partkey#1, p_mfgr#2, p_type#3, p_size#4]
spark_catalog.default.part [scan class = SparkBatchQueryScan] [filters=p_size IS NOT NULL, p_type IS NOT NULL, p_size = 15, p_partkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 10]
Input [4]: [p_partkey#1, p_mfgr#2, p_type#3, p_size#4]
Condition : ((((isnotnull(p_size#4) AND isnotnull(p_type#3)) AND (p_size#4 = 15)) AND EndsWith(p_type#3, BRASS)) AND isnotnull(p_partkey#1))

(3) Project [codegen id : 10]
Output [2]: [p_partkey#1, p_mfgr#2]
Input [4]: [p_partkey#1, p_mfgr#2, p_type#3, p_size#4]

(4) BatchScan spark_catalog.default.partsupp
Output [3]: [ps_partkey#5, ps_suppkey#6, ps_supplycost#7]
spark_catalog.default.partsupp [scan class = SparkBatchQueryScan] [filters=ps_partkey IS NOT NULL, ps_supplycost IS NOT NULL, ps_suppkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [3]: [ps_partkey#5, ps_suppkey#6, ps_supplycost#7]
Condition : ((isnotnull(ps_partkey#5) AND isnotnull(ps_supplycost#7)) AND isnotnull(ps_suppkey#6))

(6) Project [codegen id : 1]
Output [3]: [ps_partkey#5, ps_suppkey#6, ps_supplycost#7]
Input [3]: [ps_partkey#5, ps_suppkey#6, ps_supplycost#7]

(7) BroadcastExchange
Input [3]: [ps_partkey#5, ps_suppkey#6, ps_supplycost#7]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [p_partkey#1]
Right keys [1]: [ps_partkey#5]
Join condition: None

(9) Project [codegen id : 10]
Output [4]: [p_partkey#1, p_mfgr#2, ps_suppkey#6, ps_supplycost#7]
Input [5]: [p_partkey#1, p_mfgr#2, ps_partkey#5, ps_suppkey#6, ps_supplycost#7]

(10) BatchScan spark_catalog.default.partsupp
Output [3]: [ps_partkey#8, ps_suppkey#9, ps_supplycost#10]
spark_catalog.default.partsupp [scan class = SparkBatchQueryScan] [filters=ps_suppkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 5]
Input [3]: [ps_partkey#8, ps_suppkey#9, ps_supplycost#10]
Condition : (isnotnull(ps_suppkey#9) AND isnotnull(ps_partkey#8))

(12) Project [codegen id : 5]
Output [3]: [ps_partkey#8, ps_suppkey#9, ps_supplycost#10]
Input [3]: [ps_partkey#8, ps_suppkey#9, ps_supplycost#10]

(13) BatchScan spark_catalog.default.supplier
Output [2]: [s_suppkey#11, s_nationkey#12]
spark_catalog.default.supplier [scan class = SparkBatchQueryScan] [filters=s_suppkey IS NOT NULL, s_nationkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 2]
Input [2]: [s_suppkey#11, s_nationkey#12]
Condition : (isnotnull(s_suppkey#11) AND isnotnull(s_nationkey#12))

(15) Project [codegen id : 2]
Output [2]: [s_suppkey#11, s_nationkey#12]
Input [2]: [s_suppkey#11, s_nationkey#12]

(16) BroadcastExchange
Input [2]: [s_suppkey#11, s_nationkey#12]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ps_suppkey#9]
Right keys [1]: [s_suppkey#11]
Join condition: None

(18) Project [codegen id : 5]
Output [3]: [ps_partkey#8, ps_supplycost#10, s_nationkey#12]
Input [5]: [ps_partkey#8, ps_suppkey#9, ps_supplycost#10, s_suppkey#11, s_nationkey#12]

(19) BatchScan spark_catalog.default.nation
Output [2]: [n_nationkey#13, n_regionkey#14]
spark_catalog.default.nation [scan class = SparkBatchQueryScan] [filters=n_nationkey IS NOT NULL, n_regionkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 3]
Input [2]: [n_nationkey#13, n_regionkey#14]
Condition : (isnotnull(n_nationkey#13) AND isnotnull(n_regionkey#14))

(21) Project [codegen id : 3]
Output [2]: [n_nationkey#13, n_regionkey#14]
Input [2]: [n_nationkey#13, n_regionkey#14]

(22) BroadcastExchange
Input [2]: [n_nationkey#13, n_regionkey#14]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [s_nationkey#12]
Right keys [1]: [n_nationkey#13]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [ps_partkey#8, ps_supplycost#10, n_regionkey#14]
Input [5]: [ps_partkey#8, ps_supplycost#10, s_nationkey#12, n_nationkey#13, n_regionkey#14]

(25) BatchScan spark_catalog.default.region
Output [2]: [r_regionkey#15, r_name#16]
spark_catalog.default.region [scan class = SparkBatchQueryScan] [filters=r_name IS NOT NULL, r_name = 'EUROPE', r_regionkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(26) Filter [codegen id : 4]
Input [2]: [r_regionkey#15, r_name#16]
Condition : ((isnotnull(r_name#16) AND (r_name#16 = EUROPE)) AND isnotnull(r_regionkey#15))

(27) Project [codegen id : 4]
Output [1]: [r_regionkey#15]
Input [2]: [r_regionkey#15, r_name#16]

(28) BroadcastExchange
Input [1]: [r_regionkey#15]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [n_regionkey#14]
Right keys [1]: [r_regionkey#15]
Join condition: None

(30) Project [codegen id : 5]
Output [2]: [ps_partkey#8, ps_supplycost#10]
Input [4]: [ps_partkey#8, ps_supplycost#10, n_regionkey#14, r_regionkey#15]

(31) HashAggregate [codegen id : 5]
Input [2]: [ps_partkey#8, ps_supplycost#10]
Keys [1]: [ps_partkey#8]
Functions [1]: [partial_min(ps_supplycost#10)]
Aggregate Attributes [1]: [min#17]
Results [2]: [ps_partkey#8, min#18]

(32) Exchange
Input [2]: [ps_partkey#8, min#18]
Arguments: hashpartitioning(ps_partkey#8, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 6]
Input [2]: [ps_partkey#8, min#18]
Keys [1]: [ps_partkey#8]
Functions [1]: [min(ps_supplycost#10)]
Aggregate Attributes [1]: [min(ps_supplycost#10)#19]
Results [2]: [min(ps_supplycost#10)#19 AS min(ps_supplycost)#20, ps_partkey#8]

(34) Filter [codegen id : 6]
Input [2]: [min(ps_supplycost)#20, ps_partkey#8]
Condition : isnotnull(min(ps_supplycost)#20)

(35) BroadcastExchange
Input [2]: [min(ps_supplycost)#20, ps_partkey#8]
Arguments: HashedRelationBroadcastMode(List(input[0, decimal(10,0), false], input[1, bigint, true]),false), [plan_id=6]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [ps_supplycost#7, p_partkey#1]
Right keys [2]: [min(ps_supplycost)#20, ps_partkey#8]
Join condition: None

(37) Project [codegen id : 10]
Output [3]: [p_partkey#1, p_mfgr#2, ps_suppkey#6]
Input [6]: [p_partkey#1, p_mfgr#2, ps_suppkey#6, ps_supplycost#7, min(ps_supplycost)#20, ps_partkey#8]

(38) BatchScan spark_catalog.default.supplier
Output [7]: [s_suppkey#21, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]
spark_catalog.default.supplier [scan class = SparkBatchQueryScan] [filters=s_suppkey IS NOT NULL, s_nationkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(39) Filter [codegen id : 7]
Input [7]: [s_suppkey#21, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]
Condition : (isnotnull(s_suppkey#21) AND isnotnull(s_nationkey#24))

(40) Project [codegen id : 7]
Output [7]: [s_suppkey#21, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]
Input [7]: [s_suppkey#21, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]

(41) BroadcastExchange
Input [7]: [s_suppkey#21, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=7]

(42) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ps_suppkey#6]
Right keys [1]: [s_suppkey#21]
Join condition: None

(43) Project [codegen id : 10]
Output [8]: [p_partkey#1, p_mfgr#2, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]
Input [10]: [p_partkey#1, p_mfgr#2, ps_suppkey#6, s_suppkey#21, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27]

(44) BatchScan spark_catalog.default.nation
Output [3]: [n_nationkey#28, n_name#29, n_regionkey#30]
spark_catalog.default.nation [scan class = SparkBatchQueryScan] [filters=n_nationkey IS NOT NULL, n_regionkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(45) Filter [codegen id : 8]
Input [3]: [n_nationkey#28, n_name#29, n_regionkey#30]
Condition : (isnotnull(n_nationkey#28) AND isnotnull(n_regionkey#30))

(46) Project [codegen id : 8]
Output [3]: [n_nationkey#28, n_name#29, n_regionkey#30]
Input [3]: [n_nationkey#28, n_name#29, n_regionkey#30]

(47) BroadcastExchange
Input [3]: [n_nationkey#28, n_name#29, n_regionkey#30]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=8]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [s_nationkey#24]
Right keys [1]: [n_nationkey#28]
Join condition: None

(49) Project [codegen id : 10]
Output [9]: [p_partkey#1, p_mfgr#2, s_name#22, s_address#23, s_phone#25, s_acctbal#26, s_comment#27, n_name#29, n_regionkey#30]
Input [11]: [p_partkey#1, p_mfgr#2, s_name#22, s_address#23, s_nationkey#24, s_phone#25, s_acctbal#26, s_comment#27, n_nationkey#28, n_name#29, n_regionkey#30]

(50) ReusedExchange [Reuses operator id: 28]
Output [1]: [r_regionkey#31]

(51) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [n_regionkey#30]
Right keys [1]: [r_regionkey#31]
Join condition: None

(52) Project [codegen id : 10]
Output [8]: [s_acctbal#26, s_name#22, n_name#29, p_partkey#1, p_mfgr#2, s_address#23, s_phone#25, s_comment#27]
Input [10]: [p_partkey#1, p_mfgr#2, s_name#22, s_address#23, s_phone#25, s_acctbal#26, s_comment#27, n_name#29, n_regionkey#30, r_regionkey#31]

(53) TakeOrderedAndProject
Input [8]: [s_acctbal#26, s_name#22, n_name#29, p_partkey#1, p_mfgr#2, s_address#23, s_phone#25, s_comment#27]
Arguments: 100, [s_acctbal#26 DESC NULLS LAST, n_name#29 ASC NULLS FIRST, s_name#22 ASC NULLS FIRST, p_partkey#1 ASC NULLS FIRST], [s_acctbal#26, s_name#22, n_name#29, p_partkey#1, p_mfgr#2, s_address#23, s_phone#25, s_comment#27]

