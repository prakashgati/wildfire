== Physical Plan ==
* Sort (15)
+- Exchange (14)
   +- * Project (13)
      +- * BroadcastHashJoin Inner BuildRight (12)
         :- * Project (3)
         :  +- * Filter (2)
         :     +- BatchScan spark_catalog.default.supplier (1)
         +- BroadcastExchange (11)
            +- * Filter (10)
               +- * HashAggregate (9)
                  +- Exchange (8)
                     +- * HashAggregate (7)
                        +- * Project (6)
                           +- * Filter (5)
                              +- BatchScan spark_catalog.default.lineitem (4)


(1) BatchScan spark_catalog.default.supplier
Output [4]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4]
spark_catalog.default.supplier [scan class = SparkBatchQueryScan] [filters=s_suppkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [4]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4]
Condition : isnotnull(s_suppkey#1)

(3) Project [codegen id : 3]
Output [4]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4]
Input [4]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4]

(4) BatchScan spark_catalog.default.lineitem
Output [4]: [l_suppkey#5, l_extendedprice#6, l_discount#7, l_shipdate#8]
spark_catalog.default.lineitem [scan class = SparkBatchQueryScan] [filters=l_shipdate IS NOT NULL, l_shipdate >= 9496, l_shipdate < 9587, l_suppkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [4]: [l_suppkey#5, l_extendedprice#6, l_discount#7, l_shipdate#8]
Condition : (((isnotnull(l_shipdate#8) AND (l_shipdate#8 >= 1996-01-01)) AND (l_shipdate#8 < 1996-04-01)) AND isnotnull(l_suppkey#5))

(6) Project [codegen id : 1]
Output [3]: [l_suppkey#5, l_extendedprice#6, l_discount#7]
Input [4]: [l_suppkey#5, l_extendedprice#6, l_discount#7, l_shipdate#8]

(7) HashAggregate [codegen id : 1]
Input [3]: [l_suppkey#5, l_extendedprice#6, l_discount#7]
Keys [1]: [l_suppkey#5]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [2]: [sum#9, isEmpty#10]
Results [3]: [l_suppkey#5, sum#11, isEmpty#12]

(8) Exchange
Input [3]: [l_suppkey#5, sum#11, isEmpty#12]
Arguments: hashpartitioning(l_suppkey#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 2]
Input [3]: [l_suppkey#5, sum#11, isEmpty#12]
Keys [1]: [l_suppkey#5]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#13]
Results [2]: [l_suppkey#5 AS supplier_no#14, sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#13 AS total_revenue#15]

(10) Filter [codegen id : 2]
Input [2]: [supplier_no#14, total_revenue#15]
Condition : (isnotnull(total_revenue#15) AND (total_revenue#15 = Subquery scalar-subquery#16, [id=#17]))

(11) BroadcastExchange
Input [2]: [supplier_no#14, total_revenue#15]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=2]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [s_suppkey#1]
Right keys [1]: [supplier_no#14]
Join condition: None

(13) Project [codegen id : 3]
Output [5]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4, total_revenue#15]
Input [6]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4, supplier_no#14, total_revenue#15]

(14) Exchange
Input [5]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4, total_revenue#15]
Arguments: rangepartitioning(s_suppkey#1 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(15) Sort [codegen id : 4]
Input [5]: [s_suppkey#1, s_name#2, s_address#3, s_phone#4, total_revenue#15]
Arguments: [s_suppkey#1 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 10 Hosting Expression = Subquery scalar-subquery#16, [id=#17]
* HashAggregate (24)
+- Exchange (23)
   +- * HashAggregate (22)
      +- * HashAggregate (21)
         +- Exchange (20)
            +- * HashAggregate (19)
               +- * Project (18)
                  +- * Filter (17)
                     +- BatchScan spark_catalog.default.lineitem (16)


(16) BatchScan spark_catalog.default.lineitem
Output [4]: [l_suppkey#5, l_extendedprice#6, l_discount#7, l_shipdate#8]
spark_catalog.default.lineitem [scan class = SparkBatchQueryScan] [filters=l_shipdate IS NOT NULL, l_shipdate >= 9496, l_shipdate < 9587], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(17) Filter [codegen id : 1]
Input [4]: [l_suppkey#5, l_extendedprice#6, l_discount#7, l_shipdate#8]
Condition : ((isnotnull(l_shipdate#8) AND (l_shipdate#8 >= 1996-01-01)) AND (l_shipdate#8 < 1996-04-01))

(18) Project [codegen id : 1]
Output [3]: [l_suppkey#5, l_extendedprice#6, l_discount#7]
Input [4]: [l_suppkey#5, l_extendedprice#6, l_discount#7, l_shipdate#8]

(19) HashAggregate [codegen id : 1]
Input [3]: [l_suppkey#5, l_extendedprice#6, l_discount#7]
Keys [1]: [l_suppkey#5]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [3]: [l_suppkey#5, sum#20, isEmpty#21]

(20) Exchange
Input [3]: [l_suppkey#5, sum#20, isEmpty#21]
Arguments: hashpartitioning(l_suppkey#5, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) HashAggregate [codegen id : 2]
Input [3]: [l_suppkey#5, sum#20, isEmpty#21]
Keys [1]: [l_suppkey#5]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#13]
Results [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#6 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#7 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#13 AS total_revenue#15]

(22) HashAggregate [codegen id : 2]
Input [1]: [total_revenue#15]
Keys: []
Functions [1]: [partial_max(total_revenue#15)]
Aggregate Attributes [1]: [max#22]
Results [1]: [max#23]

(23) Exchange
Input [1]: [max#23]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(24) HashAggregate [codegen id : 3]
Input [1]: [max#23]
Keys: []
Functions [1]: [max(total_revenue#15)]
Aggregate Attributes [1]: [max(total_revenue#15)#24]
Results [1]: [max(total_revenue#15)#24 AS max(total_revenue)#25]


