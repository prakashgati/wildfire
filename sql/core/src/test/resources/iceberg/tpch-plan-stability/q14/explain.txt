== Physical Plan ==
* HashAggregate (12)
+- Exchange (11)
   +- * HashAggregate (10)
      +- * Project (9)
         +- * BroadcastHashJoin Inner BuildRight (8)
            :- * Project (3)
            :  +- * Filter (2)
            :     +- BatchScan spark_catalog.default.lineitem (1)
            +- BroadcastExchange (7)
               +- * Project (6)
                  +- * Filter (5)
                     +- BatchScan spark_catalog.default.part (4)


(1) BatchScan spark_catalog.default.lineitem
Output [4]: [l_partkey#1, l_extendedprice#2, l_discount#3, l_shipdate#4]
spark_catalog.default.lineitem [scan class = SparkBatchQueryScan] [filters=l_shipdate IS NOT NULL, l_shipdate >= 9374, l_shipdate < 9404, l_partkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 2]
Input [4]: [l_partkey#1, l_extendedprice#2, l_discount#3, l_shipdate#4]
Condition : (((isnotnull(l_shipdate#4) AND (l_shipdate#4 >= 1995-09-01)) AND (l_shipdate#4 < 1995-10-01)) AND isnotnull(l_partkey#1))

(3) Project [codegen id : 2]
Output [3]: [l_partkey#1, l_extendedprice#2, l_discount#3]
Input [4]: [l_partkey#1, l_extendedprice#2, l_discount#3, l_shipdate#4]

(4) BatchScan spark_catalog.default.part
Output [2]: [p_partkey#5, p_type#6]
spark_catalog.default.part [scan class = SparkBatchQueryScan] [filters=p_partkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [p_partkey#5, p_type#6]
Condition : isnotnull(p_partkey#5)

(6) Project [codegen id : 1]
Output [2]: [p_partkey#5, p_type#6]
Input [2]: [p_partkey#5, p_type#6]

(7) BroadcastExchange
Input [2]: [p_partkey#5, p_type#6]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [l_partkey#1]
Right keys [1]: [p_partkey#5]
Join condition: None

(9) Project [codegen id : 2]
Output [3]: [l_extendedprice#2, l_discount#3, p_type#6]
Input [5]: [l_partkey#1, l_extendedprice#2, l_discount#3, p_partkey#5, p_type#6]

(10) HashAggregate [codegen id : 2]
Input [3]: [l_extendedprice#2, l_discount#3, p_type#6]
Keys: []
Functions [2]: [partial_sum(CASE WHEN StartsWith(p_type#6, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END), partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [4]: [sum#7, isEmpty#8, sum#9, isEmpty#10]
Results [4]: [sum#11, isEmpty#12, sum#13, isEmpty#14]

(11) Exchange
Input [4]: [sum#11, isEmpty#12, sum#13, isEmpty#14]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2]

(12) HashAggregate [codegen id : 3]
Input [4]: [sum#11, isEmpty#12, sum#13, isEmpty#14]
Keys: []
Functions [2]: [sum(CASE WHEN StartsWith(p_type#6, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END), sum(CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [2]: [sum(CASE WHEN StartsWith(p_type#6, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END)#15, sum(CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#16]
Results [1]: [CheckOverflow((promote_precision(CheckOverflow((100.00 * promote_precision(cast(sum(CASE WHEN StartsWith(p_type#6, PROMO) THEN CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) ELSE 0 END)#15 as decimal(34,2)))), DecimalType(38,2))) / promote_precision(cast(sum(CheckOverflow((promote_precision(cast(l_extendedprice#2 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#3 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#16 as decimal(38,2)))), DecimalType(38,6)) AS promo_revenue#17]

