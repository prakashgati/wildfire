== Physical Plan ==
* Sort (38)
+- Exchange (37)
   +- * HashAggregate (36)
      +- Exchange (35)
         +- * HashAggregate (34)
            +- * Project (33)
               +- * BroadcastHashJoin Inner BuildRight (32)
                  :- * Project (27)
                  :  +- * BroadcastHashJoin Inner BuildRight (26)
                  :     :- * Project (21)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                  :     :     :- * Project (15)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :     :     :     :- * Project (9)
                  :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :     :- * Project (3)
                  :     :     :     :     :  +- * Filter (2)
                  :     :     :     :     :     +- BatchScan spark_catalog.default.part (1)
                  :     :     :     :     +- BroadcastExchange (7)
                  :     :     :     :        +- * Project (6)
                  :     :     :     :           +- * Filter (5)
                  :     :     :     :              +- BatchScan spark_catalog.default.lineitem (4)
                  :     :     :     +- BroadcastExchange (13)
                  :     :     :        +- * Project (12)
                  :     :     :           +- * Filter (11)
                  :     :     :              +- BatchScan spark_catalog.default.supplier (10)
                  :     :     +- BroadcastExchange (19)
                  :     :        +- * Project (18)
                  :     :           +- * Filter (17)
                  :     :              +- BatchScan spark_catalog.default.partsupp (16)
                  :     +- BroadcastExchange (25)
                  :        +- * Project (24)
                  :           +- * Filter (23)
                  :              +- BatchScan spark_catalog.default.orders (22)
                  +- BroadcastExchange (31)
                     +- * Project (30)
                        +- * Filter (29)
                           +- BatchScan spark_catalog.default.nation (28)


(1) BatchScan spark_catalog.default.part
Output [2]: [p_partkey#1, p_name#2]
spark_catalog.default.part [scan class = SparkBatchQueryScan] [filters=p_name IS NOT NULL, p_partkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 6]
Input [2]: [p_partkey#1, p_name#2]
Condition : ((isnotnull(p_name#2) AND Contains(p_name#2, green)) AND isnotnull(p_partkey#1))

(3) Project [codegen id : 6]
Output [1]: [p_partkey#1]
Input [2]: [p_partkey#1, p_name#2]

(4) BatchScan spark_catalog.default.lineitem
Output [6]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]
spark_catalog.default.lineitem [scan class = SparkBatchQueryScan] [filters=l_partkey IS NOT NULL, l_suppkey IS NOT NULL, l_orderkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [6]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]
Condition : ((isnotnull(l_partkey#4) AND isnotnull(l_suppkey#5)) AND isnotnull(l_orderkey#3))

(6) Project [codegen id : 1]
Output [6]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]
Input [6]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]

(7) BroadcastExchange
Input [6]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [p_partkey#1]
Right keys [1]: [l_partkey#4]
Join condition: None

(9) Project [codegen id : 6]
Output [6]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]
Input [7]: [p_partkey#1, l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8]

(10) BatchScan spark_catalog.default.supplier
Output [2]: [s_suppkey#9, s_nationkey#10]
spark_catalog.default.supplier [scan class = SparkBatchQueryScan] [filters=s_suppkey IS NOT NULL, s_nationkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [2]: [s_suppkey#9, s_nationkey#10]
Condition : (isnotnull(s_suppkey#9) AND isnotnull(s_nationkey#10))

(12) Project [codegen id : 2]
Output [2]: [s_suppkey#9, s_nationkey#10]
Input [2]: [s_suppkey#9, s_nationkey#10]

(13) BroadcastExchange
Input [2]: [s_suppkey#9, s_nationkey#10]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [l_suppkey#5]
Right keys [1]: [s_suppkey#9]
Join condition: None

(15) Project [codegen id : 6]
Output [7]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8, s_nationkey#10]
Input [8]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8, s_suppkey#9, s_nationkey#10]

(16) BatchScan spark_catalog.default.partsupp
Output [3]: [ps_partkey#11, ps_suppkey#12, ps_supplycost#13]
spark_catalog.default.partsupp [scan class = SparkBatchQueryScan] [filters=ps_suppkey IS NOT NULL, ps_partkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(17) Filter [codegen id : 3]
Input [3]: [ps_partkey#11, ps_suppkey#12, ps_supplycost#13]
Condition : (isnotnull(ps_suppkey#12) AND isnotnull(ps_partkey#11))

(18) Project [codegen id : 3]
Output [3]: [ps_partkey#11, ps_suppkey#12, ps_supplycost#13]
Input [3]: [ps_partkey#11, ps_suppkey#12, ps_supplycost#13]

(19) BroadcastExchange
Input [3]: [ps_partkey#11, ps_suppkey#12, ps_supplycost#13]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, bigint, true]),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [l_suppkey#5, l_partkey#4]
Right keys [2]: [ps_suppkey#12, ps_partkey#11]
Join condition: None

(21) Project [codegen id : 6]
Output [6]: [l_orderkey#3, l_quantity#6, l_extendedprice#7, l_discount#8, s_nationkey#10, ps_supplycost#13]
Input [10]: [l_orderkey#3, l_partkey#4, l_suppkey#5, l_quantity#6, l_extendedprice#7, l_discount#8, s_nationkey#10, ps_partkey#11, ps_suppkey#12, ps_supplycost#13]

(22) BatchScan spark_catalog.default.orders
Output [2]: [o_orderkey#14, o_orderdate#15]
spark_catalog.default.orders [scan class = SparkBatchQueryScan] [filters=o_orderkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 4]
Input [2]: [o_orderkey#14, o_orderdate#15]
Condition : isnotnull(o_orderkey#14)

(24) Project [codegen id : 4]
Output [2]: [o_orderkey#14, o_orderdate#15]
Input [2]: [o_orderkey#14, o_orderdate#15]

(25) BroadcastExchange
Input [2]: [o_orderkey#14, o_orderdate#15]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=4]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [l_orderkey#3]
Right keys [1]: [o_orderkey#14]
Join condition: None

(27) Project [codegen id : 6]
Output [6]: [l_quantity#6, l_extendedprice#7, l_discount#8, s_nationkey#10, ps_supplycost#13, o_orderdate#15]
Input [8]: [l_orderkey#3, l_quantity#6, l_extendedprice#7, l_discount#8, s_nationkey#10, ps_supplycost#13, o_orderkey#14, o_orderdate#15]

(28) BatchScan spark_catalog.default.nation
Output [2]: [n_nationkey#16, n_name#17]
spark_catalog.default.nation [scan class = SparkBatchQueryScan] [filters=n_nationkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 5]
Input [2]: [n_nationkey#16, n_name#17]
Condition : isnotnull(n_nationkey#16)

(30) Project [codegen id : 5]
Output [2]: [n_nationkey#16, n_name#17]
Input [2]: [n_nationkey#16, n_name#17]

(31) BroadcastExchange
Input [2]: [n_nationkey#16, n_name#17]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_nationkey#10]
Right keys [1]: [n_nationkey#16]
Join condition: None

(33) Project [codegen id : 6]
Output [3]: [n_name#17 AS nation#18, year(o_orderdate#15) AS o_year#19, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(l_extendedprice#7 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#8 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)) as decimal(23,0))) - promote_precision(cast(CheckOverflow((promote_precision(ps_supplycost#13) * promote_precision(l_quantity#6)), DecimalType(21,0)) as decimal(23,0)))), DecimalType(23,0)) AS amount#20]
Input [8]: [l_quantity#6, l_extendedprice#7, l_discount#8, s_nationkey#10, ps_supplycost#13, o_orderdate#15, n_nationkey#16, n_name#17]

(34) HashAggregate [codegen id : 6]
Input [3]: [nation#18, o_year#19, amount#20]
Keys [2]: [nation#18, o_year#19]
Functions [1]: [partial_sum(amount#20)]
Aggregate Attributes [2]: [sum#21, isEmpty#22]
Results [4]: [nation#18, o_year#19, sum#23, isEmpty#24]

(35) Exchange
Input [4]: [nation#18, o_year#19, sum#23, isEmpty#24]
Arguments: hashpartitioning(nation#18, o_year#19, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 7]
Input [4]: [nation#18, o_year#19, sum#23, isEmpty#24]
Keys [2]: [nation#18, o_year#19]
Functions [1]: [sum(amount#20)]
Aggregate Attributes [1]: [sum(amount#20)#25]
Results [3]: [nation#18, o_year#19, sum(amount#20)#25 AS sum_profit#26]

(37) Exchange
Input [3]: [nation#18, o_year#19, sum_profit#26]
Arguments: rangepartitioning(nation#18 ASC NULLS FIRST, o_year#19 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(38) Sort [codegen id : 8]
Input [3]: [nation#18, o_year#19, sum_profit#26]
Arguments: [nation#18 ASC NULLS FIRST, o_year#19 DESC NULLS LAST], true, 0

