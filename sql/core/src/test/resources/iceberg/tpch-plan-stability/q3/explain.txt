== Physical Plan ==
TakeOrderedAndProject (19)
+- * HashAggregate (18)
   +- Exchange (17)
      +- * HashAggregate (16)
         +- * Project (15)
            +- * BroadcastHashJoin Inner BuildRight (14)
               :- * Project (9)
               :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :- * Project (3)
               :     :  +- * Filter (2)
               :     :     +- BatchScan spark_catalog.default.customer (1)
               :     +- BroadcastExchange (7)
               :        +- * Project (6)
               :           +- * Filter (5)
               :              +- BatchScan spark_catalog.default.orders (4)
               +- BroadcastExchange (13)
                  +- * Project (12)
                     +- * Filter (11)
                        +- BatchScan spark_catalog.default.lineitem (10)


(1) BatchScan spark_catalog.default.customer
Output [2]: [c_custkey#1, c_mktsegment#2]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_mktsegment IS NOT NULL, c_mktsegment = 'BUILDING', c_custkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [2]: [c_custkey#1, c_mktsegment#2]
Condition : ((isnotnull(c_mktsegment#2) AND (c_mktsegment#2 = BUILDING)) AND isnotnull(c_custkey#1))

(3) Project [codegen id : 3]
Output [1]: [c_custkey#1]
Input [2]: [c_custkey#1, c_mktsegment#2]

(4) BatchScan spark_catalog.default.orders
Output [4]: [o_orderkey#3, o_custkey#4, o_orderdate#5, o_shippriority#6]
spark_catalog.default.orders [scan class = SparkBatchQueryScan] [filters=o_orderdate IS NOT NULL, o_orderdate < 9204, o_custkey IS NOT NULL, o_orderkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [4]: [o_orderkey#3, o_custkey#4, o_orderdate#5, o_shippriority#6]
Condition : (((isnotnull(o_orderdate#5) AND (o_orderdate#5 < 1995-03-15)) AND isnotnull(o_custkey#4)) AND isnotnull(o_orderkey#3))

(6) Project [codegen id : 1]
Output [4]: [o_orderkey#3, o_custkey#4, o_orderdate#5, o_shippriority#6]
Input [4]: [o_orderkey#3, o_custkey#4, o_orderdate#5, o_shippriority#6]

(7) BroadcastExchange
Input [4]: [o_orderkey#3, o_custkey#4, o_orderdate#5, o_shippriority#6]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_custkey#1]
Right keys [1]: [o_custkey#4]
Join condition: None

(9) Project [codegen id : 3]
Output [3]: [o_orderkey#3, o_orderdate#5, o_shippriority#6]
Input [5]: [c_custkey#1, o_orderkey#3, o_custkey#4, o_orderdate#5, o_shippriority#6]

(10) BatchScan spark_catalog.default.lineitem
Output [4]: [l_orderkey#7, l_extendedprice#8, l_discount#9, l_shipdate#10]
spark_catalog.default.lineitem [scan class = SparkBatchQueryScan] [filters=l_shipdate IS NOT NULL, l_shipdate > 9204, l_orderkey IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [4]: [l_orderkey#7, l_extendedprice#8, l_discount#9, l_shipdate#10]
Condition : ((isnotnull(l_shipdate#10) AND (l_shipdate#10 > 1995-03-15)) AND isnotnull(l_orderkey#7))

(12) Project [codegen id : 2]
Output [3]: [l_orderkey#7, l_extendedprice#8, l_discount#9]
Input [4]: [l_orderkey#7, l_extendedprice#8, l_discount#9, l_shipdate#10]

(13) BroadcastExchange
Input [3]: [l_orderkey#7, l_extendedprice#8, l_discount#9]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [o_orderkey#3]
Right keys [1]: [l_orderkey#7]
Join condition: None

(15) Project [codegen id : 3]
Output [5]: [o_orderdate#5, o_shippriority#6, l_orderkey#7, l_extendedprice#8, l_discount#9]
Input [6]: [o_orderkey#3, o_orderdate#5, o_shippriority#6, l_orderkey#7, l_extendedprice#8, l_discount#9]

(16) HashAggregate [codegen id : 3]
Input [5]: [o_orderdate#5, o_shippriority#6, l_orderkey#7, l_extendedprice#8, l_discount#9]
Keys [3]: [l_orderkey#7, o_orderdate#5, o_shippriority#6]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(l_extendedprice#8 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#9 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [2]: [sum#11, isEmpty#12]
Results [5]: [l_orderkey#7, o_orderdate#5, o_shippriority#6, sum#13, isEmpty#14]

(17) Exchange
Input [5]: [l_orderkey#7, o_orderdate#5, o_shippriority#6, sum#13, isEmpty#14]
Arguments: hashpartitioning(l_orderkey#7, o_orderdate#5, o_shippriority#6, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) HashAggregate [codegen id : 4]
Input [5]: [l_orderkey#7, o_orderdate#5, o_shippriority#6, sum#13, isEmpty#14]
Keys [3]: [l_orderkey#7, o_orderdate#5, o_shippriority#6]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#8 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#9 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(l_extendedprice#8 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#9 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#15]
Results [4]: [l_orderkey#7, sum(CheckOverflow((promote_precision(cast(l_extendedprice#8 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#9 as decimal(11,0)))), DecimalType(11,0)))), DecimalType(22,0)))#15 AS revenue#16, o_orderdate#5, o_shippriority#6]

(19) TakeOrderedAndProject
Input [4]: [l_orderkey#7, revenue#16, o_orderdate#5, o_shippriority#6]
Arguments: 10, [revenue#16 DESC NULLS LAST, o_orderdate#5 ASC NULLS FIRST], [l_orderkey#7, revenue#16, o_orderdate#5, o_shippriority#6]

