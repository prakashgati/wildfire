== Physical Plan ==
* Sort (49)
+- Exchange (48)
   +- * Project (47)
      +- * BroadcastHashJoin Inner BuildRight (46)
         :- * Project (22)
         :  +- * BroadcastHashJoin Inner BuildRight (21)
         :     :- * HashAggregate (16)
         :     :  +- Exchange (15)
         :     :     +- * HashAggregate (14)
         :     :        +- * Project (13)
         :     :           +- * BroadcastHashJoin Inner BuildRight (12)
         :     :              :- Union (7)
         :     :              :  :- * Project (3)
         :     :              :  :  +- * Filter (2)
         :     :              :  :     +- BatchScan spark_catalog.default.web_sales (1)
         :     :              :  +- * Project (6)
         :     :              :     +- * Filter (5)
         :     :              :        +- BatchScan spark_catalog.default.catalog_sales (4)
         :     :              +- BroadcastExchange (11)
         :     :                 +- * Project (10)
         :     :                    +- * Filter (9)
         :     :                       +- BatchScan spark_catalog.default.date_dim (8)
         :     +- BroadcastExchange (20)
         :        +- * Project (19)
         :           +- * Filter (18)
         :              +- BatchScan spark_catalog.default.date_dim (17)
         +- BroadcastExchange (45)
            +- * Project (44)
               +- * BroadcastHashJoin Inner BuildRight (43)
                  :- * HashAggregate (38)
                  :  +- Exchange (37)
                  :     +- * HashAggregate (36)
                  :        +- * Project (35)
                  :           +- * BroadcastHashJoin Inner BuildRight (34)
                  :              :- Union (29)
                  :              :  :- * Project (25)
                  :              :  :  +- * Filter (24)
                  :              :  :     +- BatchScan spark_catalog.default.web_sales (23)
                  :              :  +- * Project (28)
                  :              :     +- * Filter (27)
                  :              :        +- BatchScan spark_catalog.default.catalog_sales (26)
                  :              +- BroadcastExchange (33)
                  :                 +- * Project (32)
                  :                    +- * Filter (31)
                  :                       +- BatchScan spark_catalog.default.date_dim (30)
                  +- BroadcastExchange (42)
                     +- * Project (41)
                        +- * Filter (40)
                           +- BatchScan spark_catalog.default.date_dim (39)


(1) BatchScan spark_catalog.default.web_sales
Output [2]: [ws_sold_date_sk#1, ws_ext_sales_price#2]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 1]
Input [2]: [ws_sold_date_sk#1, ws_ext_sales_price#2]
Condition : isnotnull(ws_sold_date_sk#1)

(3) Project [codegen id : 1]
Output [2]: [ws_sold_date_sk#1 AS sold_date_sk#3, ws_ext_sales_price#2 AS sales_price#4]
Input [2]: [ws_sold_date_sk#1, ws_ext_sales_price#2]

(4) BatchScan spark_catalog.default.catalog_sales
Output [2]: [cs_sold_date_sk#5, cs_ext_sales_price#6]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 2]
Input [2]: [cs_sold_date_sk#5, cs_ext_sales_price#6]
Condition : isnotnull(cs_sold_date_sk#5)

(6) Project [codegen id : 2]
Output [2]: [cs_sold_date_sk#5 AS sold_date_sk#7, cs_ext_sales_price#6 AS sales_price#8]
Input [2]: [cs_sold_date_sk#5, cs_ext_sales_price#6]

(7) Union

(8) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date_sk IS NOT NULL, d_week_seq IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(9) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Condition : (isnotnull(d_date_sk#9) AND isnotnull(d_week_seq#10))

(10) Project [codegen id : 3]
Output [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]

(11) BroadcastExchange
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sold_date_sk#3]
Right keys [1]: [d_date_sk#9]
Join condition: None

(13) Project [codegen id : 4]
Output [3]: [sales_price#4, d_week_seq#10, d_day_name#11]
Input [5]: [sold_date_sk#3, sales_price#4, d_date_sk#9, d_week_seq#10, d_day_name#11]

(14) HashAggregate [codegen id : 4]
Input [3]: [sales_price#4, d_week_seq#10, d_day_name#11]
Keys [1]: [d_week_seq#10]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))]
Aggregate Attributes [7]: [sum#12, sum#13, sum#14, sum#15, sum#16, sum#17, sum#18]
Results [8]: [d_week_seq#10, sum#19, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25]

(15) Exchange
Input [8]: [d_week_seq#10, sum#19, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25]
Arguments: hashpartitioning(d_week_seq#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(16) HashAggregate [codegen id : 12]
Input [8]: [d_week_seq#10, sum#19, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25]
Keys [1]: [d_week_seq#10]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END))#30, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END))#31, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))#32]
Results [8]: [d_week_seq#10, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END))#26,17,2) AS sun_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END))#27,17,2) AS mon_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END))#28,17,2) AS tue_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END))#29,17,2) AS wed_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END))#30,17,2) AS thu_sales#37, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END))#31,17,2) AS fri_sales#38, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))#32,17,2) AS sat_sales#39]

(17) BatchScan spark_catalog.default.date_dim
Output [2]: [d_week_seq#40, d_year#41]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2001, d_week_seq IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(18) Filter [codegen id : 5]
Input [2]: [d_week_seq#40, d_year#41]
Condition : ((isnotnull(d_year#41) AND (d_year#41 = 2001)) AND isnotnull(d_week_seq#40))

(19) Project [codegen id : 5]
Output [1]: [d_week_seq#40]
Input [2]: [d_week_seq#40, d_year#41]

(20) BroadcastExchange
Input [1]: [d_week_seq#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(21) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_week_seq#10]
Right keys [1]: [d_week_seq#40]
Join condition: None

(22) Project [codegen id : 12]
Output [8]: [d_week_seq#10 AS d_week_seq1#42, sun_sales#33 AS sun_sales1#43, mon_sales#34 AS mon_sales1#44, tue_sales#35 AS tue_sales1#45, wed_sales#36 AS wed_sales1#46, thu_sales#37 AS thu_sales1#47, fri_sales#38 AS fri_sales1#48, sat_sales#39 AS sat_sales1#49]
Input [9]: [d_week_seq#10, sun_sales#33, mon_sales#34, tue_sales#35, wed_sales#36, thu_sales#37, fri_sales#38, sat_sales#39, d_week_seq#40]

(23) BatchScan spark_catalog.default.web_sales
Output [2]: [ws_sold_date_sk#1, ws_ext_sales_price#2]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 6]
Input [2]: [ws_sold_date_sk#1, ws_ext_sales_price#2]
Condition : isnotnull(ws_sold_date_sk#1)

(25) Project [codegen id : 6]
Output [2]: [ws_sold_date_sk#1 AS sold_date_sk#3, ws_ext_sales_price#2 AS sales_price#4]
Input [2]: [ws_sold_date_sk#1, ws_ext_sales_price#2]

(26) BatchScan spark_catalog.default.catalog_sales
Output [2]: [cs_sold_date_sk#5, cs_ext_sales_price#6]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(27) Filter [codegen id : 7]
Input [2]: [cs_sold_date_sk#5, cs_ext_sales_price#6]
Condition : isnotnull(cs_sold_date_sk#5)

(28) Project [codegen id : 7]
Output [2]: [cs_sold_date_sk#5 AS sold_date_sk#7, cs_ext_sales_price#6 AS sales_price#8]
Input [2]: [cs_sold_date_sk#5, cs_ext_sales_price#6]

(29) Union

(30) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date_sk IS NOT NULL, d_week_seq IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(31) Filter [codegen id : 8]
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Condition : (isnotnull(d_date_sk#9) AND isnotnull(d_week_seq#10))

(32) Project [codegen id : 8]
Output [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]

(33) BroadcastExchange
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [sold_date_sk#3]
Right keys [1]: [d_date_sk#9]
Join condition: None

(35) Project [codegen id : 9]
Output [3]: [sales_price#4, d_week_seq#10, d_day_name#11]
Input [5]: [sold_date_sk#3, sales_price#4, d_date_sk#9, d_week_seq#10, d_day_name#11]

(36) HashAggregate [codegen id : 9]
Input [3]: [sales_price#4, d_week_seq#10, d_day_name#11]
Keys [1]: [d_week_seq#10]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))]
Aggregate Attributes [7]: [sum#50, sum#51, sum#52, sum#53, sum#54, sum#55, sum#56]
Results [8]: [d_week_seq#10, sum#57, sum#58, sum#59, sum#60, sum#61, sum#62, sum#63]

(37) Exchange
Input [8]: [d_week_seq#10, sum#57, sum#58, sum#59, sum#60, sum#61, sum#62, sum#63]
Arguments: hashpartitioning(d_week_seq#10, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 11]
Input [8]: [d_week_seq#10, sum#57, sum#58, sum#59, sum#60, sum#61, sum#62, sum#63]
Keys [1]: [d_week_seq#10]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END))#30, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END))#31, sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))#32]
Results [8]: [d_week_seq#10, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday) THEN sales_price#4 END))#26,17,2) AS sun_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday) THEN sales_price#4 END))#27,17,2) AS mon_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday) THEN sales_price#4 END))#28,17,2) AS tue_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END))#29,17,2) AS wed_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday) THEN sales_price#4 END))#30,17,2) AS thu_sales#37, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday) THEN sales_price#4 END))#31,17,2) AS fri_sales#38, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday) THEN sales_price#4 END))#32,17,2) AS sat_sales#39]

(39) BatchScan spark_catalog.default.date_dim
Output [2]: [d_week_seq#64, d_year#65]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2002, d_week_seq IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(40) Filter [codegen id : 10]
Input [2]: [d_week_seq#64, d_year#65]
Condition : ((isnotnull(d_year#65) AND (d_year#65 = 2002)) AND isnotnull(d_week_seq#64))

(41) Project [codegen id : 10]
Output [1]: [d_week_seq#64]
Input [2]: [d_week_seq#64, d_year#65]

(42) BroadcastExchange
Input [1]: [d_week_seq#64]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [d_week_seq#10]
Right keys [1]: [d_week_seq#64]
Join condition: None

(44) Project [codegen id : 11]
Output [8]: [d_week_seq#10 AS d_week_seq2#66, sun_sales#33 AS sun_sales2#67, mon_sales#34 AS mon_sales2#68, tue_sales#35 AS tue_sales2#69, wed_sales#36 AS wed_sales2#70, thu_sales#37 AS thu_sales2#71, fri_sales#38 AS fri_sales2#72, sat_sales#39 AS sat_sales2#73]
Input [9]: [d_week_seq#10, sun_sales#33, mon_sales#34, tue_sales#35, wed_sales#36, thu_sales#37, fri_sales#38, sat_sales#39, d_week_seq#64]

(45) BroadcastExchange
Input [8]: [d_week_seq2#66, sun_sales2#67, mon_sales2#68, tue_sales2#69, wed_sales2#70, thu_sales2#71, fri_sales2#72, sat_sales2#73]
Arguments: HashedRelationBroadcastMode(List(cast((input[0, int, true] - 53) as bigint)),false), [plan_id=7]

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_week_seq1#42]
Right keys [1]: [(d_week_seq2#66 - 53)]
Join condition: None

(47) Project [codegen id : 12]
Output [8]: [d_week_seq1#42, round(CheckOverflow((promote_precision(sun_sales1#43) / promote_precision(sun_sales2#67)), DecimalType(37,20)), 2) AS round((sun_sales1 / sun_sales2), 2)#74, round(CheckOverflow((promote_precision(mon_sales1#44) / promote_precision(mon_sales2#68)), DecimalType(37,20)), 2) AS round((mon_sales1 / mon_sales2), 2)#75, round(CheckOverflow((promote_precision(tue_sales1#45) / promote_precision(tue_sales2#69)), DecimalType(37,20)), 2) AS round((tue_sales1 / tue_sales2), 2)#76, round(CheckOverflow((promote_precision(wed_sales1#46) / promote_precision(wed_sales2#70)), DecimalType(37,20)), 2) AS round((wed_sales1 / wed_sales2), 2)#77, round(CheckOverflow((promote_precision(thu_sales1#47) / promote_precision(thu_sales2#71)), DecimalType(37,20)), 2) AS round((thu_sales1 / thu_sales2), 2)#78, round(CheckOverflow((promote_precision(fri_sales1#48) / promote_precision(fri_sales2#72)), DecimalType(37,20)), 2) AS round((fri_sales1 / fri_sales2), 2)#79, round(CheckOverflow((promote_precision(sat_sales1#49) / promote_precision(sat_sales2#73)), DecimalType(37,20)), 2) AS round((sat_sales1 / sat_sales2), 2)#80]
Input [16]: [d_week_seq1#42, sun_sales1#43, mon_sales1#44, tue_sales1#45, wed_sales1#46, thu_sales1#47, fri_sales1#48, sat_sales1#49, d_week_seq2#66, sun_sales2#67, mon_sales2#68, tue_sales2#69, wed_sales2#70, thu_sales2#71, fri_sales2#72, sat_sales2#73]

(48) Exchange
Input [8]: [d_week_seq1#42, round((sun_sales1 / sun_sales2), 2)#74, round((mon_sales1 / mon_sales2), 2)#75, round((tue_sales1 / tue_sales2), 2)#76, round((wed_sales1 / wed_sales2), 2)#77, round((thu_sales1 / thu_sales2), 2)#78, round((fri_sales1 / fri_sales2), 2)#79, round((sat_sales1 / sat_sales2), 2)#80]
Arguments: rangepartitioning(d_week_seq1#42 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(49) Sort [codegen id : 13]
Input [8]: [d_week_seq1#42, round((sun_sales1 / sun_sales2), 2)#74, round((mon_sales1 / mon_sales2), 2)#75, round((tue_sales1 / tue_sales2), 2)#76, round((wed_sales1 / wed_sales2), 2)#77, round((thu_sales1 / thu_sales2), 2)#78, round((fri_sales1 / fri_sales2), 2)#79, round((sat_sales1 / sat_sales2), 2)#80]
Arguments: [d_week_seq1#42 ASC NULLS FIRST], true, 0

