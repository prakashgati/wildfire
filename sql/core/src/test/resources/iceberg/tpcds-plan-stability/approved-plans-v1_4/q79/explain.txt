== Physical Plan ==
TakeOrderedAndProject (28)
+- * Project (27)
   +- * BroadcastHashJoin Inner BuildRight (26)
      :- * HashAggregate (21)
      :  +- Exchange (20)
      :     +- * HashAggregate (19)
      :        +- * Project (18)
      :           +- * BroadcastHashJoin Inner BuildRight (17)
      :              :- * Project (12)
      :              :  +- * BroadcastHashJoin Inner BuildRight (11)
      :              :     :- * Project (6)
      :              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :              :     :     :- * Project (3)
      :              :     :     :  +- * Filter (2)
      :              :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
      :              :     :     +- ReusedExchange (4)
      :              :     +- BroadcastExchange (10)
      :              :        +- * Project (9)
      :              :           +- * Filter (8)
      :              :              +- BatchScan spark_catalog.default.store (7)
      :              +- BroadcastExchange (16)
      :                 +- * Project (15)
      :                    +- * Filter (14)
      :                       +- BatchScan spark_catalog.default.household_demographics (13)
      +- BroadcastExchange (25)
         +- * Project (24)
            +- * Filter (23)
               +- BatchScan spark_catalog.default.customer (22)


(1) BatchScan spark_catalog.default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_hdemo_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Condition : (((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) Project [codegen id : 4]
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]

(4) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#9]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, d_date_sk#9]

(7) BatchScan spark_catalog.default.store
Output [3]: [s_store_sk#10, s_number_employees#11, s_city#12]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_number_employees IS NOT NULL, s_number_employees >= 200, s_number_employees <= 295, s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [3]: [s_store_sk#10, s_number_employees#11, s_city#12]
Condition : (((isnotnull(s_number_employees#11) AND (s_number_employees#11 >= 200)) AND (s_number_employees#11 <= 295)) AND isnotnull(s_store_sk#10))

(9) Project [codegen id : 2]
Output [2]: [s_store_sk#10, s_city#12]
Input [3]: [s_store_sk#10, s_number_employees#11, s_city#12]

(10) BroadcastExchange
Input [2]: [s_store_sk#10, s_city#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#10]
Join condition: None

(12) Project [codegen id : 4]
Output [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_city#12]
Input [9]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_store_sk#10, s_city#12]

(13) BatchScan spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
spark_catalog.default.household_demographics [scan class = SparkBatchQueryScan] [filters=(hd_dep_count = 6 OR hd_vehicle_count > 2), hd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
Condition : (((hd_dep_count#14 = 6) OR (hd_vehicle_count#15 > 2)) AND isnotnull(hd_demo_sk#13))

(15) Project [codegen id : 3]
Output [1]: [hd_demo_sk#13]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]

(16) BroadcastExchange
Input [1]: [hd_demo_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#13]
Join condition: None

(18) Project [codegen id : 4]
Output [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_city#12]
Input [8]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_city#12, hd_demo_sk#13]

(19) HashAggregate [codegen id : 4]
Input [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_city#12]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, s_city#12]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#7)), partial_sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum#16, sum#17]
Results [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, s_city#12, sum#18, sum#19]

(20) Exchange
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, s_city#12, sum#18, sum#19]
Arguments: hashpartitioning(ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, s_city#12, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 6]
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, s_city#12, sum#18, sum#19]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, s_city#12]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#7)), sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#7))#20, sum(UnscaledValue(ss_net_profit#8))#21]
Results [5]: [ss_ticket_number#6, ss_customer_sk#2, s_city#12, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#7))#20,17,2) AS amt#22, MakeDecimal(sum(UnscaledValue(ss_net_profit#8))#21,17,2) AS profit#23]

(22) BatchScan spark_catalog.default.customer
Output [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 5]
Input [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]
Condition : isnotnull(c_customer_sk#24)

(24) Project [codegen id : 5]
Output [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]
Input [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]

(25) BroadcastExchange
Input [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(27) Project [codegen id : 6]
Output [7]: [c_last_name#26, c_first_name#25, substr(s_city#12, 1, 30) AS substr(s_city, 1, 30)#27, ss_ticket_number#6, amt#22, profit#23, s_city#12]
Input [8]: [ss_ticket_number#6, ss_customer_sk#2, s_city#12, amt#22, profit#23, c_customer_sk#24, c_first_name#25, c_last_name#26]

(28) TakeOrderedAndProject
Input [7]: [c_last_name#26, c_first_name#25, substr(s_city, 1, 30)#27, ss_ticket_number#6, amt#22, profit#23, s_city#12]
Arguments: 100, [c_last_name#26 ASC NULLS FIRST, c_first_name#25 ASC NULLS FIRST, substr(s_city#12, 1, 30) ASC NULLS FIRST, profit#23 ASC NULLS FIRST], [c_last_name#26, c_first_name#25, substr(s_city, 1, 30)#27, ss_ticket_number#6, amt#22, profit#23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#28
BroadcastExchange (32)
+- * Project (31)
   +- * Filter (30)
      +- BatchScan spark_catalog.default.date_dim (29)


(29) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#29, d_dow#30]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_dow IS NOT NULL, d_dow = 1, d_year IN (1999, 2000, 2001), d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(30) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#29, d_dow#30]
Condition : (((isnotnull(d_dow#30) AND (d_dow#30 = 1)) AND d_year#29 IN (1999,2000,2001)) AND isnotnull(d_date_sk#9))

(31) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#29, d_dow#30]

(32) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


