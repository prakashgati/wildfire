== Physical Plan ==
TakeOrderedAndProject (37)
+- * Project (36)
   +- * BroadcastHashJoin Inner BuildRight (35)
      :- * Project (33)
      :  +- * BroadcastHashJoin Inner BuildRight (32)
      :     :- * HashAggregate (27)
      :     :  +- Exchange (26)
      :     :     +- * HashAggregate (25)
      :     :        +- * Project (24)
      :     :           +- * BroadcastHashJoin Inner BuildRight (23)
      :     :              :- * Project (18)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :              :     :- * Project (12)
      :     :              :     :  +- * BroadcastHashJoin Inner BuildRight (11)
      :     :              :     :     :- * Project (6)
      :     :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :              :     :     :     :- * Project (3)
      :     :              :     :     :     :  +- * Filter (2)
      :     :              :     :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
      :     :              :     :     :     +- ReusedExchange (4)
      :     :              :     :     +- BroadcastExchange (10)
      :     :              :     :        +- * Project (9)
      :     :              :     :           +- * Filter (8)
      :     :              :     :              +- BatchScan spark_catalog.default.store (7)
      :     :              :     +- BroadcastExchange (16)
      :     :              :        +- * Project (15)
      :     :              :           +- * Filter (14)
      :     :              :              +- BatchScan spark_catalog.default.household_demographics (13)
      :     :              +- BroadcastExchange (22)
      :     :                 +- * Project (21)
      :     :                    +- * Filter (20)
      :     :                       +- BatchScan spark_catalog.default.customer_address (19)
      :     +- BroadcastExchange (31)
      :        +- * Project (30)
      :           +- * Filter (29)
      :              +- BatchScan spark_catalog.default.customer (28)
      +- ReusedExchange (34)


(1) BatchScan spark_catalog.default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_hdemo_sk IS NOT NULL, ss_addr_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Condition : ((((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_addr_sk#4)) AND isnotnull(ss_customer_sk#2))

(3) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]

(4) ReusedExchange [Reuses operator id: 41]
Output [1]: [d_date_sk#9]

(5) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(6) Project [codegen id : 5]
Output [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, d_date_sk#9]

(7) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#10, s_city#11]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_city IN ('Fairview', 'Midway'), s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_city#11]
Condition : (s_city#11 IN (Fairview,Midway) AND isnotnull(s_store_sk#10))

(9) Project [codegen id : 2]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_city#11]

(10) BroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#10]
Join condition: None

(12) Project [codegen id : 5]
Output [6]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [8]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_store_sk#10]

(13) BatchScan spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#12, hd_dep_count#13, hd_vehicle_count#14]
spark_catalog.default.household_demographics [scan class = SparkBatchQueryScan] [filters=(hd_dep_count = 4 OR hd_vehicle_count = 3), hd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [3]: [hd_demo_sk#12, hd_dep_count#13, hd_vehicle_count#14]
Condition : (((hd_dep_count#13 = 4) OR (hd_vehicle_count#14 = 3)) AND isnotnull(hd_demo_sk#12))

(15) Project [codegen id : 3]
Output [1]: [hd_demo_sk#12]
Input [3]: [hd_demo_sk#12, hd_dep_count#13, hd_vehicle_count#14]

(16) BroadcastExchange
Input [1]: [hd_demo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#12]
Join condition: None

(18) Project [codegen id : 5]
Output [5]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, hd_demo_sk#12]

(19) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#15, ca_city#16]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL, ca_city IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 4]
Input [2]: [ca_address_sk#15, ca_city#16]
Condition : (isnotnull(ca_address_sk#15) AND isnotnull(ca_city#16))

(21) Project [codegen id : 4]
Output [2]: [ca_address_sk#15, ca_city#16]
Input [2]: [ca_address_sk#15, ca_city#16]

(22) BroadcastExchange
Input [2]: [ca_address_sk#15, ca_city#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#4]
Right keys [1]: [ca_address_sk#15]
Join condition: None

(24) Project [codegen id : 5]
Output [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#16]
Input [7]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_address_sk#15, ca_city#16]

(25) HashAggregate [codegen id : 5]
Input [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#16]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#7)), partial_sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum#17, sum#18]
Results [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, sum#19, sum#20]

(26) Exchange
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, sum#19, sum#20]
Arguments: hashpartitioning(ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(27) HashAggregate [codegen id : 8]
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, sum#19, sum#20]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#7)), sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#7))#21, sum(UnscaledValue(ss_net_profit#8))#22]
Results [5]: [ss_ticket_number#6, ss_customer_sk#2, ca_city#16 AS bought_city#23, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#7))#21,17,2) AS amt#24, MakeDecimal(sum(UnscaledValue(ss_net_profit#8))#22,17,2) AS profit#25]

(28) BatchScan spark_catalog.default.customer
Output [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 6]
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Condition : (isnotnull(c_customer_sk#26) AND isnotnull(c_current_addr_sk#27))

(30) Project [codegen id : 6]
Output [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]

(31) BroadcastExchange
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(33) Project [codegen id : 8]
Output [7]: [ss_ticket_number#6, bought_city#23, amt#24, profit#25, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Input [9]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#23, amt#24, profit#25, c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]

(34) ReusedExchange [Reuses operator id: 22]
Output [2]: [ca_address_sk#30, ca_city#31]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#27]
Right keys [1]: [ca_address_sk#30]
Join condition: NOT (ca_city#31 = bought_city#23)

(36) Project [codegen id : 8]
Output [7]: [c_last_name#29, c_first_name#28, ca_city#31, bought_city#23, ss_ticket_number#6, amt#24, profit#25]
Input [9]: [ss_ticket_number#6, bought_city#23, amt#24, profit#25, c_current_addr_sk#27, c_first_name#28, c_last_name#29, ca_address_sk#30, ca_city#31]

(37) TakeOrderedAndProject
Input [7]: [c_last_name#29, c_first_name#28, ca_city#31, bought_city#23, ss_ticket_number#6, amt#24, profit#25]
Arguments: 100, [c_last_name#29 ASC NULLS FIRST, c_first_name#28 ASC NULLS FIRST, ca_city#31 ASC NULLS FIRST, bought_city#23 ASC NULLS FIRST, ss_ticket_number#6 ASC NULLS FIRST], [c_last_name#29, c_first_name#28, ca_city#31, bought_city#23, ss_ticket_number#6, amt#24, profit#25]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#32
BroadcastExchange (41)
+- * Project (40)
   +- * Filter (39)
      +- BatchScan spark_catalog.default.date_dim (38)


(38) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#33, d_dow#34]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_dow IN (6, 0), d_year IN (1999, 2000, 2001), d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(39) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#33, d_dow#34]
Condition : ((d_dow#34 IN (6,0) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#9))

(40) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#33, d_dow#34]

(41) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


