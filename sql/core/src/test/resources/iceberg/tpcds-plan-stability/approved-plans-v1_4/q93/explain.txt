== Physical Plan ==
TakeOrderedAndProject (18)
+- * HashAggregate (17)
   +- Exchange (16)
      +- * HashAggregate (15)
         +- * Project (14)
            +- * BroadcastHashJoin Inner BuildRight (13)
               :- * Project (8)
               :  +- * BroadcastHashJoin Inner BuildLeft (7)
               :     :- BroadcastExchange (3)
               :     :  +- * Project (2)
               :     :     +- BatchScan spark_catalog.default.store_sales (1)
               :     +- * Project (6)
               :        +- * Filter (5)
               :           +- BatchScan spark_catalog.default.store_returns (4)
               +- BroadcastExchange (12)
                  +- * Project (11)
                     +- * Filter (10)
                        +- BatchScan spark_catalog.default.reason (9)


(1) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Project [codegen id : 1]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]

(3) BroadcastExchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, true] as bigint), 32) | (cast(input[2, int, true] as bigint) & 4294967295))),false), [plan_id=1]

(4) BatchScan spark_catalog.default.store_returns
Output [4]: [sr_item_sk#6, sr_reason_sk#7, sr_ticket_number#8, sr_return_quantity#9]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_item_sk IS NOT NULL, sr_ticket_number IS NOT NULL, sr_reason_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter
Input [4]: [sr_item_sk#6, sr_reason_sk#7, sr_ticket_number#8, sr_return_quantity#9]
Condition : ((isnotnull(sr_item_sk#6) AND isnotnull(sr_ticket_number#8)) AND isnotnull(sr_reason_sk#7))

(6) Project
Output [4]: [sr_item_sk#6, sr_reason_sk#7, sr_ticket_number#8, sr_return_quantity#9]
Input [4]: [sr_item_sk#6, sr_reason_sk#7, sr_ticket_number#8, sr_return_quantity#9]

(7) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#3]
Right keys [2]: [sr_item_sk#6, sr_ticket_number#8]
Join condition: None

(8) Project [codegen id : 3]
Output [5]: [ss_customer_sk#2, ss_quantity#4, ss_sales_price#5, sr_reason_sk#7, sr_return_quantity#9]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5, sr_item_sk#6, sr_reason_sk#7, sr_ticket_number#8, sr_return_quantity#9]

(9) BatchScan spark_catalog.default.reason
Output [2]: [r_reason_sk#10, r_reason_desc#11]
spark_catalog.default.reason [scan class = SparkBatchQueryScan] [filters=r_reason_desc IS NOT NULL, r_reason_desc = 'reason 28', r_reason_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(10) Filter [codegen id : 2]
Input [2]: [r_reason_sk#10, r_reason_desc#11]
Condition : ((isnotnull(r_reason_desc#11) AND (r_reason_desc#11 = reason 28)) AND isnotnull(r_reason_sk#10))

(11) Project [codegen id : 2]
Output [1]: [r_reason_sk#10]
Input [2]: [r_reason_sk#10, r_reason_desc#11]

(12) BroadcastExchange
Input [1]: [r_reason_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [sr_reason_sk#7]
Right keys [1]: [r_reason_sk#10]
Join condition: None

(14) Project [codegen id : 3]
Output [2]: [ss_customer_sk#2, CASE WHEN isnotnull(sr_return_quantity#9) THEN CheckOverflow((promote_precision(cast((ss_quantity#4 - sr_return_quantity#9) as decimal(12,2))) * promote_precision(cast(ss_sales_price#5 as decimal(12,2)))), DecimalType(18,2)) ELSE CheckOverflow((promote_precision(cast(ss_quantity#4 as decimal(12,2))) * promote_precision(cast(ss_sales_price#5 as decimal(12,2)))), DecimalType(18,2)) END AS act_sales#12]
Input [6]: [ss_customer_sk#2, ss_quantity#4, ss_sales_price#5, sr_reason_sk#7, sr_return_quantity#9, r_reason_sk#10]

(15) HashAggregate [codegen id : 3]
Input [2]: [ss_customer_sk#2, act_sales#12]
Keys [1]: [ss_customer_sk#2]
Functions [1]: [partial_sum(act_sales#12)]
Aggregate Attributes [2]: [sum#13, isEmpty#14]
Results [3]: [ss_customer_sk#2, sum#15, isEmpty#16]

(16) Exchange
Input [3]: [ss_customer_sk#2, sum#15, isEmpty#16]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) HashAggregate [codegen id : 4]
Input [3]: [ss_customer_sk#2, sum#15, isEmpty#16]
Keys [1]: [ss_customer_sk#2]
Functions [1]: [sum(act_sales#12)]
Aggregate Attributes [1]: [sum(act_sales#12)#17]
Results [2]: [ss_customer_sk#2, sum(act_sales#12)#17 AS sumsales#18]

(18) TakeOrderedAndProject
Input [2]: [ss_customer_sk#2, sumsales#18]
Arguments: 100, [sumsales#18 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST], [ss_customer_sk#2, sumsales#18]

