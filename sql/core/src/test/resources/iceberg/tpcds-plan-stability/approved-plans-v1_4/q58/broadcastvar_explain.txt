== Physical Plan ==
TakeOrderedAndProject (73)
+- * Project (72)
   +- * BroadcastHashJoin Inner BuildRight (71)
      :- * Project (50)
      :  +- * BroadcastHashJoin Inner BuildRight (49)
      :     :- * Filter (25)
      :     :  +- * HashAggregate (24)
      :     :     +- Exchange (23)
      :     :        +- * HashAggregate (22)
      :     :           +- * Project (21)
      :     :              +- * BroadcastHashJoin Inner BuildRight (20)
      :     :                 :- * Project (9)
      :     :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                 :     :- * Project (3)
      :     :                 :     :  +- * Filter (2)
      :     :                 :     :     +- BatchScan spark_catalog.default.store_sales (1)
      :     :                 :     +- BroadcastExchange (7)
      :     :                 :        +- * Project (6)
      :     :                 :           +- * Filter (5)
      :     :                 :              +- BatchScan spark_catalog.default.item (4)
      :     :                 +- BroadcastExchange (19)
      :     :                    +- * Project (18)
      :     :                       +- * BroadcastHashJoin LeftSemi BuildRight (17)
      :     :                          :- * Project (12)
      :     :                          :  +- * Filter (11)
      :     :                          :     +- BatchScan spark_catalog.default.date_dim (10)
      :     :                          +- BroadcastExchange (16)
      :     :                             +- * Project (15)
      :     :                                +- * Filter (14)
      :     :                                   +- BatchScan spark_catalog.default.date_dim (13)
      :     +- BroadcastExchange (48)
      :        +- * Filter (47)
      :           +- * HashAggregate (46)
      :              +- Exchange (45)
      :                 +- * HashAggregate (44)
      :                    +- * Project (43)
      :                       +- * BroadcastHashJoin Inner BuildRight (42)
      :                          :- * Project (34)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (33)
      :                          :     :- * Project (28)
      :                          :     :  +- * Filter (27)
      :                          :     :     +- BatchScan spark_catalog.default.catalog_sales (26)
      :                          :     +- BroadcastExchange (32)
      :                          :        +- * Project (31)
      :                          :           +- * Filter (30)
      :                          :              +- BatchScan spark_catalog.default.item (29)
      :                          +- BroadcastExchange (41)
      :                             +- * Project (40)
      :                                +- * BroadcastHashJoin LeftSemi BuildRight (39)
      :                                   :- * Project (37)
      :                                   :  +- * Filter (36)
      :                                   :     +- BatchScan spark_catalog.default.date_dim (35)
      :                                   +- ReusedExchange (38)
      +- BroadcastExchange (70)
         +- * Filter (69)
            +- * HashAggregate (68)
               +- Exchange (67)
                  +- * HashAggregate (66)
                     +- * Project (65)
                        +- * BroadcastHashJoin Inner BuildRight (64)
                           :- * Project (56)
                           :  +- * BroadcastHashJoin Inner BuildRight (55)
                           :     :- * Project (53)
                           :     :  +- * Filter (52)
                           :     :     +- BatchScan spark_catalog.default.web_sales (51)
                           :     +- ReusedExchange (54)
                           +- BroadcastExchange (63)
                              +- * Project (62)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (61)
                                    :- * Project (59)
                                    :  +- * Filter (58)
                                    :     +- BatchScan spark_catalog.default.date_dim (57)
                                    +- ReusedExchange (60)


(1) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_item_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(3) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]

(4) BatchScan spark_catalog.default.item
Output [2]: [i_item_sk#4, i_item_id#5]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL, i_item_id IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(i_item_id#5))

(6) Project [codegen id : 1]
Output [2]: [i_item_sk#4, i_item_id#5]
Input [2]: [i_item_sk#4, i_item_id#5]

(7) BroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#4]
Join condition: None

(9) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_item_id#5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3, i_item_sk#4, i_item_id#5]

(10) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 3]
Input [2]: [d_date_sk#6, d_date#7]
Condition : isnotnull(d_date_sk#6)

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#6, d_date#7]
Input [2]: [d_date_sk#6, d_date#7]

(13) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_week_seq IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = Subquery scalar-subquery#10, [id=#11]))

(15) Project [codegen id : 2]
Output [1]: [d_date#8]
Input [2]: [d_date#8, d_week_seq#9]

(16) BroadcastExchange
Input [1]: [d_date#8]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#7]
Right keys [1]: [d_date#8]
Join condition: None

(18) Project [codegen id : 3]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(19) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(21) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#3, i_item_id#5]
Input [4]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_item_id#5, d_date_sk#6]

(22) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#3, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#12]
Results [2]: [i_item_id#5, sum#13]

(23) Exchange
Input [2]: [i_item_id#5, sum#13]
Arguments: hashpartitioning(i_item_id#5, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) HashAggregate [codegen id : 15]
Input [2]: [i_item_id#5, sum#13]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#14]
Results [2]: [i_item_id#5 AS item_id#15, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#14,17,2) AS ss_item_rev#16]

(25) Filter [codegen id : 15]
Input [2]: [item_id#15, ss_item_rev#16]
Condition : isnotnull(ss_item_rev#16)

(26) BatchScan spark_catalog.default.catalog_sales
Output [3]: [cs_sold_date_sk#17, cs_item_sk#18, cs_ext_sales_price#19]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_item_sk IS NOT NULL, cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(27) Filter [codegen id : 8]
Input [3]: [cs_sold_date_sk#17, cs_item_sk#18, cs_ext_sales_price#19]
Condition : (isnotnull(cs_item_sk#18) AND isnotnull(cs_sold_date_sk#17))

(28) Project [codegen id : 8]
Output [3]: [cs_sold_date_sk#17, cs_item_sk#18, cs_ext_sales_price#19]
Input [3]: [cs_sold_date_sk#17, cs_item_sk#18, cs_ext_sales_price#19]

(29) BatchScan spark_catalog.default.item
Output [2]: [i_item_sk#20, i_item_id#21]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL, i_item_id IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(30) Filter [codegen id : 5]
Input [2]: [i_item_sk#20, i_item_id#21]
Condition : (isnotnull(i_item_sk#20) AND isnotnull(i_item_id#21))

(31) Project [codegen id : 5]
Output [2]: [i_item_sk#20, i_item_id#21]
Input [2]: [i_item_sk#20, i_item_id#21]

(32) BroadcastExchange
Input [2]: [i_item_sk#20, i_item_id#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#20]
Join condition: None

(34) Project [codegen id : 8]
Output [3]: [cs_sold_date_sk#17, cs_ext_sales_price#19, i_item_id#21]
Input [5]: [cs_sold_date_sk#17, cs_item_sk#18, cs_ext_sales_price#19, i_item_sk#20, i_item_id#21]

(35) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_date#23]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(36) Filter [codegen id : 7]
Input [2]: [d_date_sk#22, d_date#23]
Condition : isnotnull(d_date_sk#22)

(37) Project [codegen id : 7]
Output [2]: [d_date_sk#22, d_date#23]
Input [2]: [d_date_sk#22, d_date#23]

(38) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date#24]

(39) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [d_date#23]
Right keys [1]: [d_date#24]
Join condition: None

(40) Project [codegen id : 7]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_date#23]

(41) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(42) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#22]
Join condition: None

(43) Project [codegen id : 8]
Output [2]: [cs_ext_sales_price#19, i_item_id#21]
Input [4]: [cs_sold_date_sk#17, cs_ext_sales_price#19, i_item_id#21, d_date_sk#22]

(44) HashAggregate [codegen id : 8]
Input [2]: [cs_ext_sales_price#19, i_item_id#21]
Keys [1]: [i_item_id#21]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#19))]
Aggregate Attributes [1]: [sum#25]
Results [2]: [i_item_id#21, sum#26]

(45) Exchange
Input [2]: [i_item_id#21, sum#26]
Arguments: hashpartitioning(i_item_id#21, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(46) HashAggregate [codegen id : 9]
Input [2]: [i_item_id#21, sum#26]
Keys [1]: [i_item_id#21]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#19))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#19))#27]
Results [2]: [i_item_id#21 AS item_id#28, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#19))#27,17,2) AS cs_item_rev#29]

(47) Filter [codegen id : 9]
Input [2]: [item_id#28, cs_item_rev#29]
Condition : isnotnull(cs_item_rev#29)

(48) BroadcastExchange
Input [2]: [item_id#28, cs_item_rev#29]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(49) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#15]
Right keys [1]: [item_id#28]
Join condition: ((((cast(ss_item_rev#16 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#29)), DecimalType(19,3))) AND (cast(ss_item_rev#16 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#29)), DecimalType(20,3)))) AND (cast(cs_item_rev#29 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#16)), DecimalType(19,3)))) AND (cast(cs_item_rev#29 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#16)), DecimalType(20,3))))

(50) Project [codegen id : 15]
Output [3]: [item_id#15, ss_item_rev#16, cs_item_rev#29]
Input [4]: [item_id#15, ss_item_rev#16, item_id#28, cs_item_rev#29]

(51) BatchScan spark_catalog.default.web_sales
Output [3]: [ws_sold_date_sk#30, ws_item_sk#31, ws_ext_sales_price#32]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_item_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(52) Filter [codegen id : 13]
Input [3]: [ws_sold_date_sk#30, ws_item_sk#31, ws_ext_sales_price#32]
Condition : (isnotnull(ws_item_sk#31) AND isnotnull(ws_sold_date_sk#30))

(53) Project [codegen id : 13]
Output [3]: [ws_sold_date_sk#30, ws_item_sk#31, ws_ext_sales_price#32]
Input [3]: [ws_sold_date_sk#30, ws_item_sk#31, ws_ext_sales_price#32]

(54) ReusedExchange [Reuses operator id: 32]
Output [2]: [i_item_sk#33, i_item_id#34]

(55) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#31]
Right keys [1]: [i_item_sk#33]
Join condition: None

(56) Project [codegen id : 13]
Output [3]: [ws_sold_date_sk#30, ws_ext_sales_price#32, i_item_id#34]
Input [5]: [ws_sold_date_sk#30, ws_item_sk#31, ws_ext_sales_price#32, i_item_sk#33, i_item_id#34]

(57) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#35, d_date#36]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(58) Filter [codegen id : 12]
Input [2]: [d_date_sk#35, d_date#36]
Condition : isnotnull(d_date_sk#35)

(59) Project [codegen id : 12]
Output [2]: [d_date_sk#35, d_date#36]
Input [2]: [d_date_sk#35, d_date#36]

(60) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date#37]

(61) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_date#36]
Right keys [1]: [d_date#37]
Join condition: None

(62) Project [codegen id : 12]
Output [1]: [d_date_sk#35]
Input [2]: [d_date_sk#35, d_date#36]

(63) BroadcastExchange
Input [1]: [d_date_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(64) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#35]
Join condition: None

(65) Project [codegen id : 13]
Output [2]: [ws_ext_sales_price#32, i_item_id#34]
Input [4]: [ws_sold_date_sk#30, ws_ext_sales_price#32, i_item_id#34, d_date_sk#35]

(66) HashAggregate [codegen id : 13]
Input [2]: [ws_ext_sales_price#32, i_item_id#34]
Keys [1]: [i_item_id#34]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#32))]
Aggregate Attributes [1]: [sum#38]
Results [2]: [i_item_id#34, sum#39]

(67) Exchange
Input [2]: [i_item_id#34, sum#39]
Arguments: hashpartitioning(i_item_id#34, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(68) HashAggregate [codegen id : 14]
Input [2]: [i_item_id#34, sum#39]
Keys [1]: [i_item_id#34]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#32))#40]
Results [2]: [i_item_id#34 AS item_id#41, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#32))#40,17,2) AS ws_item_rev#42]

(69) Filter [codegen id : 14]
Input [2]: [item_id#41, ws_item_rev#42]
Condition : isnotnull(ws_item_rev#42)

(70) BroadcastExchange
Input [2]: [item_id#41, ws_item_rev#42]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(71) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#15]
Right keys [1]: [item_id#41]
Join condition: ((((((((cast(ss_item_rev#16 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#42)), DecimalType(19,3))) AND (cast(ss_item_rev#16 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#42)), DecimalType(20,3)))) AND (cast(cs_item_rev#29 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#42)), DecimalType(19,3)))) AND (cast(cs_item_rev#29 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#42)), DecimalType(20,3)))) AND (cast(ws_item_rev#42 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#16)), DecimalType(19,3)))) AND (cast(ws_item_rev#42 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#16)), DecimalType(20,3)))) AND (cast(ws_item_rev#42 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#29)), DecimalType(19,3)))) AND (cast(ws_item_rev#42 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#29)), DecimalType(20,3))))

(72) Project [codegen id : 15]
Output [8]: [item_id#15, ss_item_rev#16, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#16 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#16 as decimal(18,2))) + promote_precision(cast(cs_item_rev#29 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#42 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ss_dev#43, cs_item_rev#29, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#29 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#16 as decimal(18,2))) + promote_precision(cast(cs_item_rev#29 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#42 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS cs_dev#44, ws_item_rev#42, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#42 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#16 as decimal(18,2))) + promote_precision(cast(cs_item_rev#29 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#42 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ws_dev#45, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#16 as decimal(18,2))) + promote_precision(cast(cs_item_rev#29 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#42 as decimal(19,2)))), DecimalType(19,2))) / 3.00), DecimalType(23,6)) AS average#46]
Input [5]: [item_id#15, ss_item_rev#16, cs_item_rev#29, item_id#41, ws_item_rev#42]

(73) TakeOrderedAndProject
Input [8]: [item_id#15, ss_item_rev#16, ss_dev#43, cs_item_rev#29, cs_dev#44, ws_item_rev#42, ws_dev#45, average#46]
Arguments: 100, [item_id#15 ASC NULLS FIRST, ss_item_rev#16 ASC NULLS FIRST], [item_id#15, ss_item_rev#16, ss_dev#43, cs_item_rev#29, cs_dev#44, ws_item_rev#42, ws_dev#45, average#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 14 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
* Project (76)
+- * Filter (75)
   +- BatchScan spark_catalog.default.date_dim (74)


(74) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date#47, d_week_seq#48]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date IS NOT NULL, d_date = 10959], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(75) Filter [codegen id : 1]
Input [2]: [d_date#47, d_week_seq#48]
Condition : (isnotnull(d_date#47) AND (d_date#47 = 2000-01-03))

(76) Project [codegen id : 1]
Output [1]: [d_week_seq#48]
Input [2]: [d_date#47, d_week_seq#48]


