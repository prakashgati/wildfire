== Physical Plan ==
* HashAggregate (25)
+- Exchange (24)
   +- * HashAggregate (23)
      +- * Project (22)
         +- * SortMergeJoin FullOuter (21)
            :- * Sort (10)
            :  +- * HashAggregate (9)
            :     +- Exchange (8)
            :        +- * HashAggregate (7)
            :           +- * Project (6)
            :              +- * BroadcastHashJoin Inner BuildRight (5)
            :                 :- * Project (3)
            :                 :  +- * Filter (2)
            :                 :     +- BatchScan spark_catalog.default.store_sales (1)
            :                 +- ReusedExchange (4)
            +- * Sort (20)
               +- * HashAggregate (19)
                  +- Exchange (18)
                     +- * HashAggregate (17)
                        +- * Project (16)
                           +- * BroadcastHashJoin Inner BuildRight (15)
                              :- * Project (13)
                              :  +- * Filter (12)
                              :     +- BatchScan spark_catalog.default.catalog_sales (11)
                              +- ReusedExchange (14)


(1) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3]
Condition : isnotnull(ss_sold_date_sk#1)

(3) Project [codegen id : 2]
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3]

(4) ReusedExchange [Reuses operator id: 29]
Output [1]: [d_date_sk#4]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ss_item_sk#2, ss_customer_sk#3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, d_date_sk#4]

(7) HashAggregate [codegen id : 2]
Input [2]: [ss_item_sk#2, ss_customer_sk#3]
Keys [2]: [ss_customer_sk#3, ss_item_sk#2]
Functions: []
Aggregate Attributes: []
Results [2]: [ss_customer_sk#3, ss_item_sk#2]

(8) Exchange
Input [2]: [ss_customer_sk#3, ss_item_sk#2]
Arguments: hashpartitioning(ss_customer_sk#3, ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 3]
Input [2]: [ss_customer_sk#3, ss_item_sk#2]
Keys [2]: [ss_customer_sk#3, ss_item_sk#2]
Functions: []
Aggregate Attributes: []
Results [2]: [ss_customer_sk#3 AS customer_sk#5, ss_item_sk#2 AS item_sk#6]

(10) Sort [codegen id : 3]
Input [2]: [customer_sk#5, item_sk#6]
Arguments: [customer_sk#5 ASC NULLS FIRST, item_sk#6 ASC NULLS FIRST], false, 0

(11) BatchScan spark_catalog.default.catalog_sales
Output [3]: [cs_sold_date_sk#7, cs_bill_customer_sk#8, cs_item_sk#9]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(12) Filter [codegen id : 5]
Input [3]: [cs_sold_date_sk#7, cs_bill_customer_sk#8, cs_item_sk#9]
Condition : isnotnull(cs_sold_date_sk#7)

(13) Project [codegen id : 5]
Output [3]: [cs_sold_date_sk#7, cs_bill_customer_sk#8, cs_item_sk#9]
Input [3]: [cs_sold_date_sk#7, cs_bill_customer_sk#8, cs_item_sk#9]

(14) ReusedExchange [Reuses operator id: 29]
Output [1]: [d_date_sk#10]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(16) Project [codegen id : 5]
Output [2]: [cs_bill_customer_sk#8, cs_item_sk#9]
Input [4]: [cs_sold_date_sk#7, cs_bill_customer_sk#8, cs_item_sk#9, d_date_sk#10]

(17) HashAggregate [codegen id : 5]
Input [2]: [cs_bill_customer_sk#8, cs_item_sk#9]
Keys [2]: [cs_bill_customer_sk#8, cs_item_sk#9]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_bill_customer_sk#8, cs_item_sk#9]

(18) Exchange
Input [2]: [cs_bill_customer_sk#8, cs_item_sk#9]
Arguments: hashpartitioning(cs_bill_customer_sk#8, cs_item_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) HashAggregate [codegen id : 6]
Input [2]: [cs_bill_customer_sk#8, cs_item_sk#9]
Keys [2]: [cs_bill_customer_sk#8, cs_item_sk#9]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_bill_customer_sk#8 AS customer_sk#11, cs_item_sk#9 AS item_sk#12]

(20) Sort [codegen id : 6]
Input [2]: [customer_sk#11, item_sk#12]
Arguments: [customer_sk#11 ASC NULLS FIRST, item_sk#12 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 7]
Left keys [2]: [customer_sk#5, item_sk#6]
Right keys [2]: [customer_sk#11, item_sk#12]
Join condition: None

(22) Project [codegen id : 7]
Output [2]: [customer_sk#5, customer_sk#11]
Input [4]: [customer_sk#5, item_sk#6, customer_sk#11, item_sk#12]

(23) HashAggregate [codegen id : 7]
Input [2]: [customer_sk#5, customer_sk#11]
Keys: []
Functions [3]: [partial_sum(CASE WHEN (isnotnull(customer_sk#5) AND isnull(customer_sk#11)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END)]
Aggregate Attributes [3]: [sum#13, sum#14, sum#15]
Results [3]: [sum#16, sum#17, sum#18]

(24) Exchange
Input [3]: [sum#16, sum#17, sum#18]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3]

(25) HashAggregate [codegen id : 8]
Input [3]: [sum#16, sum#17, sum#18]
Keys: []
Functions [3]: [sum(CASE WHEN (isnotnull(customer_sk#5) AND isnull(customer_sk#11)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END)]
Aggregate Attributes [3]: [sum(CASE WHEN (isnotnull(customer_sk#5) AND isnull(customer_sk#11)) THEN 1 ELSE 0 END)#19, sum(CASE WHEN (isnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END)#20, sum(CASE WHEN (isnotnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END)#21]
Results [3]: [sum(CASE WHEN (isnotnull(customer_sk#5) AND isnull(customer_sk#11)) THEN 1 ELSE 0 END)#19 AS store_only#22, sum(CASE WHEN (isnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END)#20 AS catalog_only#23, sum(CASE WHEN (isnotnull(customer_sk#5) AND isnotnull(customer_sk#11)) THEN 1 ELSE 0 END)#21 AS store_and_catalog#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#25
BroadcastExchange (29)
+- * Project (28)
   +- * Filter (27)
      +- BatchScan spark_catalog.default.date_dim (26)


(26) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#26]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1200, d_month_seq <= 1211, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(27) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#26]
Condition : (((isnotnull(d_month_seq#26) AND (d_month_seq#26 >= 1200)) AND (d_month_seq#26 <= 1211)) AND isnotnull(d_date_sk#4))

(28) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#26]

(29) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#7 IN dynamicpruning#25


