== Physical Plan ==
TakeOrderedAndProject (19)
+- * HashAggregate (18)
   +- Exchange (17)
      +- * HashAggregate (16)
         +- * Project (15)
            +- * BroadcastHashJoin Inner BuildRight (14)
               :- * Project (9)
               :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :- * Project (3)
               :     :  +- * Filter (2)
               :     :     +- BatchScan spark_catalog.default.date_dim (1)
               :     +- BroadcastExchange (7)
               :        +- * Project (6)
               :           +- * Filter (5)
               :              +- BatchScan spark_catalog.default.store_sales (4)
               +- BroadcastExchange (13)
                  +- * Project (12)
                     +- * Filter (11)
                        +- BatchScan spark_catalog.default.store (10)


(1) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_day_name#3]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2000, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [3]: [d_date_sk#1, d_year#2, d_day_name#3]
Condition : ((isnotnull(d_year#2) AND (d_year#2 = 2000)) AND isnotnull(d_date_sk#1))

(3) Project [codegen id : 3]
Output [2]: [d_date_sk#1, d_day_name#3]
Input [3]: [d_date_sk#1, d_year#2, d_day_name#3]

(4) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#4, ss_store_sk#5, ss_sales_price#6]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [3]: [ss_sold_date_sk#4, ss_store_sk#5, ss_sales_price#6]
Condition : (isnotnull(ss_sold_date_sk#4) AND isnotnull(ss_store_sk#5))

(6) Project [codegen id : 1]
Output [3]: [ss_sold_date_sk#4, ss_store_sk#5, ss_sales_price#6]
Input [3]: [ss_sold_date_sk#4, ss_store_sk#5, ss_sales_price#6]

(7) BroadcastExchange
Input [3]: [ss_sold_date_sk#4, ss_store_sk#5, ss_sales_price#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#4]
Join condition: None

(9) Project [codegen id : 3]
Output [3]: [d_day_name#3, ss_store_sk#5, ss_sales_price#6]
Input [5]: [d_date_sk#1, d_day_name#3, ss_sold_date_sk#4, ss_store_sk#5, ss_sales_price#6]

(10) BatchScan spark_catalog.default.store
Output [4]: [s_store_sk#7, s_store_id#8, s_store_name#9, s_gmt_offset#10]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_gmt_offset IS NOT NULL, s_gmt_offset = -5.00, s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [4]: [s_store_sk#7, s_store_id#8, s_store_name#9, s_gmt_offset#10]
Condition : ((isnotnull(s_gmt_offset#10) AND (s_gmt_offset#10 = -5.00)) AND isnotnull(s_store_sk#7))

(12) Project [codegen id : 2]
Output [3]: [s_store_sk#7, s_store_id#8, s_store_name#9]
Input [4]: [s_store_sk#7, s_store_id#8, s_store_name#9, s_gmt_offset#10]

(13) BroadcastExchange
Input [3]: [s_store_sk#7, s_store_id#8, s_store_name#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#7]
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [d_day_name#3, ss_sales_price#6, s_store_id#8, s_store_name#9]
Input [6]: [d_day_name#3, ss_store_sk#5, ss_sales_price#6, s_store_sk#7, s_store_id#8, s_store_name#9]

(16) HashAggregate [codegen id : 3]
Input [4]: [d_day_name#3, ss_sales_price#6, s_store_id#8, s_store_name#9]
Keys [2]: [s_store_name#9, s_store_id#8]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Sunday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Monday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Tuesday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Wednesday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Thursday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Friday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#3 = Saturday) THEN ss_sales_price#6 END))]
Aggregate Attributes [7]: [sum#11, sum#12, sum#13, sum#14, sum#15, sum#16, sum#17]
Results [9]: [s_store_name#9, s_store_id#8, sum#18, sum#19, sum#20, sum#21, sum#22, sum#23, sum#24]

(17) Exchange
Input [9]: [s_store_name#9, s_store_id#8, sum#18, sum#19, sum#20, sum#21, sum#22, sum#23, sum#24]
Arguments: hashpartitioning(s_store_name#9, s_store_id#8, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) HashAggregate [codegen id : 4]
Input [9]: [s_store_name#9, s_store_id#8, sum#18, sum#19, sum#20, sum#21, sum#22, sum#23, sum#24]
Keys [2]: [s_store_name#9, s_store_id#8]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#3 = Sunday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#3 = Monday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#3 = Tuesday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#3 = Wednesday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#3 = Thursday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#3 = Friday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#3 = Saturday) THEN ss_sales_price#6 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#3 = Sunday) THEN ss_sales_price#6 END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#3 = Monday) THEN ss_sales_price#6 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#3 = Tuesday) THEN ss_sales_price#6 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#3 = Wednesday) THEN ss_sales_price#6 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#3 = Thursday) THEN ss_sales_price#6 END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#3 = Friday) THEN ss_sales_price#6 END))#30, sum(UnscaledValue(CASE WHEN (d_day_name#3 = Saturday) THEN ss_sales_price#6 END))#31]
Results [9]: [s_store_name#9, s_store_id#8, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Sunday) THEN ss_sales_price#6 END))#25,17,2) AS sun_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Monday) THEN ss_sales_price#6 END))#26,17,2) AS mon_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Tuesday) THEN ss_sales_price#6 END))#27,17,2) AS tue_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Wednesday) THEN ss_sales_price#6 END))#28,17,2) AS wed_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Thursday) THEN ss_sales_price#6 END))#29,17,2) AS thu_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Friday) THEN ss_sales_price#6 END))#30,17,2) AS fri_sales#37, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#3 = Saturday) THEN ss_sales_price#6 END))#31,17,2) AS sat_sales#38]

(19) TakeOrderedAndProject
Input [9]: [s_store_name#9, s_store_id#8, sun_sales#32, mon_sales#33, tue_sales#34, wed_sales#35, thu_sales#36, fri_sales#37, sat_sales#38]
Arguments: 100, [s_store_name#9 ASC NULLS FIRST, s_store_id#8 ASC NULLS FIRST, sun_sales#32 ASC NULLS FIRST, mon_sales#33 ASC NULLS FIRST, tue_sales#34 ASC NULLS FIRST, wed_sales#35 ASC NULLS FIRST, thu_sales#36 ASC NULLS FIRST, fri_sales#37 ASC NULLS FIRST, sat_sales#38 ASC NULLS FIRST], [s_store_name#9, s_store_id#8, sun_sales#32, mon_sales#33, tue_sales#34, wed_sales#35, thu_sales#36, fri_sales#37, sat_sales#38]

