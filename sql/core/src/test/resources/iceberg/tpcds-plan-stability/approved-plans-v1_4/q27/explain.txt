== Physical Plan ==
TakeOrderedAndProject (29)
+- * HashAggregate (28)
   +- Exchange (27)
      +- * HashAggregate (26)
         +- * Expand (25)
            +- * Project (24)
               +- * BroadcastHashJoin Inner BuildRight (23)
                  :- * Project (18)
                  :  +- * BroadcastHashJoin Inner BuildRight (17)
                  :     :- * Project (12)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (11)
                  :     :     :- * Project (9)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :- * Project (3)
                  :     :     :     :  +- * Filter (2)
                  :     :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
                  :     :     :     +- BroadcastExchange (7)
                  :     :     :        +- * Project (6)
                  :     :     :           +- * Filter (5)
                  :     :     :              +- BatchScan spark_catalog.default.customer_demographics (4)
                  :     :     +- ReusedExchange (10)
                  :     +- BroadcastExchange (16)
                  :        +- * Project (15)
                  :           +- * Filter (14)
                  :              +- BatchScan spark_catalog.default.store (13)
                  +- BroadcastExchange (22)
                     +- * Project (21)
                        +- * Filter (20)
                           +- BatchScan spark_catalog.default.item (19)


(1) BatchScan spark_catalog.default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_cdemo_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(3) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(4) BatchScan spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
spark_catalog.default.customer_demographics [scan class = SparkBatchQueryScan] [filters=cd_gender IS NOT NULL, cd_marital_status IS NOT NULL, cd_education_status IS NOT NULL, cd_gender = 'M', cd_marital_status = 'S', cd_education_status = 'College', cd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Condition : ((((((isnotnull(cd_gender#10) AND isnotnull(cd_marital_status#11)) AND isnotnull(cd_education_status#12)) AND (cd_gender#10 = M)) AND (cd_marital_status#11 = S)) AND (cd_education_status#12 = College)) AND isnotnull(cd_demo_sk#9))

(6) Project [codegen id : 1]
Output [1]: [cd_demo_sk#9]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]

(7) BroadcastExchange
Input [1]: [cd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#9]
Join condition: None

(9) Project [codegen id : 5]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#9]

(10) ReusedExchange [Reuses operator id: 33]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#13]
Join condition: None

(12) Project [codegen id : 5]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#13]

(13) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_state IS NOT NULL, s_state = 'TN', s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [2]: [s_store_sk#14, s_state#15]
Condition : ((isnotnull(s_state#15) AND (s_state#15 = TN)) AND isnotnull(s_store_sk#14))

(15) Project [codegen id : 3]
Output [2]: [s_store_sk#14, s_state#15]
Input [2]: [s_store_sk#14, s_state#15]

(16) BroadcastExchange
Input [2]: [s_store_sk#14, s_state#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#14]
Join condition: None

(18) Project [codegen id : 5]
Output [6]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#15]
Input [8]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#14, s_state#15]

(19) BatchScan spark_catalog.default.item
Output [2]: [i_item_sk#16, i_item_id#17]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 4]
Input [2]: [i_item_sk#16, i_item_id#17]
Condition : isnotnull(i_item_sk#16)

(21) Project [codegen id : 4]
Output [2]: [i_item_sk#16, i_item_id#17]
Input [2]: [i_item_sk#16, i_item_id#17]

(22) BroadcastExchange
Input [2]: [i_item_sk#16, i_item_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#16]
Join condition: None

(24) Project [codegen id : 5]
Output [6]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#17, s_state#15]
Input [8]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#15, i_item_sk#16, i_item_id#17]

(25) Expand [codegen id : 5]
Input [6]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#17, s_state#15]
Arguments: [[ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#17, s_state#15, 0], [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#17, null, 1], [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, null, null, 3]], [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#18, s_state#19, spark_grouping_id#20]

(26) HashAggregate [codegen id : 5]
Input [7]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#18, s_state#19, spark_grouping_id#20]
Keys [3]: [i_item_id#18, s_state#19, spark_grouping_id#20]
Functions [4]: [partial_avg(ss_quantity#5), partial_avg(UnscaledValue(ss_list_price#6)), partial_avg(UnscaledValue(ss_coupon_amt#8)), partial_avg(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [8]: [sum#21, count#22, sum#23, count#24, sum#25, count#26, sum#27, count#28]
Results [11]: [i_item_id#18, s_state#19, spark_grouping_id#20, sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35, count#36]

(27) Exchange
Input [11]: [i_item_id#18, s_state#19, spark_grouping_id#20, sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35, count#36]
Arguments: hashpartitioning(i_item_id#18, s_state#19, spark_grouping_id#20, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) HashAggregate [codegen id : 6]
Input [11]: [i_item_id#18, s_state#19, spark_grouping_id#20, sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35, count#36]
Keys [3]: [i_item_id#18, s_state#19, spark_grouping_id#20]
Functions [4]: [avg(ss_quantity#5), avg(UnscaledValue(ss_list_price#6)), avg(UnscaledValue(ss_coupon_amt#8)), avg(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [4]: [avg(ss_quantity#5)#37, avg(UnscaledValue(ss_list_price#6))#38, avg(UnscaledValue(ss_coupon_amt#8))#39, avg(UnscaledValue(ss_sales_price#7))#40]
Results [7]: [i_item_id#18, s_state#19, cast((shiftright(spark_grouping_id#20, 0) & 1) as tinyint) AS g_state#41, avg(ss_quantity#5)#37 AS agg1#42, cast((avg(UnscaledValue(ss_list_price#6))#38 / 100.0) as decimal(11,6)) AS agg2#43, cast((avg(UnscaledValue(ss_coupon_amt#8))#39 / 100.0) as decimal(11,6)) AS agg3#44, cast((avg(UnscaledValue(ss_sales_price#7))#40 / 100.0) as decimal(11,6)) AS agg4#45]

(29) TakeOrderedAndProject
Input [7]: [i_item_id#18, s_state#19, g_state#41, agg1#42, agg2#43, agg3#44, agg4#45]
Arguments: 100, [i_item_id#18 ASC NULLS FIRST, s_state#19 ASC NULLS FIRST], [i_item_id#18, s_state#19, g_state#41, agg1#42, agg2#43, agg3#44, agg4#45]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#46
BroadcastExchange (33)
+- * Project (32)
   +- * Filter (31)
      +- BatchScan spark_catalog.default.date_dim (30)


(30) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#47]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2002, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(31) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#47]
Condition : ((isnotnull(d_year#47) AND (d_year#47 = 2002)) AND isnotnull(d_date_sk#13))

(32) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#47]

(33) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


