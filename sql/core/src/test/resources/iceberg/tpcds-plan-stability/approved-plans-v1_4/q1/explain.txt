== Physical Plan ==
TakeOrderedAndProject (39)
+- * Project (38)
   +- * BroadcastHashJoin Inner BuildRight (37)
      :- * Project (32)
      :  +- * BroadcastHashJoin Inner BuildRight (31)
      :     :- * Project (26)
      :     :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :     :- * Filter (10)
      :     :     :  +- * HashAggregate (9)
      :     :     :     +- Exchange (8)
      :     :     :        +- * HashAggregate (7)
      :     :     :           +- * Project (6)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                 :- * Project (3)
      :     :     :                 :  +- * Filter (2)
      :     :     :                 :     +- BatchScan spark_catalog.default.store_returns (1)
      :     :     :                 +- ReusedExchange (4)
      :     :     +- BroadcastExchange (24)
      :     :        +- * Filter (23)
      :     :           +- * HashAggregate (22)
      :     :              +- Exchange (21)
      :     :                 +- * HashAggregate (20)
      :     :                    +- * HashAggregate (19)
      :     :                       +- Exchange (18)
      :     :                          +- * HashAggregate (17)
      :     :                             +- * Project (16)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                                   :- * Project (13)
      :     :                                   :  +- * Filter (12)
      :     :                                   :     +- BatchScan spark_catalog.default.store_returns (11)
      :     :                                   +- ReusedExchange (14)
      :     +- BroadcastExchange (30)
      :        +- * Project (29)
      :           +- * Filter (28)
      :              +- BatchScan spark_catalog.default.store (27)
      +- BroadcastExchange (36)
         +- * Project (35)
            +- * Filter (34)
               +- BatchScan spark_catalog.default.customer (33)


(1) BatchScan spark_catalog.default.store_returns
Output [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_returned_date_sk IS NOT NULL, sr_store_sk IS NOT NULL, sr_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 2]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Condition : ((isnotnull(sr_returned_date_sk#1) AND isnotnull(sr_store_sk#3)) AND isnotnull(sr_customer_sk#2))

(3) Project [codegen id : 2]
Output [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]

(4) ReusedExchange [Reuses operator id: 43]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Input [5]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4, d_date_sk#5]

(7) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum#6]
Results [3]: [sr_customer_sk#2, sr_store_sk#3, sum#7]

(8) Exchange
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#7]
Arguments: hashpartitioning(sr_customer_sk#2, sr_store_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 9]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#7]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#4))#8]
Results [3]: [sr_customer_sk#2 AS ctr_customer_sk#9, sr_store_sk#3 AS ctr_store_sk#10, MakeDecimal(sum(UnscaledValue(sr_return_amt#4))#8,17,2) AS ctr_total_return#11]

(10) Filter [codegen id : 9]
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11]
Condition : isnotnull(ctr_total_return#11)

(11) BatchScan spark_catalog.default.store_returns
Output [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_returned_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(12) Filter [codegen id : 4]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Condition : (isnotnull(sr_returned_date_sk#1) AND isnotnull(sr_store_sk#3))

(13) Project [codegen id : 4]
Output [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]

(14) ReusedExchange [Reuses operator id: 43]
Output [1]: [d_date_sk#5]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Input [5]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4, d_date_sk#5]

(17) HashAggregate [codegen id : 4]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum#12]
Results [3]: [sr_customer_sk#2, sr_store_sk#3, sum#13]

(18) Exchange
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#13]
Arguments: hashpartitioning(sr_customer_sk#2, sr_store_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#13]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#4))#8]
Results [2]: [sr_store_sk#3 AS ctr_store_sk#10, MakeDecimal(sum(UnscaledValue(sr_return_amt#4))#8,17,2) AS ctr_total_return#11]

(20) HashAggregate [codegen id : 5]
Input [2]: [ctr_store_sk#10, ctr_total_return#11]
Keys [1]: [ctr_store_sk#10]
Functions [1]: [partial_avg(ctr_total_return#11)]
Aggregate Attributes [2]: [sum#14, count#15]
Results [3]: [ctr_store_sk#10, sum#16, count#17]

(21) Exchange
Input [3]: [ctr_store_sk#10, sum#16, count#17]
Arguments: hashpartitioning(ctr_store_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 6]
Input [3]: [ctr_store_sk#10, sum#16, count#17]
Keys [1]: [ctr_store_sk#10]
Functions [1]: [avg(ctr_total_return#11)]
Aggregate Attributes [1]: [avg(ctr_total_return#11)#18]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#11)#18) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#19, ctr_store_sk#10 AS ctr_store_sk#10#20]

(23) Filter [codegen id : 6]
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_store_sk#10#20]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#19)

(24) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_store_sk#10#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=4]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_store_sk#10]
Right keys [1]: [ctr_store_sk#10#20]
Join condition: (cast(ctr_total_return#11 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#19)

(26) Project [codegen id : 9]
Output [2]: [ctr_customer_sk#9, ctr_store_sk#10]
Input [5]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11, (avg(ctr_total_return) * 1.2)#19, ctr_store_sk#10#20]

(27) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#21, s_state#22]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_state IS NOT NULL, s_state = 'TN', s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(28) Filter [codegen id : 7]
Input [2]: [s_store_sk#21, s_state#22]
Condition : ((isnotnull(s_state#22) AND (s_state#22 = TN)) AND isnotnull(s_store_sk#21))

(29) Project [codegen id : 7]
Output [1]: [s_store_sk#21]
Input [2]: [s_store_sk#21, s_state#22]

(30) BroadcastExchange
Input [1]: [s_store_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_store_sk#10]
Right keys [1]: [s_store_sk#21]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [ctr_customer_sk#9]
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, s_store_sk#21]

(33) BatchScan spark_catalog.default.customer
Output [2]: [c_customer_sk#23, c_customer_id#24]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(34) Filter [codegen id : 8]
Input [2]: [c_customer_sk#23, c_customer_id#24]
Condition : isnotnull(c_customer_sk#23)

(35) Project [codegen id : 8]
Output [2]: [c_customer_sk#23, c_customer_id#24]
Input [2]: [c_customer_sk#23, c_customer_id#24]

(36) BroadcastExchange
Input [2]: [c_customer_sk#23, c_customer_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_customer_sk#9]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(38) Project [codegen id : 9]
Output [1]: [c_customer_id#24]
Input [3]: [ctr_customer_sk#9, c_customer_sk#23, c_customer_id#24]

(39) TakeOrderedAndProject
Input [1]: [c_customer_id#24]
Arguments: 100, [c_customer_id#24 ASC NULLS FIRST], [c_customer_id#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#1 IN dynamicpruning#25
BroadcastExchange (43)
+- * Project (42)
   +- * Filter (41)
      +- BatchScan spark_catalog.default.date_dim (40)


(40) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_year#26]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2000, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(41) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#26]
Condition : ((isnotnull(d_year#26) AND (d_year#26 = 2000)) AND isnotnull(d_date_sk#5))

(42) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_year#26]

(43) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 11 Hosting Expression = sr_returned_date_sk#1 IN dynamicpruning#25


