== Physical Plan ==
TakeOrderedAndProject (22)
+- * HashAggregate (21)
   +- Exchange (20)
      +- * HashAggregate (19)
         +- * Project (18)
            +- * BroadcastHashJoin Inner BuildRight (17)
               :- * Project (15)
               :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :- * Project (9)
               :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :- * Project (3)
               :     :     :  +- * Filter (2)
               :     :     :     +- BatchScan spark_catalog.default.catalog_sales (1)
               :     :     +- BroadcastExchange (7)
               :     :        +- * Project (6)
               :     :           +- * Filter (5)
               :     :              +- BatchScan spark_catalog.default.customer (4)
               :     +- BroadcastExchange (13)
               :        +- * Project (12)
               :           +- * Filter (11)
               :              +- BatchScan spark_catalog.default.customer_address (10)
               +- ReusedExchange (16)


(1) BatchScan spark_catalog.default.catalog_sales
Output [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_bill_customer_sk IS NOT NULL, cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(3) Project [codegen id : 4]
Output [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]

(4) BatchScan spark_catalog.default.customer
Output [2]: [c_customer_sk#4, c_current_addr_sk#5]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_customer_sk#4) AND isnotnull(c_current_addr_sk#5))

(6) Project [codegen id : 1]
Output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]

(7) BroadcastExchange
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#4]
Join condition: None

(9) Project [codegen id : 4]
Output [3]: [cs_sold_date_sk#1, cs_sales_price#3, c_current_addr_sk#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3, c_customer_sk#4, c_current_addr_sk#5]

(10) BatchScan spark_catalog.default.customer_address
Output [3]: [ca_address_sk#6, ca_state#7, ca_zip#8]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [3]: [ca_address_sk#6, ca_state#7, ca_zip#8]
Condition : isnotnull(ca_address_sk#6)

(12) Project [codegen id : 2]
Output [3]: [ca_address_sk#6, ca_state#7, ca_zip#8]
Input [3]: [ca_address_sk#6, ca_state#7, ca_zip#8]

(13) BroadcastExchange
Input [3]: [ca_address_sk#6, ca_state#7, ca_zip#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#6]
Join condition: ((substr(ca_zip#8, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#7 IN (CA,WA,GA)) OR (cs_sales_price#3 > 500.00))

(15) Project [codegen id : 4]
Output [3]: [cs_sold_date_sk#1, cs_sales_price#3, ca_zip#8]
Input [6]: [cs_sold_date_sk#1, cs_sales_price#3, c_current_addr_sk#5, ca_address_sk#6, ca_state#7, ca_zip#8]

(16) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#9]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(18) Project [codegen id : 4]
Output [2]: [cs_sales_price#3, ca_zip#8]
Input [4]: [cs_sold_date_sk#1, cs_sales_price#3, ca_zip#8, d_date_sk#9]

(19) HashAggregate [codegen id : 4]
Input [2]: [cs_sales_price#3, ca_zip#8]
Keys [1]: [ca_zip#8]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#3))]
Aggregate Attributes [1]: [sum#10]
Results [2]: [ca_zip#8, sum#11]

(20) Exchange
Input [2]: [ca_zip#8, sum#11]
Arguments: hashpartitioning(ca_zip#8, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 5]
Input [2]: [ca_zip#8, sum#11]
Keys [1]: [ca_zip#8]
Functions [1]: [sum(UnscaledValue(cs_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#3))#12]
Results [2]: [ca_zip#8, MakeDecimal(sum(UnscaledValue(cs_sales_price#3))#12,17,2) AS sum(cs_sales_price)#13]

(22) TakeOrderedAndProject
Input [2]: [ca_zip#8, sum(cs_sales_price)#13]
Arguments: 100, [ca_zip#8 ASC NULLS FIRST], [ca_zip#8, sum(cs_sales_price)#13]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#1 IN dynamicpruning#14
BroadcastExchange (26)
+- * Project (25)
   +- * Filter (24)
      +- BatchScan spark_catalog.default.date_dim (23)


(23) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#15, d_qoy#16]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_qoy IS NOT NULL, d_year IS NOT NULL, d_qoy = 2, d_year = 2001, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#15, d_qoy#16]
Condition : ((((isnotnull(d_qoy#16) AND isnotnull(d_year#15)) AND (d_qoy#16 = 2)) AND (d_year#15 = 2001)) AND isnotnull(d_date_sk#9))

(25) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#15, d_qoy#16]

(26) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]


