== Physical Plan ==
TakeOrderedAndProject (27)
+- * Project (26)
   +- Window (25)
      +- * Sort (24)
         +- Exchange (23)
            +- * HashAggregate (22)
               +- Exchange (21)
                  +- * HashAggregate (20)
                     +- * Expand (19)
                        +- * Project (18)
                           +- * BroadcastHashJoin Inner BuildRight (17)
                              :- * Project (12)
                              :  +- * BroadcastHashJoin Inner BuildRight (11)
                              :     :- * Project (6)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :     :- * Project (3)
                              :     :     :  +- * Filter (2)
                              :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
                              :     :     +- ReusedExchange (4)
                              :     +- BroadcastExchange (10)
                              :        +- * Project (9)
                              :           +- * Filter (8)
                              :              +- BatchScan spark_catalog.default.item (7)
                              +- BroadcastExchange (16)
                                 +- * Project (15)
                                    +- * Filter (14)
                                       +- BatchScan spark_catalog.default.store (13)


(1) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_item_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#3))

(3) Project [codegen id : 4]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]

(4) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, d_date_sk#6]

(7) BatchScan spark_catalog.default.item
Output [3]: [i_item_sk#7, i_class#8, i_category#9]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [3]: [i_item_sk#7, i_class#8, i_category#9]
Condition : isnotnull(i_item_sk#7)

(9) Project [codegen id : 2]
Output [3]: [i_item_sk#7, i_class#8, i_category#9]
Input [3]: [i_item_sk#7, i_class#8, i_category#9]

(10) BroadcastExchange
Input [3]: [i_item_sk#7, i_class#8, i_category#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#7]
Join condition: None

(12) Project [codegen id : 4]
Output [5]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#8, i_category#9]
Input [7]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_item_sk#7, i_class#8, i_category#9]

(13) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#10, s_state#11]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_state IS NOT NULL, s_state = 'TN', s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [2]: [s_store_sk#10, s_state#11]
Condition : ((isnotnull(s_state#11) AND (s_state#11 = TN)) AND isnotnull(s_store_sk#10))

(15) Project [codegen id : 3]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_state#11]

(16) BroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#10]
Join condition: None

(18) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#9, i_class#8]
Input [6]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#8, i_category#9, s_store_sk#10]

(19) Expand [codegen id : 4]
Input [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#9, i_class#8]
Arguments: [[ss_ext_sales_price#4, ss_net_profit#5, i_category#9, i_class#8, 0], [ss_ext_sales_price#4, ss_net_profit#5, i_category#9, null, 1], [ss_ext_sales_price#4, ss_net_profit#5, null, null, 3]], [ss_ext_sales_price#4, ss_net_profit#5, i_category#12, i_class#13, spark_grouping_id#14]

(20) HashAggregate [codegen id : 4]
Input [5]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#12, i_class#13, spark_grouping_id#14]
Keys [3]: [i_category#12, i_class#13, spark_grouping_id#14]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum#15, sum#16]
Results [5]: [i_category#12, i_class#13, spark_grouping_id#14, sum#17, sum#18]

(21) Exchange
Input [5]: [i_category#12, i_class#13, spark_grouping_id#14, sum#17, sum#18]
Arguments: hashpartitioning(i_category#12, i_class#13, spark_grouping_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 5]
Input [5]: [i_category#12, i_class#13, spark_grouping_id#14, sum#17, sum#18]
Keys [3]: [i_category#12, i_class#13, spark_grouping_id#14]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#19, sum(UnscaledValue(ss_ext_sales_price#4))#20]
Results [7]: [CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#19,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#20,17,2))), DecimalType(37,20)) AS gross_margin#21, i_category#12, i_class#13, (cast((shiftright(spark_grouping_id#14, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#14, 0) & 1) as tinyint)) AS lochierarchy#22, (cast((shiftright(spark_grouping_id#14, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#14, 0) & 1) as tinyint)) AS _w1#23, CASE WHEN (cast((shiftright(spark_grouping_id#14, 0) & 1) as tinyint) = 0) THEN i_category#12 END AS _w2#24, CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#19,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#20,17,2))), DecimalType(37,20)) AS _w3#25]

(23) Exchange
Input [7]: [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, _w1#23, _w2#24, _w3#25]
Arguments: hashpartitioning(_w1#23, _w2#24, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 6]
Input [7]: [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, _w1#23, _w2#24, _w3#25]
Arguments: [_w1#23 ASC NULLS FIRST, _w2#24 ASC NULLS FIRST, _w3#25 ASC NULLS FIRST], false, 0

(25) Window
Input [7]: [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, _w1#23, _w2#24, _w3#25]
Arguments: [rank(_w3#25) windowspecdefinition(_w1#23, _w2#24, _w3#25 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#26], [_w1#23, _w2#24], [_w3#25 ASC NULLS FIRST]

(26) Project [codegen id : 7]
Output [5]: [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, rank_within_parent#26]
Input [8]: [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, _w1#23, _w2#24, _w3#25, rank_within_parent#26]

(27) TakeOrderedAndProject
Input [5]: [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, rank_within_parent#26]
Arguments: 100, [lochierarchy#22 DESC NULLS LAST, CASE WHEN (lochierarchy#22 = 0) THEN i_category#12 END ASC NULLS FIRST, rank_within_parent#26 ASC NULLS FIRST], [gross_margin#21, i_category#12, i_class#13, lochierarchy#22, rank_within_parent#26]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#27
BroadcastExchange (31)
+- * Project (30)
   +- * Filter (29)
      +- BatchScan spark_catalog.default.date_dim (28)


(28) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#28]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2001, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#28]
Condition : ((isnotnull(d_year#28) AND (d_year#28 = 2001)) AND isnotnull(d_date_sk#6))

(30) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#28]

(31) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


