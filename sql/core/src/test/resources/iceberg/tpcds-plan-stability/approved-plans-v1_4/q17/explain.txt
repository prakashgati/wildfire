== Physical Plan ==
TakeOrderedAndProject (40)
+- * HashAggregate (39)
   +- Exchange (38)
      +- * HashAggregate (37)
         +- * Project (36)
            +- * BroadcastHashJoin Inner BuildRight (35)
               :- * Project (30)
               :  +- * BroadcastHashJoin Inner BuildRight (29)
               :     :- * Project (24)
               :     :  +- * BroadcastHashJoin Inner BuildRight (23)
               :     :     :- * Project (21)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
               :     :     :     :- * Project (18)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
               :     :     :     :     :- * Project (15)
               :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :     :     :     :- * Project (9)
               :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :     :     :     :     :- * Project (3)
               :     :     :     :     :     :     :  +- * Filter (2)
               :     :     :     :     :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
               :     :     :     :     :     :     +- BroadcastExchange (7)
               :     :     :     :     :     :        +- * Project (6)
               :     :     :     :     :     :           +- * Filter (5)
               :     :     :     :     :     :              +- BatchScan spark_catalog.default.store_returns (4)
               :     :     :     :     :     +- BroadcastExchange (13)
               :     :     :     :     :        +- * Project (12)
               :     :     :     :     :           +- * Filter (11)
               :     :     :     :     :              +- BatchScan spark_catalog.default.catalog_sales (10)
               :     :     :     :     +- ReusedExchange (16)
               :     :     :     +- ReusedExchange (19)
               :     :     +- ReusedExchange (22)
               :     +- BroadcastExchange (28)
               :        +- * Project (27)
               :           +- * Filter (26)
               :              +- BatchScan spark_catalog.default.store (25)
               +- BroadcastExchange (34)
                  +- * Project (33)
                     +- * Filter (32)
                        +- BatchScan spark_catalog.default.item (31)


(1) BatchScan spark_catalog.default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_customer_sk IS NOT NULL, ss_item_sk IS NOT NULL, ss_ticket_number IS NOT NULL, ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Condition : ((((isnotnull(ss_customer_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_ticket_number#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4))

(3) Project [codegen id : 8]
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]

(4) BatchScan spark_catalog.default.store_returns
Output [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_customer_sk IS NOT NULL, sr_item_sk IS NOT NULL, sr_ticket_number IS NOT NULL, sr_returned_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
Condition : (((isnotnull(sr_customer_sk#9) AND isnotnull(sr_item_sk#8)) AND isnotnull(sr_ticket_number#10)) AND isnotnull(sr_returned_date_sk#7))

(6) Project [codegen id : 1]
Output [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
Input [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]

(7) BroadcastExchange
Input [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
Arguments: HashedRelationBroadcastMode(List(input[2, int, true], input[1, int, true], input[3, int, true]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 8]
Left keys [3]: [ss_customer_sk#3, ss_item_sk#2, ss_ticket_number#5]
Right keys [3]: [sr_customer_sk#9, sr_item_sk#8, sr_ticket_number#10]
Join condition: None

(9) Project [codegen id : 8]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_return_quantity#11]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]

(10) BatchScan spark_catalog.default.catalog_sales
Output [4]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14, cs_quantity#15]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_bill_customer_sk IS NOT NULL, cs_item_sk IS NOT NULL, cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [4]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14, cs_quantity#15]
Condition : ((isnotnull(cs_bill_customer_sk#13) AND isnotnull(cs_item_sk#14)) AND isnotnull(cs_sold_date_sk#12))

(12) Project [codegen id : 2]
Output [4]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14, cs_quantity#15]
Input [4]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14, cs_quantity#15]

(13) BroadcastExchange
Input [4]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14, cs_quantity#15]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[2, int, true] as bigint) & 4294967295))),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [sr_customer_sk#9, sr_item_sk#8]
Right keys [2]: [cs_bill_customer_sk#13, cs_item_sk#14]
Join condition: None

(15) Project [codegen id : 8]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#12, cs_quantity#15]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_return_quantity#11, cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14, cs_quantity#15]

(16) ReusedExchange [Reuses operator id: 44]
Output [1]: [d_date_sk#16]

(17) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#16]
Join condition: None

(18) Project [codegen id : 8]
Output [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#12, cs_quantity#15]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#12, cs_quantity#15, d_date_sk#16]

(19) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#17]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [sr_returned_date_sk#7]
Right keys [1]: [d_date_sk#17]
Join condition: None

(21) Project [codegen id : 8]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_sold_date_sk#12, cs_quantity#15]
Input [8]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#12, cs_quantity#15, d_date_sk#17]

(22) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#18]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#12]
Right keys [1]: [d_date_sk#18]
Join condition: None

(24) Project [codegen id : 8]
Output [5]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_quantity#15]
Input [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_sold_date_sk#12, cs_quantity#15, d_date_sk#18]

(25) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(26) Filter [codegen id : 6]
Input [2]: [s_store_sk#19, s_state#20]
Condition : isnotnull(s_store_sk#19)

(27) Project [codegen id : 6]
Output [2]: [s_store_sk#19, s_state#20]
Input [2]: [s_store_sk#19, s_state#20]

(28) BroadcastExchange
Input [2]: [s_store_sk#19, s_state#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#19]
Join condition: None

(30) Project [codegen id : 8]
Output [5]: [ss_item_sk#2, ss_quantity#6, sr_return_quantity#11, cs_quantity#15, s_state#20]
Input [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_quantity#15, s_store_sk#19, s_state#20]

(31) BatchScan spark_catalog.default.item
Output [3]: [i_item_sk#21, i_item_id#22, i_item_desc#23]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(32) Filter [codegen id : 7]
Input [3]: [i_item_sk#21, i_item_id#22, i_item_desc#23]
Condition : isnotnull(i_item_sk#21)

(33) Project [codegen id : 7]
Output [3]: [i_item_sk#21, i_item_id#22, i_item_desc#23]
Input [3]: [i_item_sk#21, i_item_id#22, i_item_desc#23]

(34) BroadcastExchange
Input [3]: [i_item_sk#21, i_item_id#22, i_item_desc#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#21]
Join condition: None

(36) Project [codegen id : 8]
Output [6]: [ss_quantity#6, sr_return_quantity#11, cs_quantity#15, s_state#20, i_item_id#22, i_item_desc#23]
Input [8]: [ss_item_sk#2, ss_quantity#6, sr_return_quantity#11, cs_quantity#15, s_state#20, i_item_sk#21, i_item_id#22, i_item_desc#23]

(37) HashAggregate [codegen id : 8]
Input [6]: [ss_quantity#6, sr_return_quantity#11, cs_quantity#15, s_state#20, i_item_id#22, i_item_desc#23]
Keys [3]: [i_item_id#22, i_item_desc#23, s_state#20]
Functions [9]: [partial_count(ss_quantity#6), partial_avg(ss_quantity#6), partial_stddev_samp(cast(ss_quantity#6 as double)), partial_count(sr_return_quantity#11), partial_avg(sr_return_quantity#11), partial_stddev_samp(cast(sr_return_quantity#11 as double)), partial_count(cs_quantity#15), partial_avg(cs_quantity#15), partial_stddev_samp(cast(cs_quantity#15 as double))]
Aggregate Attributes [18]: [count#24, sum#25, count#26, n#27, avg#28, m2#29, count#30, sum#31, count#32, n#33, avg#34, m2#35, count#36, sum#37, count#38, n#39, avg#40, m2#41]
Results [21]: [i_item_id#22, i_item_desc#23, s_state#20, count#42, sum#43, count#44, n#45, avg#46, m2#47, count#48, sum#49, count#50, n#51, avg#52, m2#53, count#54, sum#55, count#56, n#57, avg#58, m2#59]

(38) Exchange
Input [21]: [i_item_id#22, i_item_desc#23, s_state#20, count#42, sum#43, count#44, n#45, avg#46, m2#47, count#48, sum#49, count#50, n#51, avg#52, m2#53, count#54, sum#55, count#56, n#57, avg#58, m2#59]
Arguments: hashpartitioning(i_item_id#22, i_item_desc#23, s_state#20, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(39) HashAggregate [codegen id : 9]
Input [21]: [i_item_id#22, i_item_desc#23, s_state#20, count#42, sum#43, count#44, n#45, avg#46, m2#47, count#48, sum#49, count#50, n#51, avg#52, m2#53, count#54, sum#55, count#56, n#57, avg#58, m2#59]
Keys [3]: [i_item_id#22, i_item_desc#23, s_state#20]
Functions [9]: [count(ss_quantity#6), avg(ss_quantity#6), stddev_samp(cast(ss_quantity#6 as double)), count(sr_return_quantity#11), avg(sr_return_quantity#11), stddev_samp(cast(sr_return_quantity#11 as double)), count(cs_quantity#15), avg(cs_quantity#15), stddev_samp(cast(cs_quantity#15 as double))]
Aggregate Attributes [9]: [count(ss_quantity#6)#60, avg(ss_quantity#6)#61, stddev_samp(cast(ss_quantity#6 as double))#62, count(sr_return_quantity#11)#63, avg(sr_return_quantity#11)#64, stddev_samp(cast(sr_return_quantity#11 as double))#65, count(cs_quantity#15)#66, avg(cs_quantity#15)#67, stddev_samp(cast(cs_quantity#15 as double))#68]
Results [15]: [i_item_id#22, i_item_desc#23, s_state#20, count(ss_quantity#6)#60 AS store_sales_quantitycount#69, avg(ss_quantity#6)#61 AS store_sales_quantityave#70, stddev_samp(cast(ss_quantity#6 as double))#62 AS store_sales_quantitystdev#71, (stddev_samp(cast(ss_quantity#6 as double))#62 / avg(ss_quantity#6)#61) AS store_sales_quantitycov#72, count(sr_return_quantity#11)#63 AS as_store_returns_quantitycount#73, avg(sr_return_quantity#11)#64 AS as_store_returns_quantityave#74, stddev_samp(cast(sr_return_quantity#11 as double))#65 AS as_store_returns_quantitystdev#75, (stddev_samp(cast(sr_return_quantity#11 as double))#65 / avg(sr_return_quantity#11)#64) AS store_returns_quantitycov#76, count(cs_quantity#15)#66 AS catalog_sales_quantitycount#77, avg(cs_quantity#15)#67 AS catalog_sales_quantityave#78, (stddev_samp(cast(cs_quantity#15 as double))#68 / avg(cs_quantity#15)#67) AS catalog_sales_quantitystdev#79, (stddev_samp(cast(cs_quantity#15 as double))#68 / avg(cs_quantity#15)#67) AS catalog_sales_quantitycov#80]

(40) TakeOrderedAndProject
Input [15]: [i_item_id#22, i_item_desc#23, s_state#20, store_sales_quantitycount#69, store_sales_quantityave#70, store_sales_quantitystdev#71, store_sales_quantitycov#72, as_store_returns_quantitycount#73, as_store_returns_quantityave#74, as_store_returns_quantitystdev#75, store_returns_quantitycov#76, catalog_sales_quantitycount#77, catalog_sales_quantityave#78, catalog_sales_quantitystdev#79, catalog_sales_quantitycov#80]
Arguments: 100, [i_item_id#22 ASC NULLS FIRST, i_item_desc#23 ASC NULLS FIRST, s_state#20 ASC NULLS FIRST], [i_item_id#22, i_item_desc#23, s_state#20, store_sales_quantitycount#69, store_sales_quantityave#70, store_sales_quantitystdev#71, store_sales_quantitycov#72, as_store_returns_quantitycount#73, as_store_returns_quantityave#74, as_store_returns_quantitystdev#75, store_returns_quantitycov#76, catalog_sales_quantitycount#77, catalog_sales_quantityave#78, catalog_sales_quantitystdev#79, catalog_sales_quantitycov#80]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#81
BroadcastExchange (44)
+- * Project (43)
   +- * Filter (42)
      +- BatchScan spark_catalog.default.date_dim (41)


(41) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_quarter_name#82]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_quarter_name IS NOT NULL, d_quarter_name = '2001Q1', d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(42) Filter [codegen id : 1]
Input [2]: [d_date_sk#16, d_quarter_name#82]
Condition : ((isnotnull(d_quarter_name#82) AND (d_quarter_name#82 = 2001Q1)) AND isnotnull(d_date_sk#16))

(43) Project [codegen id : 1]
Output [1]: [d_date_sk#16]
Input [2]: [d_date_sk#16, d_quarter_name#82]

(44) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 4 Hosting Expression = sr_returned_date_sk#7 IN dynamicpruning#83
BroadcastExchange (48)
+- * Project (47)
   +- * Filter (46)
      +- BatchScan spark_catalog.default.date_dim (45)


(45) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_quarter_name#84]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_quarter_name IN ('2001Q1', '2001Q2', '2001Q3'), d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(46) Filter [codegen id : 1]
Input [2]: [d_date_sk#17, d_quarter_name#84]
Condition : (d_quarter_name#84 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#17))

(47) Project [codegen id : 1]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_quarter_name#84]

(48) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:3 Hosting operator id = 10 Hosting Expression = cs_sold_date_sk#12 IN dynamicpruning#83


