== Physical Plan ==
TakeOrderedAndProject (27)
+- * Filter (26)
   +- Window (25)
      +- * Sort (24)
         +- Exchange (23)
            +- * HashAggregate (22)
               +- Exchange (21)
                  +- * HashAggregate (20)
                     +- * Expand (19)
                        +- * Project (18)
                           +- * BroadcastHashJoin Inner BuildRight (17)
                              :- * Project (12)
                              :  +- * BroadcastHashJoin Inner BuildRight (11)
                              :     :- * Project (6)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :     :- * Project (3)
                              :     :     :  +- * Filter (2)
                              :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
                              :     :     +- ReusedExchange (4)
                              :     +- BroadcastExchange (10)
                              :        +- * Project (9)
                              :           +- * Filter (8)
                              :              +- BatchScan spark_catalog.default.store (7)
                              +- BroadcastExchange (16)
                                 +- * Project (15)
                                    +- * Filter (14)
                                       +- BatchScan spark_catalog.default.item (13)


(1) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#2))

(3) Project [codegen id : 4]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]

(4) ReusedExchange [Reuses operator id: 31]
Output [4]: [d_date_sk#6, d_year#7, d_moy#8, d_qoy#9]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, d_year#7, d_moy#8, d_qoy#9]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, d_date_sk#6, d_year#7, d_moy#8, d_qoy#9]

(7) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#10, s_store_id#11]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_store_id#11]
Condition : isnotnull(s_store_sk#10)

(9) Project [codegen id : 2]
Output [2]: [s_store_sk#10, s_store_id#11]
Input [2]: [s_store_sk#10, s_store_id#11]

(10) BroadcastExchange
Input [2]: [s_store_sk#10, s_store_id#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#10]
Join condition: None

(12) Project [codegen id : 4]
Output [7]: [ss_item_sk#2, ss_quantity#4, ss_sales_price#5, d_year#7, d_moy#8, d_qoy#9, s_store_id#11]
Input [9]: [ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, d_year#7, d_moy#8, d_qoy#9, s_store_sk#10, s_store_id#11]

(13) BatchScan spark_catalog.default.item
Output [5]: [i_item_sk#12, i_brand#13, i_class#14, i_category#15, i_product_name#16]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [5]: [i_item_sk#12, i_brand#13, i_class#14, i_category#15, i_product_name#16]
Condition : isnotnull(i_item_sk#12)

(15) Project [codegen id : 3]
Output [5]: [i_item_sk#12, i_brand#13, i_class#14, i_category#15, i_product_name#16]
Input [5]: [i_item_sk#12, i_brand#13, i_class#14, i_category#15, i_product_name#16]

(16) BroadcastExchange
Input [5]: [i_item_sk#12, i_brand#13, i_class#14, i_category#15, i_product_name#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#12]
Join condition: None

(18) Project [codegen id : 4]
Output [10]: [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, d_year#7, d_qoy#9, d_moy#8, s_store_id#11]
Input [12]: [ss_item_sk#2, ss_quantity#4, ss_sales_price#5, d_year#7, d_moy#8, d_qoy#9, s_store_id#11, i_item_sk#12, i_brand#13, i_class#14, i_category#15, i_product_name#16]

(19) Expand [codegen id : 4]
Input [10]: [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, d_year#7, d_qoy#9, d_moy#8, s_store_id#11]
Arguments: [[ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, d_year#7, d_qoy#9, d_moy#8, s_store_id#11, 0], [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, d_year#7, d_qoy#9, d_moy#8, null, 1], [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, d_year#7, d_qoy#9, null, null, 3], [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, d_year#7, null, null, null, 7], [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, i_product_name#16, null, null, null, null, 15], [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, i_brand#13, null, null, null, null, null, 31], [ss_quantity#4, ss_sales_price#5, i_category#15, i_class#14, null, null, null, null, null, null, 63], [ss_quantity#4, ss_sales_price#5, i_category#15, null, null, null, null, null, null, null, 127], [ss_quantity#4, ss_sales_price#5, null, null, null, null, null, null, null, null, 255]], [ss_quantity#4, ss_sales_price#5, i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25]

(20) HashAggregate [codegen id : 4]
Input [11]: [ss_quantity#4, ss_sales_price#5, i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25]
Keys [9]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(ss_quantity#4 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [2]: [sum#26, isEmpty#27]
Results [11]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25, sum#28, isEmpty#29]

(21) Exchange
Input [11]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25, sum#28, isEmpty#29]
Arguments: hashpartitioning(i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 5]
Input [11]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25, sum#28, isEmpty#29]
Keys [9]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, spark_grouping_id#25]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(ss_quantity#4 as decimal(12,2)))), DecimalType(18,2)), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(ss_quantity#4 as decimal(12,2)))), DecimalType(18,2)), 0.00))#30]
Results [9]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(ss_quantity#4 as decimal(12,2)))), DecimalType(18,2)), 0.00))#30 AS sumsales#31]

(23) Exchange
Input [9]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sumsales#31]
Arguments: hashpartitioning(i_category#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 6]
Input [9]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sumsales#31]
Arguments: [i_category#17 ASC NULLS FIRST, sumsales#31 DESC NULLS LAST], false, 0

(25) Window
Input [9]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sumsales#31]
Arguments: [rank(sumsales#31) windowspecdefinition(i_category#17, sumsales#31 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#32], [i_category#17], [sumsales#31 DESC NULLS LAST]

(26) Filter [codegen id : 7]
Input [10]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sumsales#31, rk#32]
Condition : (rk#32 <= 100)

(27) TakeOrderedAndProject
Input [10]: [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sumsales#31, rk#32]
Arguments: 100, [i_category#17 ASC NULLS FIRST, i_class#18 ASC NULLS FIRST, i_brand#19 ASC NULLS FIRST, i_product_name#20 ASC NULLS FIRST, d_year#21 ASC NULLS FIRST, d_qoy#22 ASC NULLS FIRST, d_moy#23 ASC NULLS FIRST, s_store_id#24 ASC NULLS FIRST, sumsales#31 ASC NULLS FIRST, rk#32 ASC NULLS FIRST], [i_category#17, i_class#18, i_brand#19, i_product_name#20, d_year#21, d_qoy#22, d_moy#23, s_store_id#24, sumsales#31, rk#32]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#33
BroadcastExchange (31)
+- * Project (30)
   +- * Filter (29)
      +- BatchScan spark_catalog.default.date_dim (28)


(28) BatchScan spark_catalog.default.date_dim
Output [5]: [d_date_sk#6, d_month_seq#34, d_year#7, d_moy#8, d_qoy#9]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1200, d_month_seq <= 1211, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 1]
Input [5]: [d_date_sk#6, d_month_seq#34, d_year#7, d_moy#8, d_qoy#9]
Condition : (((isnotnull(d_month_seq#34) AND (d_month_seq#34 >= 1200)) AND (d_month_seq#34 <= 1211)) AND isnotnull(d_date_sk#6))

(30) Project [codegen id : 1]
Output [4]: [d_date_sk#6, d_year#7, d_moy#8, d_qoy#9]
Input [5]: [d_date_sk#6, d_month_seq#34, d_year#7, d_moy#8, d_qoy#9]

(31) BroadcastExchange
Input [4]: [d_date_sk#6, d_year#7, d_moy#8, d_qoy#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


