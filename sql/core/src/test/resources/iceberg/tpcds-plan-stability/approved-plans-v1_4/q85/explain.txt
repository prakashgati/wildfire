== Physical Plan ==
TakeOrderedAndProject (46)
+- * HashAggregate (45)
   +- Exchange (44)
      +- * HashAggregate (43)
         +- * Project (42)
            +- * BroadcastHashJoin Inner BuildRight (41)
               :- * Project (36)
               :  +- * BroadcastHashJoin Inner BuildRight (35)
               :     :- * Project (33)
               :     :  +- * BroadcastHashJoin Inner BuildRight (32)
               :     :     :- * Project (27)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (26)
               :     :     :     :- * Project (21)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
               :     :     :     :     :- * Project (15)
               :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :     :     :     :- * Project (9)
               :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :     :     :     :     :- * Project (3)
               :     :     :     :     :     :     :  +- * Filter (2)
               :     :     :     :     :     :     :     +- BatchScan spark_catalog.default.web_sales (1)
               :     :     :     :     :     :     +- BroadcastExchange (7)
               :     :     :     :     :     :        +- * Project (6)
               :     :     :     :     :     :           +- * Filter (5)
               :     :     :     :     :     :              +- BatchScan spark_catalog.default.web_returns (4)
               :     :     :     :     :     +- BroadcastExchange (13)
               :     :     :     :     :        +- * Project (12)
               :     :     :     :     :           +- * Filter (11)
               :     :     :     :     :              +- BatchScan spark_catalog.default.web_page (10)
               :     :     :     :     +- BroadcastExchange (19)
               :     :     :     :        +- * Project (18)
               :     :     :     :           +- * Filter (17)
               :     :     :     :              +- BatchScan spark_catalog.default.customer_demographics (16)
               :     :     :     +- BroadcastExchange (25)
               :     :     :        +- * Project (24)
               :     :     :           +- * Filter (23)
               :     :     :              +- BatchScan spark_catalog.default.customer_demographics (22)
               :     :     +- BroadcastExchange (31)
               :     :        +- * Project (30)
               :     :           +- * Filter (29)
               :     :              +- BatchScan spark_catalog.default.customer_address (28)
               :     +- ReusedExchange (34)
               +- BroadcastExchange (40)
                  +- * Project (39)
                     +- * Filter (38)
                        +- BatchScan spark_catalog.default.reason (37)


(1) BatchScan spark_catalog.default.web_sales
Output [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_item_sk IS NOT NULL, ws_order_number IS NOT NULL, ws_web_page_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 8]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Condition : (((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#4)) AND isnotnull(ws_web_page_sk#3)) AND isnotnull(ws_sold_date_sk#1)) AND ((((ws_sales_price#6 >= 100.00) AND (ws_sales_price#6 <= 150.00)) OR ((ws_sales_price#6 >= 50.00) AND (ws_sales_price#6 <= 100.00))) OR ((ws_sales_price#6 >= 150.00) AND (ws_sales_price#6 <= 200.00)))) AND ((((ws_net_profit#7 >= 100.00) AND (ws_net_profit#7 <= 200.00)) OR ((ws_net_profit#7 >= 150.00) AND (ws_net_profit#7 <= 300.00))) OR ((ws_net_profit#7 >= 50.00) AND (ws_net_profit#7 <= 250.00))))

(3) Project [codegen id : 8]
Output [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]

(4) BatchScan spark_catalog.default.web_returns
Output [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_item_sk IS NOT NULL, wr_order_number IS NOT NULL, wr_refunded_cdemo_sk IS NOT NULL, wr_returning_cdemo_sk IS NOT NULL, wr_refunded_addr_sk IS NOT NULL, wr_reason_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
Condition : (((((isnotnull(wr_item_sk#8) AND isnotnull(wr_order_number#13)) AND isnotnull(wr_refunded_cdemo_sk#9)) AND isnotnull(wr_returning_cdemo_sk#11)) AND isnotnull(wr_refunded_addr_sk#10)) AND isnotnull(wr_reason_sk#12))

(6) Project [codegen id : 1]
Output [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
Input [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]

(7) BroadcastExchange
Input [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, true] as bigint), 32) | (cast(input[5, int, true] as bigint) & 4294967295))),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [ws_item_sk#2, ws_order_number#4]
Right keys [2]: [wr_item_sk#8, wr_order_number#13]
Join condition: None

(9) Project [codegen id : 8]
Output [11]: [ws_sold_date_sk#1, ws_web_page_sk#3, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [15]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]

(10) BatchScan spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#16]
spark_catalog.default.web_page [scan class = SparkBatchQueryScan] [filters=wp_web_page_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [1]: [wp_web_page_sk#16]
Condition : isnotnull(wp_web_page_sk#16)

(12) Project [codegen id : 2]
Output [1]: [wp_web_page_sk#16]
Input [1]: [wp_web_page_sk#16]

(13) BroadcastExchange
Input [1]: [wp_web_page_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_web_page_sk#3]
Right keys [1]: [wp_web_page_sk#16]
Join condition: None

(15) Project [codegen id : 8]
Output [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [12]: [ws_sold_date_sk#1, ws_web_page_sk#3, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, wp_web_page_sk#16]

(16) BatchScan spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
spark_catalog.default.customer_demographics [scan class = SparkBatchQueryScan] [filters=cd_demo_sk IS NOT NULL, cd_marital_status IS NOT NULL, cd_education_status IS NOT NULL, (((cd_marital_status = 'M' AND cd_education_status = 'Advanced Degree') OR (cd_marital_status = 'S' AND cd_education_status = 'College')) OR (cd_marital_status = 'W' AND cd_education_status = '2 yr Degree'))], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(17) Filter [codegen id : 3]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Condition : (((isnotnull(cd_demo_sk#17) AND isnotnull(cd_marital_status#18)) AND isnotnull(cd_education_status#19)) AND ((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree)) OR ((cd_marital_status#18 = S) AND (cd_education_status#19 = College))) OR ((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree))))

(18) Project [codegen id : 3]
Output [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(19) BroadcastExchange
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_refunded_cdemo_sk#9]
Right keys [1]: [cd_demo_sk#17]
Join condition: ((((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree)) AND (ws_sales_price#6 >= 100.00)) AND (ws_sales_price#6 <= 150.00)) OR ((((cd_marital_status#18 = S) AND (cd_education_status#19 = College)) AND (ws_sales_price#6 >= 50.00)) AND (ws_sales_price#6 <= 100.00))) OR ((((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree)) AND (ws_sales_price#6 >= 150.00)) AND (ws_sales_price#6 <= 200.00)))

(21) Project [codegen id : 8]
Output [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, cd_marital_status#18, cd_education_status#19]
Input [13]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(22) BatchScan spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]
spark_catalog.default.customer_demographics [scan class = SparkBatchQueryScan] [filters=cd_demo_sk IS NOT NULL, cd_marital_status IS NOT NULL, cd_education_status IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 4]
Input [3]: [cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]
Condition : ((isnotnull(cd_demo_sk#20) AND isnotnull(cd_marital_status#21)) AND isnotnull(cd_education_status#22))

(24) Project [codegen id : 4]
Output [3]: [cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]
Input [3]: [cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]

(25) BroadcastExchange
Input [3]: [cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, string, true], input[2, string, true]),false), [plan_id=4]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [3]: [wr_returning_cdemo_sk#11, cd_marital_status#18, cd_education_status#19]
Right keys [3]: [cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]
Join condition: None

(27) Project [codegen id : 8]
Output [7]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [13]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, cd_marital_status#18, cd_education_status#19, cd_demo_sk#20, cd_marital_status#21, cd_education_status#22]

(28) BatchScan spark_catalog.default.customer_address
Output [3]: [ca_address_sk#23, ca_state#24, ca_country#25]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_country IS NOT NULL, ca_country = 'United States', ca_address_sk IS NOT NULL, ((ca_state IN ('IN', 'OH', 'NJ') OR ca_state IN ('WI', 'CT', 'KY')) OR ca_state IN ('LA', 'IA', 'AR'))], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 5]
Input [3]: [ca_address_sk#23, ca_state#24, ca_country#25]
Condition : (((isnotnull(ca_country#25) AND (ca_country#25 = United States)) AND isnotnull(ca_address_sk#23)) AND ((ca_state#24 IN (IN,OH,NJ) OR ca_state#24 IN (WI,CT,KY)) OR ca_state#24 IN (LA,IA,AR)))

(30) Project [codegen id : 5]
Output [2]: [ca_address_sk#23, ca_state#24]
Input [3]: [ca_address_sk#23, ca_state#24, ca_country#25]

(31) BroadcastExchange
Input [2]: [ca_address_sk#23, ca_state#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_refunded_addr_sk#10]
Right keys [1]: [ca_address_sk#23]
Join condition: ((((ca_state#24 IN (IN,OH,NJ) AND (ws_net_profit#7 >= 100.00)) AND (ws_net_profit#7 <= 200.00)) OR ((ca_state#24 IN (WI,CT,KY) AND (ws_net_profit#7 >= 150.00)) AND (ws_net_profit#7 <= 300.00))) OR ((ca_state#24 IN (LA,IA,AR) AND (ws_net_profit#7 >= 50.00)) AND (ws_net_profit#7 <= 250.00)))

(33) Project [codegen id : 8]
Output [5]: [ws_sold_date_sk#1, ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [9]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, ca_address_sk#23, ca_state#24]

(34) ReusedExchange [Reuses operator id: 50]
Output [1]: [d_date_sk#26]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#26]
Join condition: None

(36) Project [codegen id : 8]
Output [4]: [ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [6]: [ws_sold_date_sk#1, ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, d_date_sk#26]

(37) BatchScan spark_catalog.default.reason
Output [2]: [r_reason_sk#27, r_reason_desc#28]
spark_catalog.default.reason [scan class = SparkBatchQueryScan] [filters=r_reason_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(38) Filter [codegen id : 7]
Input [2]: [r_reason_sk#27, r_reason_desc#28]
Condition : isnotnull(r_reason_sk#27)

(39) Project [codegen id : 7]
Output [2]: [r_reason_sk#27, r_reason_desc#28]
Input [2]: [r_reason_sk#27, r_reason_desc#28]

(40) BroadcastExchange
Input [2]: [r_reason_sk#27, r_reason_desc#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_reason_sk#12]
Right keys [1]: [r_reason_sk#27]
Join condition: None

(42) Project [codegen id : 8]
Output [4]: [ws_quantity#5, wr_fee#14, wr_refunded_cash#15, r_reason_desc#28]
Input [6]: [ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, r_reason_sk#27, r_reason_desc#28]

(43) HashAggregate [codegen id : 8]
Input [4]: [ws_quantity#5, wr_fee#14, wr_refunded_cash#15, r_reason_desc#28]
Keys [1]: [r_reason_desc#28]
Functions [3]: [partial_avg(ws_quantity#5), partial_avg(UnscaledValue(wr_refunded_cash#15)), partial_avg(UnscaledValue(wr_fee#14))]
Aggregate Attributes [6]: [sum#29, count#30, sum#31, count#32, sum#33, count#34]
Results [7]: [r_reason_desc#28, sum#35, count#36, sum#37, count#38, sum#39, count#40]

(44) Exchange
Input [7]: [r_reason_desc#28, sum#35, count#36, sum#37, count#38, sum#39, count#40]
Arguments: hashpartitioning(r_reason_desc#28, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(45) HashAggregate [codegen id : 9]
Input [7]: [r_reason_desc#28, sum#35, count#36, sum#37, count#38, sum#39, count#40]
Keys [1]: [r_reason_desc#28]
Functions [3]: [avg(ws_quantity#5), avg(UnscaledValue(wr_refunded_cash#15)), avg(UnscaledValue(wr_fee#14))]
Aggregate Attributes [3]: [avg(ws_quantity#5)#41, avg(UnscaledValue(wr_refunded_cash#15))#42, avg(UnscaledValue(wr_fee#14))#43]
Results [4]: [substr(r_reason_desc#28, 1, 20) AS substr(r_reason_desc, 1, 20)#44, avg(ws_quantity#5)#41 AS avg(ws_quantity)#45, cast((avg(UnscaledValue(wr_refunded_cash#15))#42 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#46, cast((avg(UnscaledValue(wr_fee#14))#43 / 100.0) as decimal(11,6)) AS avg(wr_fee)#47]

(46) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#44, avg(ws_quantity)#45, avg(wr_refunded_cash)#46, avg(wr_fee)#47]
Arguments: 100, [substr(r_reason_desc, 1, 20)#44 ASC NULLS FIRST, avg(ws_quantity)#45 ASC NULLS FIRST, avg(wr_refunded_cash)#46 ASC NULLS FIRST, avg(wr_fee)#47 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#44, avg(ws_quantity)#45, avg(wr_refunded_cash)#46, avg(wr_fee)#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#1 IN dynamicpruning#48
BroadcastExchange (50)
+- * Project (49)
   +- * Filter (48)
      +- BatchScan spark_catalog.default.date_dim (47)


(47) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#49]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2000, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(48) Filter [codegen id : 1]
Input [2]: [d_date_sk#26, d_year#49]
Condition : ((isnotnull(d_year#49) AND (d_year#49 = 2000)) AND isnotnull(d_date_sk#26))

(49) Project [codegen id : 1]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_year#49]

(50) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


