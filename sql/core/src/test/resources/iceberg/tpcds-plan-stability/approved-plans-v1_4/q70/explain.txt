== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- Window (40)
      +- * Sort (39)
         +- Exchange (38)
            +- * HashAggregate (37)
               +- Exchange (36)
                  +- * HashAggregate (35)
                     +- * Expand (34)
                        +- * Project (33)
                           +- * BroadcastHashJoin Inner BuildRight (32)
                              :- * Project (6)
                              :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :- * Project (3)
                              :     :  +- * Filter (2)
                              :     :     +- BatchScan spark_catalog.default.store_sales (1)
                              :     +- ReusedExchange (4)
                              +- BroadcastExchange (31)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (30)
                                    :- * Project (9)
                                    :  +- * Filter (8)
                                    :     +- BatchScan spark_catalog.default.store (7)
                                    +- BroadcastExchange (29)
                                       +- * Project (28)
                                          +- * Filter (27)
                                             +- Window (26)
                                                +- * Sort (25)
                                                   +- * HashAggregate (24)
                                                      +- Exchange (23)
                                                         +- * HashAggregate (22)
                                                            +- * Project (21)
                                                               +- * BroadcastHashJoin Inner BuildRight (20)
                                                                  :- * Project (18)
                                                                  :  +- * BroadcastHashJoin Inner BuildRight (17)
                                                                  :     :- * Project (12)
                                                                  :     :  +- * Filter (11)
                                                                  :     :     +- BatchScan spark_catalog.default.store_sales (10)
                                                                  :     +- BroadcastExchange (16)
                                                                  :        +- * Project (15)
                                                                  :           +- * Filter (14)
                                                                  :              +- BatchScan spark_catalog.default.store (13)
                                                                  +- ReusedExchange (19)


(1) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 8]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(3) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(4) ReusedExchange [Reuses operator id: 46]
Output [1]: [d_date_sk#4]

(5) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 8]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(7) BatchScan spark_catalog.default.store
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Condition : isnotnull(s_store_sk#5)

(9) Project [codegen id : 7]
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]

(10) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_store_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
Condition : (isnotnull(ss_store_sk#9) AND isnotnull(ss_sold_date_sk#8))

(12) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
Input [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]

(13) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#11, s_state#12]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]
Condition : isnotnull(s_store_sk#11)

(15) Project [codegen id : 2]
Output [2]: [s_store_sk#11, s_state#12]
Input [2]: [s_store_sk#11, s_state#12]

(16) BroadcastExchange
Input [2]: [s_store_sk#11, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#9]
Right keys [1]: [s_store_sk#11]
Join condition: None

(18) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#8, ss_net_profit#10, s_state#12]
Input [5]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10, s_store_sk#11, s_state#12]

(19) ReusedExchange [Reuses operator id: 46]
Output [1]: [d_date_sk#13]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join condition: None

(21) Project [codegen id : 4]
Output [2]: [ss_net_profit#10, s_state#12]
Input [4]: [ss_sold_date_sk#8, ss_net_profit#10, s_state#12, d_date_sk#13]

(22) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#10, s_state#12]
Keys [1]: [s_state#12]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum#14]
Results [2]: [s_state#12, sum#15]

(23) Exchange
Input [2]: [s_state#12, sum#15]
Arguments: hashpartitioning(s_state#12, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(24) HashAggregate [codegen id : 5]
Input [2]: [s_state#12, sum#15]
Keys [1]: [s_state#12]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#10))#16]
Results [3]: [s_state#12, s_state#12, MakeDecimal(sum(UnscaledValue(ss_net_profit#10))#16,17,2) AS _w1#17]

(25) Sort [codegen id : 5]
Input [3]: [s_state#12, s_state#12, _w1#17]
Arguments: [s_state#12 ASC NULLS FIRST, _w1#17 DESC NULLS LAST], false, 0

(26) Window
Input [3]: [s_state#12, s_state#12, _w1#17]
Arguments: [rank(_w1#17) windowspecdefinition(s_state#12, _w1#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#18], [s_state#12], [_w1#17 DESC NULLS LAST]

(27) Filter [codegen id : 6]
Input [4]: [s_state#12, s_state#12, _w1#17, ranking#18]
Condition : (ranking#18 <= 5)

(28) Project [codegen id : 6]
Output [1]: [s_state#12]
Input [4]: [s_state#12, s_state#12, _w1#17, ranking#18]

(29) BroadcastExchange
Input [1]: [s_state#12]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_state#7]
Right keys [1]: [s_state#12]
Join condition: None

(31) BroadcastExchange
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#5]
Join condition: None

(33) Project [codegen id : 8]
Output [3]: [ss_net_profit#3, s_state#7, s_county#6]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#5, s_county#6, s_state#7]

(34) Expand [codegen id : 8]
Input [3]: [ss_net_profit#3, s_state#7, s_county#6]
Arguments: [[ss_net_profit#3, s_state#7, s_county#6, 0], [ss_net_profit#3, s_state#7, null, 1], [ss_net_profit#3, null, null, 3]], [ss_net_profit#3, s_state#19, s_county#20, spark_grouping_id#21]

(35) HashAggregate [codegen id : 8]
Input [4]: [ss_net_profit#3, s_state#19, s_county#20, spark_grouping_id#21]
Keys [3]: [s_state#19, s_county#20, spark_grouping_id#21]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#22]
Results [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]

(36) Exchange
Input [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]
Arguments: hashpartitioning(s_state#19, s_county#20, spark_grouping_id#21, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(37) HashAggregate [codegen id : 9]
Input [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]
Keys [3]: [s_state#19, s_county#20, spark_grouping_id#21]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#24]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#24,17,2) AS total_sum#25, s_state#19, s_county#20, (cast((shiftright(spark_grouping_id#21, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#21, 0) & 1) as tinyint)) AS lochierarchy#26, (cast((shiftright(spark_grouping_id#21, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#21, 0) & 1) as tinyint)) AS _w1#27, CASE WHEN (cast((shiftright(spark_grouping_id#21, 0) & 1) as tinyint) = 0) THEN s_state#19 END AS _w2#28, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#24,17,2) AS _w3#29]

(38) Exchange
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w1#27, _w2#28, _w3#29]
Arguments: hashpartitioning(_w1#27, _w2#28, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(39) Sort [codegen id : 10]
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w1#27, _w2#28, _w3#29]
Arguments: [_w1#27 ASC NULLS FIRST, _w2#28 ASC NULLS FIRST, _w3#29 DESC NULLS LAST], false, 0

(40) Window
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w1#27, _w2#28, _w3#29]
Arguments: [rank(_w3#29) windowspecdefinition(_w1#27, _w2#28, _w3#29 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#30], [_w1#27, _w2#28], [_w3#29 DESC NULLS LAST]

(41) Project [codegen id : 11]
Output [5]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, rank_within_parent#30]
Input [8]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w1#27, _w2#28, _w3#29, rank_within_parent#30]

(42) TakeOrderedAndProject
Input [5]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, rank_within_parent#30]
Arguments: 100, [lochierarchy#26 DESC NULLS LAST, CASE WHEN (lochierarchy#26 = 0) THEN s_state#19 END ASC NULLS FIRST, rank_within_parent#30 ASC NULLS FIRST], [total_sum#25, s_state#19, s_county#20, lochierarchy#26, rank_within_parent#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#31
BroadcastExchange (46)
+- * Project (45)
   +- * Filter (44)
      +- BatchScan spark_catalog.default.date_dim (43)


(43) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#32]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1200, d_month_seq <= 1211, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(44) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#32]
Condition : (((isnotnull(d_month_seq#32) AND (d_month_seq#32 >= 1200)) AND (d_month_seq#32 <= 1211)) AND isnotnull(d_date_sk#4))

(45) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#32]

(46) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#31


