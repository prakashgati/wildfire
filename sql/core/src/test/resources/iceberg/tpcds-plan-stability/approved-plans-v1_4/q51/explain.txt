== Physical Plan ==
TakeOrderedAndProject (37)
+- * Filter (36)
   +- Window (35)
      +- * Sort (34)
         +- Exchange (33)
            +- * Project (32)
               +- * SortMergeJoin FullOuter (31)
                  :- * Sort (15)
                  :  +- Exchange (14)
                  :     +- * Project (13)
                  :        +- Window (12)
                  :           +- * Sort (11)
                  :              +- Exchange (10)
                  :                 +- * HashAggregate (9)
                  :                    +- Exchange (8)
                  :                       +- * HashAggregate (7)
                  :                          +- * Project (6)
                  :                             +- * BroadcastHashJoin Inner BuildRight (5)
                  :                                :- * Project (3)
                  :                                :  +- * Filter (2)
                  :                                :     +- BatchScan spark_catalog.default.web_sales (1)
                  :                                +- ReusedExchange (4)
                  +- * Sort (30)
                     +- Exchange (29)
                        +- * Project (28)
                           +- Window (27)
                              +- * Sort (26)
                                 +- Exchange (25)
                                    +- * HashAggregate (24)
                                       +- Exchange (23)
                                          +- * HashAggregate (22)
                                             +- * Project (21)
                                                +- * BroadcastHashJoin Inner BuildRight (20)
                                                   :- * Project (18)
                                                   :  +- * Filter (17)
                                                   :     +- BatchScan spark_catalog.default.store_sales (16)
                                                   +- ReusedExchange (19)


(1) BatchScan spark_catalog.default.web_sales
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_item_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 2]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
Condition : (isnotnull(ws_item_sk#2) AND isnotnull(ws_sold_date_sk#1))

(3) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]

(4) ReusedExchange [Reuses operator id: 41]
Output [2]: [d_date_sk#4, d_date#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#2, ws_sales_price#3, d_date#5]
Input [5]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3, d_date_sk#4, d_date#5]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#2, ws_sales_price#3, d_date#5]
Keys [2]: [ws_item_sk#2, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#3))]
Aggregate Attributes [1]: [sum#6]
Results [3]: [ws_item_sk#2, d_date#5, sum#7]

(8) Exchange
Input [3]: [ws_item_sk#2, d_date#5, sum#7]
Arguments: hashpartitioning(ws_item_sk#2, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#2, d_date#5, sum#7]
Keys [2]: [ws_item_sk#2, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#3))#8]
Results [4]: [ws_item_sk#2 AS item_sk#9, d_date#5, MakeDecimal(sum(UnscaledValue(ws_sales_price#3))#8,17,2) AS _w0#10, ws_item_sk#2]

(10) Exchange
Input [4]: [item_sk#9, d_date#5, _w0#10, ws_item_sk#2]
Arguments: hashpartitioning(ws_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [4]: [item_sk#9, d_date#5, _w0#10, ws_item_sk#2]
Arguments: [ws_item_sk#2 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(12) Window
Input [4]: [item_sk#9, d_date#5, _w0#10, ws_item_sk#2]
Arguments: [sum(_w0#10) windowspecdefinition(ws_item_sk#2, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#11], [ws_item_sk#2], [d_date#5 ASC NULLS FIRST]

(13) Project [codegen id : 5]
Output [3]: [item_sk#9, d_date#5, cume_sales#11]
Input [5]: [item_sk#9, d_date#5, _w0#10, ws_item_sk#2, cume_sales#11]

(14) Exchange
Input [3]: [item_sk#9, d_date#5, cume_sales#11]
Arguments: hashpartitioning(item_sk#9, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(15) Sort [codegen id : 6]
Input [3]: [item_sk#9, d_date#5, cume_sales#11]
Arguments: [item_sk#9 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(16) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#12, ss_item_sk#13, ss_sales_price#14]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_item_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(17) Filter [codegen id : 8]
Input [3]: [ss_sold_date_sk#12, ss_item_sk#13, ss_sales_price#14]
Condition : (isnotnull(ss_item_sk#13) AND isnotnull(ss_sold_date_sk#12))

(18) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#12, ss_item_sk#13, ss_sales_price#14]
Input [3]: [ss_sold_date_sk#12, ss_item_sk#13, ss_sales_price#14]

(19) ReusedExchange [Reuses operator id: 41]
Output [2]: [d_date_sk#15, d_date#16]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#15]
Join condition: None

(21) Project [codegen id : 8]
Output [3]: [ss_item_sk#13, ss_sales_price#14, d_date#16]
Input [5]: [ss_sold_date_sk#12, ss_item_sk#13, ss_sales_price#14, d_date_sk#15, d_date#16]

(22) HashAggregate [codegen id : 8]
Input [3]: [ss_item_sk#13, ss_sales_price#14, d_date#16]
Keys [2]: [ss_item_sk#13, d_date#16]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#14))]
Aggregate Attributes [1]: [sum#17]
Results [3]: [ss_item_sk#13, d_date#16, sum#18]

(23) Exchange
Input [3]: [ss_item_sk#13, d_date#16, sum#18]
Arguments: hashpartitioning(ss_item_sk#13, d_date#16, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) HashAggregate [codegen id : 9]
Input [3]: [ss_item_sk#13, d_date#16, sum#18]
Keys [2]: [ss_item_sk#13, d_date#16]
Functions [1]: [sum(UnscaledValue(ss_sales_price#14))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#14))#19]
Results [4]: [ss_item_sk#13 AS item_sk#20, d_date#16, MakeDecimal(sum(UnscaledValue(ss_sales_price#14))#19,17,2) AS _w0#21, ss_item_sk#13]

(25) Exchange
Input [4]: [item_sk#20, d_date#16, _w0#21, ss_item_sk#13]
Arguments: hashpartitioning(ss_item_sk#13, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(26) Sort [codegen id : 10]
Input [4]: [item_sk#20, d_date#16, _w0#21, ss_item_sk#13]
Arguments: [ss_item_sk#13 ASC NULLS FIRST, d_date#16 ASC NULLS FIRST], false, 0

(27) Window
Input [4]: [item_sk#20, d_date#16, _w0#21, ss_item_sk#13]
Arguments: [sum(_w0#21) windowspecdefinition(ss_item_sk#13, d_date#16 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#22], [ss_item_sk#13], [d_date#16 ASC NULLS FIRST]

(28) Project [codegen id : 11]
Output [3]: [item_sk#20, d_date#16, cume_sales#22]
Input [5]: [item_sk#20, d_date#16, _w0#21, ss_item_sk#13, cume_sales#22]

(29) Exchange
Input [3]: [item_sk#20, d_date#16, cume_sales#22]
Arguments: hashpartitioning(item_sk#20, d_date#16, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(30) Sort [codegen id : 12]
Input [3]: [item_sk#20, d_date#16, cume_sales#22]
Arguments: [item_sk#20 ASC NULLS FIRST, d_date#16 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 13]
Left keys [2]: [item_sk#9, d_date#5]
Right keys [2]: [item_sk#20, d_date#16]
Join condition: None

(32) Project [codegen id : 13]
Output [4]: [CASE WHEN isnotnull(item_sk#9) THEN item_sk#9 ELSE item_sk#20 END AS item_sk#23, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#16 END AS d_date#24, cume_sales#11 AS web_sales#25, cume_sales#22 AS store_sales#26]
Input [6]: [item_sk#9, d_date#5, cume_sales#11, item_sk#20, d_date#16, cume_sales#22]

(33) Exchange
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]
Arguments: hashpartitioning(item_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(34) Sort [codegen id : 14]
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]
Arguments: [item_sk#23 ASC NULLS FIRST, d_date#24 ASC NULLS FIRST], false, 0

(35) Window
Input [4]: [item_sk#23, d_date#24, web_sales#25, store_sales#26]
Arguments: [max(web_sales#25) windowspecdefinition(item_sk#23, d_date#24 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#27, max(store_sales#26) windowspecdefinition(item_sk#23, d_date#24 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#28], [item_sk#23], [d_date#24 ASC NULLS FIRST]

(36) Filter [codegen id : 15]
Input [6]: [item_sk#23, d_date#24, web_sales#25, store_sales#26, web_cumulative#27, store_cumulative#28]
Condition : ((isnotnull(web_cumulative#27) AND isnotnull(store_cumulative#28)) AND (web_cumulative#27 > store_cumulative#28))

(37) TakeOrderedAndProject
Input [6]: [item_sk#23, d_date#24, web_sales#25, store_sales#26, web_cumulative#27, store_cumulative#28]
Arguments: 100, [item_sk#23 ASC NULLS FIRST, d_date#24 ASC NULLS FIRST], [item_sk#23, d_date#24, web_sales#25, store_sales#26, web_cumulative#27, store_cumulative#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#1 IN dynamicpruning#29
BroadcastExchange (41)
+- * Project (40)
   +- * Filter (39)
      +- BatchScan spark_catalog.default.date_dim (38)


(38) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#30]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1200, d_month_seq <= 1211, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(39) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#30]
Condition : (((isnotnull(d_month_seq#30) AND (d_month_seq#30 >= 1200)) AND (d_month_seq#30 <= 1211)) AND isnotnull(d_date_sk#4))

(40) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#30]

(41) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 16 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#29


