== Physical Plan ==
* Filter (40)
+- * HashAggregate (39)
   +- Exchange (38)
      +- * HashAggregate (37)
         +- * HashAggregate (36)
            +- Exchange (35)
               +- * HashAggregate (34)
                  +- * Project (33)
                     +- * BroadcastHashJoin Inner BuildRight (32)
                        :- * Project (27)
                        :  +- * BroadcastHashJoin Inner BuildRight (26)
                        :     :- * Project (21)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                        :     :     :- * Project (15)
                        :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                        :     :     :     :- * Project (9)
                        :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                        :     :     :     :     :- * Project (3)
                        :     :     :     :     :  +- * Filter (2)
                        :     :     :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
                        :     :     :     :     +- BroadcastExchange (7)
                        :     :     :     :        +- * Project (6)
                        :     :     :     :           +- * Filter (5)
                        :     :     :     :              +- BatchScan spark_catalog.default.store_returns (4)
                        :     :     :     +- BroadcastExchange (13)
                        :     :     :        +- * Project (12)
                        :     :     :           +- * Filter (11)
                        :     :     :              +- BatchScan spark_catalog.default.store (10)
                        :     :     +- BroadcastExchange (19)
                        :     :        +- * Project (18)
                        :     :           +- * Filter (17)
                        :     :              +- BatchScan spark_catalog.default.item (16)
                        :     +- BroadcastExchange (25)
                        :        +- * Project (24)
                        :           +- * Filter (23)
                        :              +- BatchScan spark_catalog.default.customer (22)
                        +- BroadcastExchange (31)
                           +- * Project (30)
                              +- * Filter (29)
                                 +- BatchScan spark_catalog.default.customer_address (28)


(1) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_ticket_number IS NOT NULL, ss_item_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 6]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) Project [codegen id : 6]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) BatchScan spark_catalog.default.store_returns
Output [2]: [sr_item_sk#6, sr_ticket_number#7]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_ticket_number IS NOT NULL, sr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [sr_item_sk#6, sr_ticket_number#7]
Condition : (isnotnull(sr_ticket_number#7) AND isnotnull(sr_item_sk#6))

(6) Project [codegen id : 1]
Output [2]: [sr_item_sk#6, sr_ticket_number#7]
Input [2]: [sr_item_sk#6, sr_ticket_number#7]

(7) BroadcastExchange
Input [2]: [sr_item_sk#6, sr_ticket_number#7]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#7, sr_item_sk#6]
Join condition: None

(9) Project [codegen id : 6]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#6, sr_ticket_number#7]

(10) BatchScan spark_catalog.default.store
Output [5]: [s_store_sk#8, s_store_name#9, s_market_id#10, s_state#11, s_zip#12]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_market_id IS NOT NULL, s_market_id = 8, s_store_sk IS NOT NULL, s_zip IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [5]: [s_store_sk#8, s_store_name#9, s_market_id#10, s_state#11, s_zip#12]
Condition : (((isnotnull(s_market_id#10) AND (s_market_id#10 = 8)) AND isnotnull(s_store_sk#8)) AND isnotnull(s_zip#12))

(12) Project [codegen id : 2]
Output [4]: [s_store_sk#8, s_store_name#9, s_state#11, s_zip#12]
Input [5]: [s_store_sk#8, s_store_name#9, s_market_id#10, s_state#11, s_zip#12]

(13) BroadcastExchange
Input [4]: [s_store_sk#8, s_store_name#9, s_state#11, s_zip#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#8]
Join condition: None

(15) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#8, s_store_name#9, s_state#11, s_zip#12]

(16) BatchScan spark_catalog.default.item
Output [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_color IS NOT NULL, i_color = 'chiffon', i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(17) Filter [codegen id : 3]
Input [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Condition : ((isnotnull(i_color#16) AND (i_color#16 = chiffon)) AND isnotnull(i_item_sk#13))

(18) Project [codegen id : 3]
Output [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Input [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]

(19) BroadcastExchange
Input [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#13]
Join condition: None

(21) Project [codegen id : 6]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]

(22) BatchScan spark_catalog.default.customer
Output [4]: [c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_birth_country IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 4]
Input [4]: [c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]
Condition : (isnotnull(c_customer_sk#19) AND isnotnull(c_birth_country#22))

(24) Project [codegen id : 4]
Output [4]: [c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]
Input [4]: [c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]

(25) BroadcastExchange
Input [4]: [c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#19]
Join condition: None

(27) Project [codegen id : 6]
Output [12]: [ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, c_birth_country#22]
Input [14]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]

(28) BatchScan spark_catalog.default.customer_address
Output [3]: [ca_state#23, ca_zip#24, ca_country#25]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_country IS NOT NULL, ca_zip IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 5]
Input [3]: [ca_state#23, ca_zip#24, ca_country#25]
Condition : (isnotnull(ca_country#25) AND isnotnull(ca_zip#24))

(30) Project [codegen id : 5]
Output [3]: [ca_state#23, ca_zip#24, ca_country#25]
Input [3]: [ca_state#23, ca_zip#24, ca_country#25]

(31) BroadcastExchange
Input [3]: [ca_state#23, ca_zip#24, ca_country#25]
Arguments: HashedRelationBroadcastMode(List(upper(input[2, string, true]), input[1, string, true]),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [c_birth_country#22, s_zip#12]
Right keys [2]: [upper(ca_country#25), ca_zip#24]
Join condition: None

(33) Project [codegen id : 6]
Output [11]: [ss_net_paid#5, s_store_name#9, s_state#11, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, ca_state#23]
Input [15]: [ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, c_birth_country#22, ca_state#23, ca_zip#24, ca_country#25]

(34) HashAggregate [codegen id : 6]
Input [11]: [ss_net_paid#5, s_store_name#9, s_state#11, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, ca_state#23]
Keys [10]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#26]
Results [11]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, sum#27]

(35) Exchange
Input [11]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, sum#27]
Arguments: hashpartitioning(c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 7]
Input [11]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, sum#27]
Keys [10]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#28]
Results [4]: [c_last_name#21, c_first_name#20, s_store_name#9, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#28,17,2) AS netpaid#29]

(37) HashAggregate [codegen id : 7]
Input [4]: [c_last_name#21, c_first_name#20, s_store_name#9, netpaid#29]
Keys [3]: [c_last_name#21, c_first_name#20, s_store_name#9]
Functions [1]: [partial_sum(netpaid#29)]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [5]: [c_last_name#21, c_first_name#20, s_store_name#9, sum#32, isEmpty#33]

(38) Exchange
Input [5]: [c_last_name#21, c_first_name#20, s_store_name#9, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_last_name#21, c_first_name#20, s_store_name#9, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(39) HashAggregate [codegen id : 8]
Input [5]: [c_last_name#21, c_first_name#20, s_store_name#9, sum#32, isEmpty#33]
Keys [3]: [c_last_name#21, c_first_name#20, s_store_name#9]
Functions [1]: [sum(netpaid#29)]
Aggregate Attributes [1]: [sum(netpaid#29)#34]
Results [4]: [c_last_name#21, c_first_name#20, s_store_name#9, sum(netpaid#29)#34 AS paid#35]

(40) Filter [codegen id : 8]
Input [4]: [c_last_name#21, c_first_name#20, s_store_name#9, paid#35]
Condition : (isnotnull(paid#35) AND (cast(paid#35 as decimal(33,8)) > cast(Subquery scalar-subquery#36, [id=#37] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 40 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (67)
+- Exchange (66)
   +- * HashAggregate (65)
      +- * HashAggregate (64)
         +- Exchange (63)
            +- * HashAggregate (62)
               +- * Project (61)
                  +- * BroadcastHashJoin Inner BuildRight (60)
                     :- * Project (58)
                     :  +- * BroadcastHashJoin Inner BuildRight (57)
                     :     :- * Project (55)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (54)
                     :     :     :- * Project (49)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (48)
                     :     :     :     :- * Project (46)
                     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (45)
                     :     :     :     :     :- * Project (43)
                     :     :     :     :     :  +- * Filter (42)
                     :     :     :     :     :     +- BatchScan spark_catalog.default.store_sales (41)
                     :     :     :     :     +- ReusedExchange (44)
                     :     :     :     +- ReusedExchange (47)
                     :     :     +- BroadcastExchange (53)
                     :     :        +- * Project (52)
                     :     :           +- * Filter (51)
                     :     :              +- BatchScan spark_catalog.default.item (50)
                     :     +- ReusedExchange (56)
                     +- ReusedExchange (59)


(41) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_ticket_number IS NOT NULL, ss_item_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(42) Filter [codegen id : 6]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(43) Project [codegen id : 6]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(44) ReusedExchange [Reuses operator id: 7]
Output [2]: [sr_item_sk#6, sr_ticket_number#7]

(45) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#7, sr_item_sk#6]
Join condition: None

(46) Project [codegen id : 6]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#6, sr_ticket_number#7]

(47) ReusedExchange [Reuses operator id: 13]
Output [4]: [s_store_sk#8, s_store_name#9, s_state#11, s_zip#12]

(48) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#8]
Join condition: None

(49) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#8, s_store_name#9, s_state#11, s_zip#12]

(50) BatchScan spark_catalog.default.item
Output [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(51) Filter [codegen id : 3]
Input [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Condition : isnotnull(i_item_sk#13)

(52) Project [codegen id : 3]
Output [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Input [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]

(53) BroadcastExchange
Input [6]: [i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#13]
Join condition: None

(55) Project [codegen id : 6]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_item_sk#13, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18]

(56) ReusedExchange [Reuses operator id: 25]
Output [4]: [c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]

(57) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#19]
Join condition: None

(58) Project [codegen id : 6]
Output [12]: [ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, c_birth_country#22]
Input [14]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_customer_sk#19, c_first_name#20, c_last_name#21, c_birth_country#22]

(59) ReusedExchange [Reuses operator id: 31]
Output [3]: [ca_state#23, ca_zip#24, ca_country#25]

(60) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [c_birth_country#22, s_zip#12]
Right keys [2]: [upper(ca_country#25), ca_zip#24]
Join condition: None

(61) Project [codegen id : 6]
Output [11]: [ss_net_paid#5, s_store_name#9, s_state#11, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, ca_state#23]
Input [15]: [ss_net_paid#5, s_store_name#9, s_state#11, s_zip#12, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, c_birth_country#22, ca_state#23, ca_zip#24, ca_country#25]

(62) HashAggregate [codegen id : 6]
Input [11]: [ss_net_paid#5, s_store_name#9, s_state#11, i_current_price#14, i_size#15, i_color#16, i_units#17, i_manager_id#18, c_first_name#20, c_last_name#21, ca_state#23]
Keys [10]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#38]
Results [11]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, sum#39]

(63) Exchange
Input [11]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, sum#39]
Arguments: hashpartitioning(c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(64) HashAggregate [codegen id : 7]
Input [11]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15, sum#39]
Keys [10]: [c_last_name#21, c_first_name#20, s_store_name#9, ca_state#23, s_state#11, i_color#16, i_current_price#14, i_manager_id#18, i_units#17, i_size#15]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#28]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#28,17,2) AS netpaid#29]

(65) HashAggregate [codegen id : 7]
Input [1]: [netpaid#29]
Keys: []
Functions [1]: [partial_avg(netpaid#29)]
Aggregate Attributes [2]: [sum#40, count#41]
Results [2]: [sum#42, count#43]

(66) Exchange
Input [2]: [sum#42, count#43]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(67) HashAggregate [codegen id : 8]
Input [2]: [sum#42, count#43]
Keys: []
Functions [1]: [avg(netpaid#29)]
Aggregate Attributes [1]: [avg(netpaid#29)#44]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#29)#44)), DecimalType(24,8)) AS (0.05 * avg(netpaid))#45]


