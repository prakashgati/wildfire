== Physical Plan ==
TakeOrderedAndProject (34)
+- * Project (33)
   +- * BroadcastHashJoin Inner BuildRight (32)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :- * Project (21)
      :     :  +- * BroadcastHashJoin Inner BuildRight (20)
      :     :     :- * Project (15)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
      :     :     :     :- * Project (9)
      :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :     :- * Project (3)
      :     :     :     :     :  +- * Filter (2)
      :     :     :     :     :     +- BatchScan spark_catalog.default.customer (1)
      :     :     :     :     +- BroadcastExchange (7)
      :     :     :     :        +- * Project (6)
      :     :     :     :           +- * Filter (5)
      :     :     :     :              +- BatchScan spark_catalog.default.customer_address (4)
      :     :     :     +- BroadcastExchange (13)
      :     :     :        +- * Project (12)
      :     :     :           +- * Filter (11)
      :     :     :              +- BatchScan spark_catalog.default.customer_demographics (10)
      :     :     +- BroadcastExchange (19)
      :     :        +- * Project (18)
      :     :           +- * Filter (17)
      :     :              +- BatchScan spark_catalog.default.household_demographics (16)
      :     +- BroadcastExchange (25)
      :        +- * Project (24)
      :           +- * Filter (23)
      :              +- BatchScan spark_catalog.default.income_band (22)
      +- BroadcastExchange (31)
         +- * Project (30)
            +- * Filter (29)
               +- BatchScan spark_catalog.default.store_returns (28)


(1) BatchScan spark_catalog.default.customer
Output [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_current_addr_sk IS NOT NULL, c_current_cdemo_sk IS NOT NULL, c_current_hdemo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 6]
Input [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]
Condition : ((isnotnull(c_current_addr_sk#4) AND isnotnull(c_current_cdemo_sk#2)) AND isnotnull(c_current_hdemo_sk#3))

(3) Project [codegen id : 6]
Output [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]
Input [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]

(4) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_city#8]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_city IS NOT NULL, ca_city = 'Edgewood', ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [ca_address_sk#7, ca_city#8]
Condition : ((isnotnull(ca_city#8) AND (ca_city#8 = Edgewood)) AND isnotnull(ca_address_sk#7))

(6) Project [codegen id : 1]
Output [1]: [ca_address_sk#7]
Input [2]: [ca_address_sk#7, ca_city#8]

(7) BroadcastExchange
Input [1]: [ca_address_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_addr_sk#4]
Right keys [1]: [ca_address_sk#7]
Join condition: None

(9) Project [codegen id : 6]
Output [5]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_first_name#5, c_last_name#6]
Input [7]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6, ca_address_sk#7]

(10) BatchScan spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#9]
spark_catalog.default.customer_demographics [scan class = SparkBatchQueryScan] [filters=cd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [1]: [cd_demo_sk#9]
Condition : isnotnull(cd_demo_sk#9)

(12) Project [codegen id : 2]
Output [1]: [cd_demo_sk#9]
Input [1]: [cd_demo_sk#9]

(13) BroadcastExchange
Input [1]: [cd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#9]
Join condition: None

(15) Project [codegen id : 6]
Output [5]: [c_customer_id#1, c_current_hdemo_sk#3, c_first_name#5, c_last_name#6, cd_demo_sk#9]
Input [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_first_name#5, c_last_name#6, cd_demo_sk#9]

(16) BatchScan spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#10, hd_income_band_sk#11]
spark_catalog.default.household_demographics [scan class = SparkBatchQueryScan] [filters=hd_demo_sk IS NOT NULL, hd_income_band_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(17) Filter [codegen id : 3]
Input [2]: [hd_demo_sk#10, hd_income_band_sk#11]
Condition : (isnotnull(hd_demo_sk#10) AND isnotnull(hd_income_band_sk#11))

(18) Project [codegen id : 3]
Output [2]: [hd_demo_sk#10, hd_income_band_sk#11]
Input [2]: [hd_demo_sk#10, hd_income_band_sk#11]

(19) BroadcastExchange
Input [2]: [hd_demo_sk#10, hd_income_band_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#10]
Join condition: None

(21) Project [codegen id : 6]
Output [5]: [c_customer_id#1, c_first_name#5, c_last_name#6, cd_demo_sk#9, hd_income_band_sk#11]
Input [7]: [c_customer_id#1, c_current_hdemo_sk#3, c_first_name#5, c_last_name#6, cd_demo_sk#9, hd_demo_sk#10, hd_income_band_sk#11]

(22) BatchScan spark_catalog.default.income_band
Output [3]: [ib_income_band_sk#12, ib_lower_bound#13, ib_upper_bound#14]
spark_catalog.default.income_band [scan class = SparkBatchQueryScan] [filters=ib_lower_bound IS NOT NULL, ib_upper_bound IS NOT NULL, ib_lower_bound >= 38128, ib_upper_bound <= 88128, ib_income_band_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 4]
Input [3]: [ib_income_band_sk#12, ib_lower_bound#13, ib_upper_bound#14]
Condition : ((((isnotnull(ib_lower_bound#13) AND isnotnull(ib_upper_bound#14)) AND (ib_lower_bound#13 >= 38128)) AND (ib_upper_bound#14 <= 88128)) AND isnotnull(ib_income_band_sk#12))

(24) Project [codegen id : 4]
Output [1]: [ib_income_band_sk#12]
Input [3]: [ib_income_band_sk#12, ib_lower_bound#13, ib_upper_bound#14]

(25) BroadcastExchange
Input [1]: [ib_income_band_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [hd_income_band_sk#11]
Right keys [1]: [ib_income_band_sk#12]
Join condition: None

(27) Project [codegen id : 6]
Output [4]: [c_customer_id#1, c_first_name#5, c_last_name#6, cd_demo_sk#9]
Input [6]: [c_customer_id#1, c_first_name#5, c_last_name#6, cd_demo_sk#9, hd_income_band_sk#11, ib_income_band_sk#12]

(28) BatchScan spark_catalog.default.store_returns
Output [1]: [sr_cdemo_sk#15]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_cdemo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 5]
Input [1]: [sr_cdemo_sk#15]
Condition : isnotnull(sr_cdemo_sk#15)

(30) Project [codegen id : 5]
Output [1]: [sr_cdemo_sk#15]
Input [1]: [sr_cdemo_sk#15]

(31) BroadcastExchange
Input [1]: [sr_cdemo_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cd_demo_sk#9]
Right keys [1]: [sr_cdemo_sk#15]
Join condition: None

(33) Project [codegen id : 6]
Output [3]: [c_customer_id#1 AS customer_id#16, concat(c_last_name#6, , , c_first_name#5) AS customername#17, c_customer_id#1]
Input [5]: [c_customer_id#1, c_first_name#5, c_last_name#6, cd_demo_sk#9, sr_cdemo_sk#15]

(34) TakeOrderedAndProject
Input [3]: [customer_id#16, customername#17, c_customer_id#1]
Arguments: 100, [c_customer_id#1 ASC NULLS FIRST], [customer_id#16, customername#17]

