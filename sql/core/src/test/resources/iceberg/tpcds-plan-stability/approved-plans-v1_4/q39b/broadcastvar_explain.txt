== Physical Plan ==
* Sort (50)
+- Exchange (49)
   +- * BroadcastHashJoin Inner BuildRight (48)
      :- * Project (23)
      :  +- * Filter (22)
      :     +- * HashAggregate (21)
      :        +- Exchange (20)
      :           +- * HashAggregate (19)
      :              +- * Project (18)
      :                 +- * BroadcastHashJoin Inner BuildRight (17)
      :                    :- * Project (15)
      :                    :  +- * BroadcastHashJoin Inner BuildRight (14)
      :                    :     :- * Project (9)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :                    :     :     :- * Project (3)
      :                    :     :     :  +- * Filter (2)
      :                    :     :     :     +- BatchScan spark_catalog.default.inventory (1)
      :                    :     :     +- BroadcastExchange (7)
      :                    :     :        +- * Project (6)
      :                    :     :           +- * Filter (5)
      :                    :     :              +- BatchScan spark_catalog.default.item (4)
      :                    :     +- BroadcastExchange (13)
      :                    :        +- * Project (12)
      :                    :           +- * Filter (11)
      :                    :              +- BatchScan spark_catalog.default.warehouse (10)
      :                    +- ReusedExchange (16)
      +- BroadcastExchange (47)
         +- * Project (46)
            +- * Filter (45)
               +- * HashAggregate (44)
                  +- Exchange (43)
                     +- * HashAggregate (42)
                        +- * Project (41)
                           +- * BroadcastHashJoin Inner BuildRight (40)
                              :- * Project (38)
                              :  +- * BroadcastHashJoin Inner BuildRight (37)
                              :     :- * Project (32)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (31)
                              :     :     :- * Project (26)
                              :     :     :  +- * Filter (25)
                              :     :     :     +- BatchScan spark_catalog.default.inventory (24)
                              :     :     +- BroadcastExchange (30)
                              :     :        +- * Project (29)
                              :     :           +- * Filter (28)
                              :     :              +- BatchScan spark_catalog.default.item (27)
                              :     +- BroadcastExchange (36)
                              :        +- * Project (35)
                              :           +- * Filter (34)
                              :              +- BatchScan spark_catalog.default.warehouse (33)
                              +- ReusedExchange (39)


(1) BatchScan spark_catalog.default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
spark_catalog.default.inventory [scan class = SparkBatchQueryScan] [filters=inv_item_sk IS NOT NULL, inv_warehouse_sk IS NOT NULL, inv_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_item_sk#2) AND isnotnull(inv_warehouse_sk#3)) AND isnotnull(inv_date_sk#1))

(3) Project [codegen id : 4]
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(4) BatchScan spark_catalog.default.item
Output [1]: [i_item_sk#5]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [1]: [i_item_sk#5]
Condition : isnotnull(i_item_sk#5)

(6) Project [codegen id : 1]
Output [1]: [i_item_sk#5]
Input [1]: [i_item_sk#5]

(7) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [inv_date_sk#1, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#5]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#5]

(10) BatchScan spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#6, w_warehouse_name#7]
spark_catalog.default.warehouse [scan class = SparkBatchQueryScan] [filters=w_warehouse_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Condition : isnotnull(w_warehouse_sk#6)

(12) Project [codegen id : 2]
Output [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Input [2]: [w_warehouse_sk#6, w_warehouse_name#7]

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#6]
Join condition: None

(15) Project [codegen id : 4]
Output [5]: [inv_date_sk#1, inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7]
Input [6]: [inv_date_sk#1, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7]

(16) ReusedExchange [Reuses operator id: 54]
Output [2]: [d_date_sk#8, d_moy#9]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#8]
Join condition: None

(18) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_moy#9]
Input [7]: [inv_date_sk#1, inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_date_sk#8, d_moy#9]

(19) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_moy#9]
Keys [4]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#9]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#4 as double)), partial_avg(inv_quantity_on_hand#4)]
Aggregate Attributes [5]: [n#10, avg#11, m2#12, sum#13, count#14]
Results [9]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#9, n#15, avg#16, m2#17, sum#18, count#19]

(20) Exchange
Input [9]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#9, n#15, avg#16, m2#17, sum#18, count#19]
Arguments: hashpartitioning(w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 10]
Input [9]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#9, n#15, avg#16, m2#17, sum#18, count#19]
Keys [4]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#9]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double)), avg(inv_quantity_on_hand#4)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double))#20, avg(inv_quantity_on_hand#4)#21]
Results [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#9, stddev_samp(cast(inv_quantity_on_hand#4 as double))#20 AS stdev#22, avg(inv_quantity_on_hand#4)#21 AS mean#23]

(22) Filter [codegen id : 10]
Input [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#9, stdev#22, mean#23]
Condition : (CASE WHEN (mean#23 = 0.0) THEN false ELSE ((stdev#22 / mean#23) > 1.0) END AND CASE WHEN (mean#23 = 0.0) THEN false ELSE ((stdev#22 / mean#23) > 1.5) END)

(23) Project [codegen id : 10]
Output [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#9, mean#23, CASE WHEN (mean#23 = 0.0) THEN null ELSE (stdev#22 / mean#23) END AS cov#24]
Input [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#9, stdev#22, mean#23]

(24) BatchScan spark_catalog.default.inventory
Output [4]: [inv_date_sk#25, inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28]
spark_catalog.default.inventory [scan class = SparkBatchQueryScan] [filters=inv_item_sk IS NOT NULL, inv_warehouse_sk IS NOT NULL, inv_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(25) Filter [codegen id : 8]
Input [4]: [inv_date_sk#25, inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28]
Condition : ((isnotnull(inv_item_sk#26) AND isnotnull(inv_warehouse_sk#27)) AND isnotnull(inv_date_sk#25))

(26) Project [codegen id : 8]
Output [4]: [inv_date_sk#25, inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28]
Input [4]: [inv_date_sk#25, inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28]

(27) BatchScan spark_catalog.default.item
Output [1]: [i_item_sk#29]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(28) Filter [codegen id : 5]
Input [1]: [i_item_sk#29]
Condition : isnotnull(i_item_sk#29)

(29) Project [codegen id : 5]
Output [1]: [i_item_sk#29]
Input [1]: [i_item_sk#29]

(30) BroadcastExchange
Input [1]: [i_item_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(31) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_item_sk#26]
Right keys [1]: [i_item_sk#29]
Join condition: None

(32) Project [codegen id : 8]
Output [4]: [inv_date_sk#25, inv_warehouse_sk#27, inv_quantity_on_hand#28, i_item_sk#29]
Input [5]: [inv_date_sk#25, inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, i_item_sk#29]

(33) BatchScan spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#30, w_warehouse_name#31]
spark_catalog.default.warehouse [scan class = SparkBatchQueryScan] [filters=w_warehouse_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(34) Filter [codegen id : 6]
Input [2]: [w_warehouse_sk#30, w_warehouse_name#31]
Condition : isnotnull(w_warehouse_sk#30)

(35) Project [codegen id : 6]
Output [2]: [w_warehouse_sk#30, w_warehouse_name#31]
Input [2]: [w_warehouse_sk#30, w_warehouse_name#31]

(36) BroadcastExchange
Input [2]: [w_warehouse_sk#30, w_warehouse_name#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_warehouse_sk#27]
Right keys [1]: [w_warehouse_sk#30]
Join condition: None

(38) Project [codegen id : 8]
Output [5]: [inv_date_sk#25, inv_quantity_on_hand#28, i_item_sk#29, w_warehouse_sk#30, w_warehouse_name#31]
Input [6]: [inv_date_sk#25, inv_warehouse_sk#27, inv_quantity_on_hand#28, i_item_sk#29, w_warehouse_sk#30, w_warehouse_name#31]

(39) ReusedExchange [Reuses operator id: 58]
Output [2]: [d_date_sk#32, d_moy#33]

(40) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_date_sk#25]
Right keys [1]: [d_date_sk#32]
Join condition: None

(41) Project [codegen id : 8]
Output [5]: [inv_quantity_on_hand#28, i_item_sk#29, w_warehouse_sk#30, w_warehouse_name#31, d_moy#33]
Input [7]: [inv_date_sk#25, inv_quantity_on_hand#28, i_item_sk#29, w_warehouse_sk#30, w_warehouse_name#31, d_date_sk#32, d_moy#33]

(42) HashAggregate [codegen id : 8]
Input [5]: [inv_quantity_on_hand#28, i_item_sk#29, w_warehouse_sk#30, w_warehouse_name#31, d_moy#33]
Keys [4]: [w_warehouse_name#31, w_warehouse_sk#30, i_item_sk#29, d_moy#33]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#28 as double)), partial_avg(inv_quantity_on_hand#28)]
Aggregate Attributes [5]: [n#34, avg#35, m2#36, sum#37, count#38]
Results [9]: [w_warehouse_name#31, w_warehouse_sk#30, i_item_sk#29, d_moy#33, n#39, avg#40, m2#41, sum#42, count#43]

(43) Exchange
Input [9]: [w_warehouse_name#31, w_warehouse_sk#30, i_item_sk#29, d_moy#33, n#39, avg#40, m2#41, sum#42, count#43]
Arguments: hashpartitioning(w_warehouse_name#31, w_warehouse_sk#30, i_item_sk#29, d_moy#33, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(44) HashAggregate [codegen id : 9]
Input [9]: [w_warehouse_name#31, w_warehouse_sk#30, i_item_sk#29, d_moy#33, n#39, avg#40, m2#41, sum#42, count#43]
Keys [4]: [w_warehouse_name#31, w_warehouse_sk#30, i_item_sk#29, d_moy#33]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#28 as double)), avg(inv_quantity_on_hand#28)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#28 as double))#20, avg(inv_quantity_on_hand#28)#21]
Results [5]: [w_warehouse_sk#30, i_item_sk#29, d_moy#33, stddev_samp(cast(inv_quantity_on_hand#28 as double))#20 AS stdev#22, avg(inv_quantity_on_hand#28)#21 AS mean#23]

(45) Filter [codegen id : 9]
Input [5]: [w_warehouse_sk#30, i_item_sk#29, d_moy#33, stdev#22, mean#23]
Condition : CASE WHEN (mean#23 = 0.0) THEN false ELSE ((stdev#22 / mean#23) > 1.0) END

(46) Project [codegen id : 9]
Output [5]: [w_warehouse_sk#30, i_item_sk#29, d_moy#33, mean#23 AS mean#44, CASE WHEN (mean#23 = 0.0) THEN null ELSE (stdev#22 / mean#23) END AS cov#45]
Input [5]: [w_warehouse_sk#30, i_item_sk#29, d_moy#33, stdev#22, mean#23]

(47) BroadcastExchange
Input [5]: [w_warehouse_sk#30, i_item_sk#29, d_moy#33, mean#44, cov#45]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=7]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [i_item_sk#5, w_warehouse_sk#6]
Right keys [2]: [i_item_sk#29, w_warehouse_sk#30]
Join condition: None

(49) Exchange
Input [10]: [w_warehouse_sk#6, i_item_sk#5, d_moy#9, mean#23, cov#24, w_warehouse_sk#30, i_item_sk#29, d_moy#33, mean#44, cov#45]
Arguments: rangepartitioning(w_warehouse_sk#6 ASC NULLS FIRST, i_item_sk#5 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, mean#23 ASC NULLS FIRST, cov#24 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST, mean#44 ASC NULLS FIRST, cov#45 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(50) Sort [codegen id : 11]
Input [10]: [w_warehouse_sk#6, i_item_sk#5, d_moy#9, mean#23, cov#24, w_warehouse_sk#30, i_item_sk#29, d_moy#33, mean#44, cov#45]
Arguments: [w_warehouse_sk#6 ASC NULLS FIRST, i_item_sk#5 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, mean#23 ASC NULLS FIRST, cov#24 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST, mean#44 ASC NULLS FIRST, cov#45 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#1 IN dynamicpruning#46
BroadcastExchange (54)
+- * Project (53)
   +- * Filter (52)
      +- BatchScan spark_catalog.default.date_dim (51)


(51) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#8, d_year#47, d_moy#9]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_moy IS NOT NULL, d_year = 2001, d_moy = 1, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(52) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#47, d_moy#9]
Condition : ((((isnotnull(d_year#47) AND isnotnull(d_moy#9)) AND (d_year#47 = 2001)) AND (d_moy#9 = 1)) AND isnotnull(d_date_sk#8))

(53) Project [codegen id : 1]
Output [2]: [d_date_sk#8, d_moy#9]
Input [3]: [d_date_sk#8, d_year#47, d_moy#9]

(54) BroadcastExchange
Input [2]: [d_date_sk#8, d_moy#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 24 Hosting Expression = inv_date_sk#25 IN dynamicpruning#48
BroadcastExchange (58)
+- * Project (57)
   +- * Filter (56)
      +- BatchScan spark_catalog.default.date_dim (55)


(55) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#32, d_year#49, d_moy#33]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_moy IS NOT NULL, d_year = 2001, d_moy = 2, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(56) Filter [codegen id : 1]
Input [3]: [d_date_sk#32, d_year#49, d_moy#33]
Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#33)) AND (d_year#49 = 2001)) AND (d_moy#33 = 2)) AND isnotnull(d_date_sk#32))

(57) Project [codegen id : 1]
Output [2]: [d_date_sk#32, d_moy#33]
Input [3]: [d_date_sk#32, d_year#49, d_moy#33]

(58) BroadcastExchange
Input [2]: [d_date_sk#32, d_moy#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]


