== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * BroadcastHashJoin Inner BuildRight (49)
      :- * Project (44)
      :  +- * BroadcastHashJoin Inner BuildRight (43)
      :     :- * Project (38)
      :     :  +- * BroadcastHashJoin Inner BuildRight (37)
      :     :     :- * Filter (16)
      :     :     :  +- * HashAggregate (15)
      :     :     :     +- Exchange (14)
      :     :     :        +- * HashAggregate (13)
      :     :     :           +- * Project (12)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :                 :- * Project (6)
      :     :     :                 :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                 :     :- * Project (3)
      :     :     :                 :     :  +- * Filter (2)
      :     :     :                 :     :     +- BatchScan spark_catalog.default.web_returns (1)
      :     :     :                 :     +- ReusedExchange (4)
      :     :     :                 +- BroadcastExchange (10)
      :     :     :                    +- * Project (9)
      :     :     :                       +- * Filter (8)
      :     :     :                          +- BatchScan spark_catalog.default.customer_address (7)
      :     :     +- BroadcastExchange (36)
      :     :        +- * Filter (35)
      :     :           +- * HashAggregate (34)
      :     :              +- Exchange (33)
      :     :                 +- * HashAggregate (32)
      :     :                    +- * HashAggregate (31)
      :     :                       +- Exchange (30)
      :     :                          +- * HashAggregate (29)
      :     :                             +- * Project (28)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                                   :- * Project (22)
      :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (21)
      :     :                                   :     :- * Project (19)
      :     :                                   :     :  +- * Filter (18)
      :     :                                   :     :     +- BatchScan spark_catalog.default.web_returns (17)
      :     :                                   :     +- ReusedExchange (20)
      :     :                                   +- BroadcastExchange (26)
      :     :                                      +- * Project (25)
      :     :                                         +- * Filter (24)
      :     :                                            +- BatchScan spark_catalog.default.customer_address (23)
      :     +- BroadcastExchange (42)
      :        +- * Project (41)
      :           +- * Filter (40)
      :              +- BatchScan spark_catalog.default.customer (39)
      +- BroadcastExchange (48)
         +- * Project (47)
            +- * Filter (46)
               +- BatchScan spark_catalog.default.customer_address (45)


(1) BatchScan spark_catalog.default.web_returns
Output [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_returned_date_sk IS NOT NULL, wr_returning_addr_sk IS NOT NULL, wr_returning_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
Condition : ((isnotnull(wr_returned_date_sk#1) AND isnotnull(wr_returning_addr_sk#3)) AND isnotnull(wr_returning_customer_sk#2))

(3) Project [codegen id : 3]
Output [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
Input [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]

(4) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
Input [5]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4, d_date_sk#5]

(7) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#6, ca_state#7]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL, ca_state IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [2]: [ca_address_sk#6, ca_state#7]
Condition : (isnotnull(ca_address_sk#6) AND isnotnull(ca_state#7))

(9) Project [codegen id : 2]
Output [2]: [ca_address_sk#6, ca_state#7]
Input [2]: [ca_address_sk#6, ca_state#7]

(10) BroadcastExchange
Input [2]: [ca_address_sk#6, ca_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#2, wr_return_amt#4, ca_state#7]
Input [5]: [wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4, ca_address_sk#6, ca_state#7]

(13) HashAggregate [codegen id : 3]
Input [3]: [wr_returning_customer_sk#2, wr_return_amt#4, ca_state#7]
Keys [2]: [wr_returning_customer_sk#2, ca_state#7]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#4))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [wr_returning_customer_sk#2, ca_state#7, sum#9]

(14) Exchange
Input [3]: [wr_returning_customer_sk#2, ca_state#7, sum#9]
Arguments: hashpartitioning(wr_returning_customer_sk#2, ca_state#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 11]
Input [3]: [wr_returning_customer_sk#2, ca_state#7, sum#9]
Keys [2]: [wr_returning_customer_sk#2, ca_state#7]
Functions [1]: [sum(UnscaledValue(wr_return_amt#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#4))#10]
Results [3]: [wr_returning_customer_sk#2 AS ctr_customer_sk#11, ca_state#7 AS ctr_state#12, MakeDecimal(sum(UnscaledValue(wr_return_amt#4))#10,17,2) AS ctr_total_return#13]

(16) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13]
Condition : isnotnull(ctr_total_return#13)

(17) BatchScan spark_catalog.default.web_returns
Output [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_returned_date_sk IS NOT NULL, wr_returning_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(18) Filter [codegen id : 6]
Input [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
Condition : (isnotnull(wr_returned_date_sk#1) AND isnotnull(wr_returning_addr_sk#3))

(19) Project [codegen id : 6]
Output [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
Input [4]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]

(20) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#5]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(22) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4]
Input [5]: [wr_returned_date_sk#1, wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4, d_date_sk#5]

(23) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#6, ca_state#7]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 5]
Input [2]: [ca_address_sk#6, ca_state#7]
Condition : (isnotnull(ca_address_sk#6) AND isnotnull(ca_state#7))

(25) Project [codegen id : 5]
Output [2]: [ca_address_sk#6, ca_state#7]
Input [2]: [ca_address_sk#6, ca_state#7]

(26) BroadcastExchange
Input [2]: [ca_address_sk#6, ca_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#2, wr_return_amt#4, ca_state#7]
Input [5]: [wr_returning_customer_sk#2, wr_returning_addr_sk#3, wr_return_amt#4, ca_address_sk#6, ca_state#7]

(29) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#2, wr_return_amt#4, ca_state#7]
Keys [2]: [wr_returning_customer_sk#2, ca_state#7]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#4))]
Aggregate Attributes [1]: [sum#14]
Results [3]: [wr_returning_customer_sk#2, ca_state#7, sum#15]

(30) Exchange
Input [3]: [wr_returning_customer_sk#2, ca_state#7, sum#15]
Arguments: hashpartitioning(wr_returning_customer_sk#2, ca_state#7, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 7]
Input [3]: [wr_returning_customer_sk#2, ca_state#7, sum#15]
Keys [2]: [wr_returning_customer_sk#2, ca_state#7]
Functions [1]: [sum(UnscaledValue(wr_return_amt#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#4))#10]
Results [2]: [ca_state#7 AS ctr_state#12, MakeDecimal(sum(UnscaledValue(wr_return_amt#4))#10,17,2) AS ctr_total_return#13]

(32) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#12, ctr_total_return#13]
Keys [1]: [ctr_state#12]
Functions [1]: [partial_avg(ctr_total_return#13)]
Aggregate Attributes [2]: [sum#16, count#17]
Results [3]: [ctr_state#12, sum#18, count#19]

(33) Exchange
Input [3]: [ctr_state#12, sum#18, count#19]
Arguments: hashpartitioning(ctr_state#12, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#12, sum#18, count#19]
Keys [1]: [ctr_state#12]
Functions [1]: [avg(ctr_total_return#13)]
Aggregate Attributes [1]: [avg(ctr_total_return#13)#20]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#13)#20) * 1.200000), DecimalType(24,7)) AS (avg(ctr_total_return) * 1.2)#21, ctr_state#12 AS ctr_state#12#22]

(35) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#21, ctr_state#12#22]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#21)

(36) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#21, ctr_state#12#22]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=6]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#12]
Right keys [1]: [ctr_state#12#22]
Join condition: (cast(ctr_total_return#13 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#21)

(38) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#11, ctr_total_return#13]
Input [5]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13, (avg(ctr_total_return) * 1.2)#21, ctr_state#12#22]

(39) BatchScan spark_catalog.default.customer
Output [14]: [c_customer_sk#23, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(40) Filter [codegen id : 9]
Input [14]: [c_customer_sk#23, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]
Condition : (isnotnull(c_customer_sk#23) AND isnotnull(c_current_addr_sk#25))

(41) Project [codegen id : 9]
Output [14]: [c_customer_sk#23, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]
Input [14]: [c_customer_sk#23, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]

(42) BroadcastExchange
Input [14]: [c_customer_sk#23, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#11]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(44) Project [codegen id : 11]
Output [14]: [ctr_total_return#13, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]
Input [16]: [ctr_customer_sk#11, ctr_total_return#13, c_customer_sk#23, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36]

(45) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#37, ca_state#38]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_state IS NOT NULL, ca_state = 'GA', ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(46) Filter [codegen id : 10]
Input [2]: [ca_address_sk#37, ca_state#38]
Condition : ((isnotnull(ca_state#38) AND (ca_state#38 = GA)) AND isnotnull(ca_address_sk#37))

(47) Project [codegen id : 10]
Output [1]: [ca_address_sk#37]
Input [2]: [ca_address_sk#37, ca_state#38]

(48) BroadcastExchange
Input [1]: [ca_address_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#25]
Right keys [1]: [ca_address_sk#37]
Join condition: None

(50) Project [codegen id : 11]
Output [13]: [c_customer_id#24, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36, ctr_total_return#13]
Input [15]: [ctr_total_return#13, c_customer_id#24, c_current_addr_sk#25, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36, ca_address_sk#37]

(51) TakeOrderedAndProject
Input [13]: [c_customer_id#24, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36, ctr_total_return#13]
Arguments: 100, [c_customer_id#24 ASC NULLS FIRST, c_salutation#26 ASC NULLS FIRST, c_first_name#27 ASC NULLS FIRST, c_last_name#28 ASC NULLS FIRST, c_preferred_cust_flag#29 ASC NULLS FIRST, c_birth_day#30 ASC NULLS FIRST, c_birth_month#31 ASC NULLS FIRST, c_birth_year#32 ASC NULLS FIRST, c_birth_country#33 ASC NULLS FIRST, c_login#34 ASC NULLS FIRST, c_email_address#35 ASC NULLS FIRST, c_last_review_date#36 ASC NULLS FIRST, ctr_total_return#13 ASC NULLS FIRST], [c_customer_id#24, c_salutation#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_day#30, c_birth_month#31, c_birth_year#32, c_birth_country#33, c_login#34, c_email_address#35, c_last_review_date#36, ctr_total_return#13]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#1 IN dynamicpruning#39
BroadcastExchange (55)
+- * Project (54)
   +- * Filter (53)
      +- BatchScan spark_catalog.default.date_dim (52)


(52) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_year#40]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2002, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(53) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#40]
Condition : ((isnotnull(d_year#40) AND (d_year#40 = 2002)) AND isnotnull(d_date_sk#5))

(54) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_year#40]

(55) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 17 Hosting Expression = wr_returned_date_sk#1 IN dynamicpruning#39


