== Physical Plan ==
* HashAggregate (46)
+- Exchange (45)
   +- * HashAggregate (44)
      +- * HashAggregate (43)
         +- Exchange (42)
            +- * HashAggregate (41)
               +- * Project (40)
                  +- * BroadcastHashJoin Inner BuildRight (39)
                     :- * Project (34)
                     :  +- * BroadcastHashJoin Inner BuildRight (33)
                     :     :- * Project (28)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (27)
                     :     :     :- * BroadcastHashJoin LeftSemi BuildRight (22)
                     :     :     :  :- * BroadcastHashJoin LeftSemi BuildRight (14)
                     :     :     :  :  :- * Project (3)
                     :     :     :  :  :  +- * Filter (2)
                     :     :     :  :  :     +- BatchScan spark_catalog.default.web_sales (1)
                     :     :     :  :  +- BroadcastExchange (13)
                     :     :     :  :     +- * Project (12)
                     :     :     :  :        +- * BroadcastHashJoin Inner BuildRight (11)
                     :     :     :  :           :- * Project (6)
                     :     :     :  :           :  +- * Filter (5)
                     :     :     :  :           :     +- BatchScan spark_catalog.default.web_sales (4)
                     :     :     :  :           +- BroadcastExchange (10)
                     :     :     :  :              +- * Project (9)
                     :     :     :  :                 +- * Filter (8)
                     :     :     :  :                    +- BatchScan spark_catalog.default.web_sales (7)
                     :     :     :  +- BroadcastExchange (21)
                     :     :     :     +- * Project (20)
                     :     :     :        +- * BroadcastHashJoin Inner BuildRight (19)
                     :     :     :           :- * Project (17)
                     :     :     :           :  +- * Filter (16)
                     :     :     :           :     +- BatchScan spark_catalog.default.web_returns (15)
                     :     :     :           +- ReusedExchange (18)
                     :     :     +- BroadcastExchange (26)
                     :     :        +- * Project (25)
                     :     :           +- * Filter (24)
                     :     :              +- BatchScan spark_catalog.default.date_dim (23)
                     :     +- BroadcastExchange (32)
                     :        +- * Project (31)
                     :           +- * Filter (30)
                     :              +- BatchScan spark_catalog.default.customer_address (29)
                     +- BroadcastExchange (38)
                        +- * Project (37)
                           +- * Filter (36)
                              +- BatchScan spark_catalog.default.web_site (35)


(1) BatchScan spark_catalog.default.web_sales
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_ship_date_sk IS NOT NULL, ws_ship_addr_sk IS NOT NULL, ws_web_site_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 9]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(3) Project [codegen id : 9]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(4) BatchScan spark_catalog.default.web_sales
Output [2]: [ws_warehouse_sk#7, ws_order_number#8]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_order_number IS NOT NULL, ws_warehouse_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 2]
Input [2]: [ws_warehouse_sk#7, ws_order_number#8]
Condition : (isnotnull(ws_order_number#8) AND isnotnull(ws_warehouse_sk#7))

(6) Project [codegen id : 2]
Output [2]: [ws_warehouse_sk#7, ws_order_number#8]
Input [2]: [ws_warehouse_sk#7, ws_order_number#8]

(7) BatchScan spark_catalog.default.web_sales
Output [2]: [ws_warehouse_sk#9, ws_order_number#10]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_order_number IS NOT NULL, ws_warehouse_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 1]
Input [2]: [ws_warehouse_sk#9, ws_order_number#10]
Condition : (isnotnull(ws_order_number#10) AND isnotnull(ws_warehouse_sk#9))

(9) Project [codegen id : 1]
Output [2]: [ws_warehouse_sk#9, ws_order_number#10]
Input [2]: [ws_warehouse_sk#9, ws_order_number#10]

(10) BroadcastExchange
Input [2]: [ws_warehouse_sk#9, ws_order_number#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_order_number#8]
Right keys [1]: [ws_order_number#10]
Join condition: NOT (ws_warehouse_sk#7 = ws_warehouse_sk#9)

(12) Project [codegen id : 2]
Output [1]: [ws_order_number#8]
Input [4]: [ws_warehouse_sk#7, ws_order_number#8, ws_warehouse_sk#9, ws_order_number#10]

(13) BroadcastExchange
Input [1]: [ws_order_number#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#8]
Join condition: None

(15) BatchScan spark_catalog.default.web_returns
Output [1]: [wr_order_number#11]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_order_number IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(16) Filter [codegen id : 5]
Input [1]: [wr_order_number#11]
Condition : isnotnull(wr_order_number#11)

(17) Project [codegen id : 5]
Output [1]: [wr_order_number#11]
Input [1]: [wr_order_number#11]

(18) ReusedExchange [Reuses operator id: 13]
Output [1]: [ws_order_number#8]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [wr_order_number#11]
Right keys [1]: [ws_order_number#8]
Join condition: None

(20) Project [codegen id : 5]
Output [1]: [wr_order_number#11]
Input [2]: [wr_order_number#11, ws_order_number#8]

(21) BroadcastExchange
Input [1]: [wr_order_number#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [wr_order_number#11]
Join condition: None

(23) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#12, d_date#13]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date IS NOT NULL, d_date >= 10623, d_date <= 10683, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 6]
Input [2]: [d_date_sk#12, d_date#13]
Condition : (((isnotnull(d_date#13) AND (d_date#13 >= 1999-02-01)) AND (d_date#13 <= 1999-04-02)) AND isnotnull(d_date_sk#12))

(25) Project [codegen id : 6]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_date#13]

(26) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#12]
Join condition: None

(28) Project [codegen id : 9]
Output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#12]

(29) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#14, ca_state#15]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_state IS NOT NULL, ca_state = 'IL', ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(30) Filter [codegen id : 7]
Input [2]: [ca_address_sk#14, ca_state#15]
Condition : ((isnotnull(ca_state#15) AND (ca_state#15 = IL)) AND isnotnull(ca_address_sk#14))

(31) Project [codegen id : 7]
Output [1]: [ca_address_sk#14]
Input [2]: [ca_address_sk#14, ca_state#15]

(32) BroadcastExchange
Input [1]: [ca_address_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#14]
Join condition: None

(34) Project [codegen id : 9]
Output [4]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#14]

(35) BatchScan spark_catalog.default.web_site
Output [2]: [web_site_sk#16, web_company_name#17]
spark_catalog.default.web_site [scan class = SparkBatchQueryScan] [filters=web_company_name IS NOT NULL, web_company_name = 'pri', web_site_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(36) Filter [codegen id : 8]
Input [2]: [web_site_sk#16, web_company_name#17]
Condition : ((isnotnull(web_company_name#17) AND (web_company_name#17 = pri)) AND isnotnull(web_site_sk#16))

(37) Project [codegen id : 8]
Output [1]: [web_site_sk#16]
Input [2]: [web_site_sk#16, web_company_name#17]

(38) BroadcastExchange
Input [1]: [web_site_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#16]
Join condition: None

(40) Project [codegen id : 9]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#16]

(41) HashAggregate [codegen id : 9]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#18, sum(UnscaledValue(ws_net_profit#6))#19]
Results [3]: [ws_order_number#4, sum#20, sum#21]

(42) Exchange
Input [3]: [ws_order_number#4, sum#20, sum#21]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(43) HashAggregate [codegen id : 10]
Input [3]: [ws_order_number#4, sum#20, sum#21]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#18, sum(UnscaledValue(ws_net_profit#6))#19]
Results [3]: [ws_order_number#4, sum#20, sum#21]

(44) HashAggregate [codegen id : 10]
Input [3]: [ws_order_number#4, sum#20, sum#21]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#18, sum(UnscaledValue(ws_net_profit#6))#19, count(ws_order_number#4)#22]
Results [3]: [sum#20, sum#21, count#23]

(45) Exchange
Input [3]: [sum#20, sum#21, count#23]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(46) HashAggregate [codegen id : 11]
Input [3]: [sum#20, sum#21, count#23]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#18, sum(UnscaledValue(ws_net_profit#6))#19, count(ws_order_number#4)#22]
Results [3]: [count(ws_order_number#4)#22 AS order count #24, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#18,17,2) AS total shipping cost #25, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#19,17,2) AS total net profit #26]

