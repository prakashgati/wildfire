== Physical Plan ==
TakeOrderedAndProject (35)
+- * HashAggregate (34)
   +- Exchange (33)
      +- * HashAggregate (32)
         +- * Project (31)
            +- * Filter (30)
               +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (29)
                  :- * Project (24)
                  :  +- * BroadcastHashJoin Inner BuildRight (23)
                  :     :- * Project (18)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                  :     :     :- * Project (15)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :     :     :     :- * Project (9)
                  :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :     :- * Project (3)
                  :     :     :     :     :  +- * Filter (2)
                  :     :     :     :     :     +- BatchScan spark_catalog.default.web_sales (1)
                  :     :     :     :     +- BroadcastExchange (7)
                  :     :     :     :        +- * Project (6)
                  :     :     :     :           +- * Filter (5)
                  :     :     :     :              +- BatchScan spark_catalog.default.customer (4)
                  :     :     :     +- BroadcastExchange (13)
                  :     :     :        +- * Project (12)
                  :     :     :           +- * Filter (11)
                  :     :     :              +- BatchScan spark_catalog.default.customer_address (10)
                  :     :     +- ReusedExchange (16)
                  :     +- BroadcastExchange (22)
                  :        +- * Project (21)
                  :           +- * Filter (20)
                  :              +- BatchScan spark_catalog.default.item (19)
                  +- BroadcastExchange (28)
                     +- * Project (27)
                        +- * Filter (26)
                           +- BatchScan spark_catalog.default.item (25)


(1) BatchScan spark_catalog.default.web_sales
Output [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_bill_customer_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL, ws_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 6]
Input [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]
Condition : ((isnotnull(ws_bill_customer_sk#4) AND isnotnull(ws_sold_date_sk#2)) AND isnotnull(ws_item_sk#3))

(3) Project [codegen id : 6]
Output [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]
Input [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]

(4) BatchScan spark_catalog.default.customer
Output [2]: [c_customer_sk#6, c_current_addr_sk#7]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]
Condition : (isnotnull(c_customer_sk#6) AND isnotnull(c_current_addr_sk#7))

(6) Project [codegen id : 1]
Output [2]: [c_customer_sk#6, c_current_addr_sk#7]
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]

(7) BroadcastExchange
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_bill_customer_sk#4]
Right keys [1]: [c_customer_sk#6]
Join condition: None

(9) Project [codegen id : 6]
Output [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_sales_price#5, c_current_addr_sk#7]
Input [6]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5, c_customer_sk#6, c_current_addr_sk#7]

(10) BatchScan spark_catalog.default.customer_address
Output [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
Condition : isnotnull(ca_address_sk#8)

(12) Project [codegen id : 2]
Output [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
Input [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]

(13) BroadcastExchange
Input [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_addr_sk#7]
Right keys [1]: [ca_address_sk#8]
Join condition: None

(15) Project [codegen id : 6]
Output [5]: [ws_sold_date_sk#2, ws_item_sk#3, ws_sales_price#5, ca_city#9, ca_zip#10]
Input [7]: [ws_sold_date_sk#2, ws_item_sk#3, ws_sales_price#5, c_current_addr_sk#7, ca_address_sk#8, ca_city#9, ca_zip#10]

(16) ReusedExchange [Reuses operator id: 39]
Output [1]: [d_date_sk#11]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#2]
Right keys [1]: [d_date_sk#11]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [ws_item_sk#3, ws_sales_price#5, ca_city#9, ca_zip#10]
Input [6]: [ws_sold_date_sk#2, ws_item_sk#3, ws_sales_price#5, ca_city#9, ca_zip#10, d_date_sk#11]

(19) BatchScan spark_catalog.default.item
Output [2]: [i_item_sk#12, i_item_id#13]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]
Condition : isnotnull(i_item_sk#12)

(21) Project [codegen id : 4]
Output [2]: [i_item_sk#12, i_item_id#13]
Input [2]: [i_item_sk#12, i_item_id#13]

(22) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_id#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#3]
Right keys [1]: [i_item_sk#12]
Join condition: None

(24) Project [codegen id : 6]
Output [4]: [ws_sales_price#5, ca_city#9, ca_zip#10, i_item_id#13]
Input [6]: [ws_item_sk#3, ws_sales_price#5, ca_city#9, ca_zip#10, i_item_sk#12, i_item_id#13]

(25) BatchScan spark_catalog.default.item
Output [2]: [i_item_sk#14, i_item_id#15]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IN (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(26) Filter [codegen id : 5]
Input [2]: [i_item_sk#14, i_item_id#15]
Condition : i_item_sk#14 IN (2,3,5,7,11,13,17,19,23,29)

(27) Project [codegen id : 5]
Output [1]: [i_item_id#15]
Input [2]: [i_item_sk#14, i_item_id#15]

(28) BroadcastExchange
Input [1]: [i_item_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_id#13]
Right keys [1]: [i_item_id#15]
Join condition: None

(30) Filter [codegen id : 6]
Input [5]: [ws_sales_price#5, ca_city#9, ca_zip#10, i_item_id#13, exists#1]
Condition : (substr(ca_zip#10, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#1)

(31) Project [codegen id : 6]
Output [3]: [ws_sales_price#5, ca_city#9, ca_zip#10]
Input [5]: [ws_sales_price#5, ca_city#9, ca_zip#10, i_item_id#13, exists#1]

(32) HashAggregate [codegen id : 6]
Input [3]: [ws_sales_price#5, ca_city#9, ca_zip#10]
Keys [2]: [ca_zip#10, ca_city#9]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#5))]
Aggregate Attributes [1]: [sum#16]
Results [3]: [ca_zip#10, ca_city#9, sum#17]

(33) Exchange
Input [3]: [ca_zip#10, ca_city#9, sum#17]
Arguments: hashpartitioning(ca_zip#10, ca_city#9, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) HashAggregate [codegen id : 7]
Input [3]: [ca_zip#10, ca_city#9, sum#17]
Keys [2]: [ca_zip#10, ca_city#9]
Functions [1]: [sum(UnscaledValue(ws_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#5))#18]
Results [3]: [ca_zip#10, ca_city#9, MakeDecimal(sum(UnscaledValue(ws_sales_price#5))#18,17,2) AS sum(ws_sales_price)#19]

(35) TakeOrderedAndProject
Input [3]: [ca_zip#10, ca_city#9, sum(ws_sales_price)#19]
Arguments: 100, [ca_zip#10 ASC NULLS FIRST, ca_city#9 ASC NULLS FIRST], [ca_zip#10, ca_city#9, sum(ws_sales_price)#19]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#2 IN dynamicpruning#20
BroadcastExchange (39)
+- * Project (38)
   +- * Filter (37)
      +- BatchScan spark_catalog.default.date_dim (36)


(36) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#21, d_qoy#22]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_qoy IS NOT NULL, d_year IS NOT NULL, d_qoy = 2, d_year = 2001, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(37) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#21, d_qoy#22]
Condition : ((((isnotnull(d_qoy#22) AND isnotnull(d_year#21)) AND (d_qoy#22 = 2)) AND (d_year#21 = 2001)) AND isnotnull(d_date_sk#11))

(38) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#21, d_qoy#22]

(39) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


