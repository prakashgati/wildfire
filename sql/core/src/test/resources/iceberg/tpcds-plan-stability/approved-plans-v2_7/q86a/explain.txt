== Physical Plan ==
TakeOrderedAndProject (34)
+- * Project (33)
   +- Window (32)
      +- * Sort (31)
         +- Exchange (30)
            +- * HashAggregate (29)
               +- Exchange (28)
                  +- * HashAggregate (27)
                     +- Union (26)
                        :- * HashAggregate (15)
                        :  +- Exchange (14)
                        :     +- * HashAggregate (13)
                        :        +- * Project (12)
                        :           +- * BroadcastHashJoin Inner BuildRight (11)
                        :              :- * Project (6)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :     :- * Project (3)
                        :              :     :  +- * Filter (2)
                        :              :     :     +- BatchScan spark_catalog.default.web_sales (1)
                        :              :     +- ReusedExchange (4)
                        :              +- BroadcastExchange (10)
                        :                 +- * Project (9)
                        :                    +- * Filter (8)
                        :                       +- BatchScan spark_catalog.default.item (7)
                        :- * HashAggregate (20)
                        :  +- Exchange (19)
                        :     +- * HashAggregate (18)
                        :        +- * HashAggregate (17)
                        :           +- ReusedExchange (16)
                        +- * HashAggregate (25)
                           +- Exchange (24)
                              +- * HashAggregate (23)
                                 +- * HashAggregate (22)
                                    +- ReusedExchange (21)


(1) BatchScan spark_catalog.default.web_sales
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_net_paid#3]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_sold_date_sk IS NOT NULL, ws_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_net_paid#3]
Condition : (isnotnull(ws_sold_date_sk#1) AND isnotnull(ws_item_sk#2))

(3) Project [codegen id : 3]
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_net_paid#3]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_net_paid#3]

(4) ReusedExchange [Reuses operator id: 38]
Output [1]: [d_date_sk#4]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 3]
Output [2]: [ws_item_sk#2, ws_net_paid#3]
Input [4]: [ws_sold_date_sk#1, ws_item_sk#2, ws_net_paid#3, d_date_sk#4]

(7) BatchScan spark_catalog.default.item
Output [3]: [i_item_sk#5, i_class#6, i_category#7]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [3]: [i_item_sk#5, i_class#6, i_category#7]
Condition : isnotnull(i_item_sk#5)

(9) Project [codegen id : 2]
Output [3]: [i_item_sk#5, i_class#6, i_category#7]
Input [3]: [i_item_sk#5, i_class#6, i_category#7]

(10) BroadcastExchange
Input [3]: [i_item_sk#5, i_class#6, i_category#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [ws_net_paid#3, i_class#6, i_category#7]
Input [5]: [ws_item_sk#2, ws_net_paid#3, i_item_sk#5, i_class#6, i_category#7]

(13) HashAggregate [codegen id : 3]
Input [3]: [ws_net_paid#3, i_class#6, i_category#7]
Keys [2]: [i_category#7, i_class#6]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#3))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [i_category#7, i_class#6, sum#9]

(14) Exchange
Input [3]: [i_category#7, i_class#6, sum#9]
Arguments: hashpartitioning(i_category#7, i_class#6, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 4]
Input [3]: [i_category#7, i_class#6, sum#9]
Keys [2]: [i_category#7, i_class#6]
Functions [1]: [sum(UnscaledValue(ws_net_paid#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#3))#10]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ws_net_paid#3))#10,17,2) as decimal(27,2)) AS total_sum#11, i_category#7, i_class#6, 0 AS g_category#12, 0 AS g_class#13, 0 AS lochierarchy#14]

(16) ReusedExchange [Reuses operator id: 14]
Output [3]: [i_category#7, i_class#6, sum#15]

(17) HashAggregate [codegen id : 8]
Input [3]: [i_category#7, i_class#6, sum#15]
Keys [2]: [i_category#7, i_class#6]
Functions [1]: [sum(UnscaledValue(ws_net_paid#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#3))#10]
Results [2]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#3))#10,17,2) AS total_sum#16, i_category#7]

(18) HashAggregate [codegen id : 8]
Input [2]: [total_sum#16, i_category#7]
Keys [1]: [i_category#7]
Functions [1]: [partial_sum(total_sum#16)]
Aggregate Attributes [2]: [sum#17, isEmpty#18]
Results [3]: [i_category#7, sum#19, isEmpty#20]

(19) Exchange
Input [3]: [i_category#7, sum#19, isEmpty#20]
Arguments: hashpartitioning(i_category#7, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) HashAggregate [codegen id : 9]
Input [3]: [i_category#7, sum#19, isEmpty#20]
Keys [1]: [i_category#7]
Functions [1]: [sum(total_sum#16)]
Aggregate Attributes [1]: [sum(total_sum#16)#21]
Results [6]: [sum(total_sum#16)#21 AS total_sum#22, i_category#7, null AS i_class#23, 0 AS g_category#24, 1 AS g_class#25, 1 AS lochierarchy#26]

(21) ReusedExchange [Reuses operator id: 14]
Output [3]: [i_category#7, i_class#6, sum#27]

(22) HashAggregate [codegen id : 13]
Input [3]: [i_category#7, i_class#6, sum#27]
Keys [2]: [i_category#7, i_class#6]
Functions [1]: [sum(UnscaledValue(ws_net_paid#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#3))#10]
Results [1]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#3))#10,17,2) AS total_sum#16]

(23) HashAggregate [codegen id : 13]
Input [1]: [total_sum#16]
Keys: []
Functions [1]: [partial_sum(total_sum#16)]
Aggregate Attributes [2]: [sum#28, isEmpty#29]
Results [2]: [sum#30, isEmpty#31]

(24) Exchange
Input [2]: [sum#30, isEmpty#31]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=4]

(25) HashAggregate [codegen id : 14]
Input [2]: [sum#30, isEmpty#31]
Keys: []
Functions [1]: [sum(total_sum#16)]
Aggregate Attributes [1]: [sum(total_sum#16)#32]
Results [6]: [sum(total_sum#16)#32 AS total_sum#33, null AS i_category#34, null AS i_class#35, 1 AS g_category#36, 1 AS g_class#37, 2 AS lochierarchy#38]

(26) Union

(27) HashAggregate [codegen id : 15]
Input [6]: [total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14]
Keys [6]: [total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14]

(28) Exchange
Input [6]: [total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14]
Arguments: hashpartitioning(total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(29) HashAggregate [codegen id : 16]
Input [6]: [total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14]
Keys [6]: [total_sum#11, i_category#7, i_class#6, g_category#12, g_class#13, lochierarchy#14]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, CASE WHEN (g_class#13 = 0) THEN i_category#7 END AS _w0#39]

(30) Exchange
Input [5]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, _w0#39]
Arguments: hashpartitioning(lochierarchy#14, _w0#39, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(31) Sort [codegen id : 17]
Input [5]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, _w0#39]
Arguments: [lochierarchy#14 ASC NULLS FIRST, _w0#39 ASC NULLS FIRST, total_sum#11 DESC NULLS LAST], false, 0

(32) Window
Input [5]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, _w0#39]
Arguments: [rank(total_sum#11) windowspecdefinition(lochierarchy#14, _w0#39, total_sum#11 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#40], [lochierarchy#14, _w0#39], [total_sum#11 DESC NULLS LAST]

(33) Project [codegen id : 18]
Output [5]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, rank_within_parent#40]
Input [6]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, _w0#39, rank_within_parent#40]

(34) TakeOrderedAndProject
Input [5]: [total_sum#11, i_category#7, i_class#6, lochierarchy#14, rank_within_parent#40]
Arguments: 100, [lochierarchy#14 DESC NULLS LAST, CASE WHEN (lochierarchy#14 = 0) THEN i_category#7 END ASC NULLS FIRST, rank_within_parent#40 ASC NULLS FIRST], [total_sum#11, i_category#7, i_class#6, lochierarchy#14, rank_within_parent#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#1 IN dynamicpruning#41
BroadcastExchange (38)
+- * Project (37)
   +- * Filter (36)
      +- BatchScan spark_catalog.default.date_dim (35)


(35) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#42]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1212, d_month_seq <= 1223, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(36) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#42]
Condition : (((isnotnull(d_month_seq#42) AND (d_month_seq#42 >= 1212)) AND (d_month_seq#42 <= 1223)) AND isnotnull(d_date_sk#4))

(37) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#42]

(38) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


