== Physical Plan ==
TakeOrderedAndProject (43)
+- * HashAggregate (42)
   +- Exchange (41)
      +- * HashAggregate (40)
         +- * Project (39)
            +- * BroadcastHashJoin Inner BuildRight (38)
               :- * Project (33)
               :  +- * BroadcastHashJoin Inner BuildRight (32)
               :     :- * Project (27)
               :     :  +- * BroadcastHashJoin LeftSemi BuildRight (26)
               :     :     :- * BroadcastHashJoin LeftSemi BuildRight (11)
               :     :     :  :- * Project (3)
               :     :     :  :  +- * Filter (2)
               :     :     :  :     +- BatchScan spark_catalog.default.customer (1)
               :     :     :  +- BroadcastExchange (10)
               :     :     :     +- * Project (9)
               :     :     :        +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :           :- * Project (6)
               :     :     :           :  +- * Filter (5)
               :     :     :           :     +- BatchScan spark_catalog.default.store_sales (4)
               :     :     :           +- ReusedExchange (7)
               :     :     +- BroadcastExchange (25)
               :     :        +- Union (24)
               :     :           :- * Project (17)
               :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :     :           :     :- * Project (14)
               :     :           :     :  +- * Filter (13)
               :     :           :     :     +- BatchScan spark_catalog.default.web_sales (12)
               :     :           :     +- ReusedExchange (15)
               :     :           +- * Project (23)
               :     :              +- * BroadcastHashJoin Inner BuildRight (22)
               :     :                 :- * Project (20)
               :     :                 :  +- * Filter (19)
               :     :                 :     +- BatchScan spark_catalog.default.catalog_sales (18)
               :     :                 +- ReusedExchange (21)
               :     +- BroadcastExchange (31)
               :        +- * Project (30)
               :           +- * Filter (29)
               :              +- BatchScan spark_catalog.default.customer_address (28)
               +- BroadcastExchange (37)
                  +- * Project (36)
                     +- * Filter (35)
                        +- BatchScan spark_catalog.default.customer_demographics (34)


(1) BatchScan spark_catalog.default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_current_addr_sk IS NOT NULL, c_current_cdemo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 9]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(3) Project [codegen id : 9]
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(4) BatchScan spark_catalog.default.store_sales
Output [23]: [ss_sold_date_sk#4, ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 2]
Input [23]: [ss_sold_date_sk#4, ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26]
Condition : isnotnull(ss_sold_date_sk#4)

(6) Project [codegen id : 2]
Output [2]: [ss_sold_date_sk#4, ss_customer_sk#7]
Input [23]: [ss_sold_date_sk#4, ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26]

(7) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#27]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [ss_customer_sk#7]
Input [3]: [ss_sold_date_sk#4, ss_customer_sk#7, d_date_sk#27]

(10) BroadcastExchange
Input [1]: [ss_customer_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(12) BatchScan spark_catalog.default.web_sales
Output [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(13) Filter [codegen id : 4]
Input [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]
Condition : isnotnull(ws_sold_date_sk#28)

(14) Project [codegen id : 4]
Output [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]
Input [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]

(15) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#30]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#30]
Join condition: None

(17) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#29 AS customsk#31]
Input [3]: [ws_sold_date_sk#28, ws_bill_customer_sk#29, d_date_sk#30]

(18) BatchScan spark_catalog.default.catalog_sales
Output [2]: [cs_sold_date_sk#32, cs_ship_customer_sk#33]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(19) Filter [codegen id : 6]
Input [2]: [cs_sold_date_sk#32, cs_ship_customer_sk#33]
Condition : isnotnull(cs_sold_date_sk#32)

(20) Project [codegen id : 6]
Output [2]: [cs_sold_date_sk#32, cs_ship_customer_sk#33]
Input [2]: [cs_sold_date_sk#32, cs_ship_customer_sk#33]

(21) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#34]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#32]
Right keys [1]: [d_date_sk#34]
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#33 AS customsk#35]
Input [3]: [cs_sold_date_sk#32, cs_ship_customer_sk#33, d_date_sk#34]

(24) Union

(25) BroadcastExchange
Input [1]: [customsk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customsk#31]
Join condition: None

(27) Project [codegen id : 9]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(28) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#36, ca_state#37]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 7]
Input [2]: [ca_address_sk#36, ca_state#37]
Condition : isnotnull(ca_address_sk#36)

(30) Project [codegen id : 7]
Output [2]: [ca_address_sk#36, ca_state#37]
Input [2]: [ca_address_sk#36, ca_state#37]

(31) BroadcastExchange
Input [2]: [ca_address_sk#36, ca_state#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#36]
Join condition: None

(33) Project [codegen id : 9]
Output [2]: [c_current_cdemo_sk#2, ca_state#37]
Input [4]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#36, ca_state#37]

(34) BatchScan spark_catalog.default.customer_demographics
Output [6]: [cd_demo_sk#38, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
spark_catalog.default.customer_demographics [scan class = SparkBatchQueryScan] [filters=cd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(35) Filter [codegen id : 8]
Input [6]: [cd_demo_sk#38, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Condition : isnotnull(cd_demo_sk#38)

(36) Project [codegen id : 8]
Output [6]: [cd_demo_sk#38, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Input [6]: [cd_demo_sk#38, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]

(37) BroadcastExchange
Input [6]: [cd_demo_sk#38, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#38]
Join condition: None

(39) Project [codegen id : 9]
Output [6]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Input [8]: [c_current_cdemo_sk#2, ca_state#37, cd_demo_sk#38, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]

(40) HashAggregate [codegen id : 9]
Input [6]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Keys [6]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#41), partial_max(cd_dep_count#41), partial_sum(cd_dep_count#41), partial_avg(cd_dep_employed_count#42), partial_max(cd_dep_employed_count#42), partial_sum(cd_dep_employed_count#42), partial_avg(cd_dep_college_count#43), partial_max(cd_dep_college_count#43), partial_sum(cd_dep_college_count#43)]
Aggregate Attributes [13]: [count#44, sum#45, count#46, max#47, sum#48, sum#49, count#50, max#51, sum#52, sum#53, count#54, max#55, sum#56]
Results [19]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43, count#57, sum#58, count#59, max#60, sum#61, sum#62, count#63, max#64, sum#65, sum#66, count#67, max#68, sum#69]

(41) Exchange
Input [19]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43, count#57, sum#58, count#59, max#60, sum#61, sum#62, count#63, max#64, sum#65, sum#66, count#67, max#68, sum#69]
Arguments: hashpartitioning(ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(42) HashAggregate [codegen id : 10]
Input [19]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43, count#57, sum#58, count#59, max#60, sum#61, sum#62, count#63, max#64, sum#65, sum#66, count#67, max#68, sum#69]
Keys [6]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cd_dep_employed_count#42, cd_dep_college_count#43]
Functions [10]: [count(1), avg(cd_dep_count#41), max(cd_dep_count#41), sum(cd_dep_count#41), avg(cd_dep_employed_count#42), max(cd_dep_employed_count#42), sum(cd_dep_employed_count#42), avg(cd_dep_college_count#43), max(cd_dep_college_count#43), sum(cd_dep_college_count#43)]
Aggregate Attributes [10]: [count(1)#70, avg(cd_dep_count#41)#71, max(cd_dep_count#41)#72, sum(cd_dep_count#41)#73, avg(cd_dep_employed_count#42)#74, max(cd_dep_employed_count#42)#75, sum(cd_dep_employed_count#42)#76, avg(cd_dep_college_count#43)#77, max(cd_dep_college_count#43)#78, sum(cd_dep_college_count#43)#79]
Results [18]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, count(1)#70 AS cnt1#80, avg(cd_dep_count#41)#71 AS avg(cd_dep_count)#81, max(cd_dep_count#41)#72 AS max(cd_dep_count)#82, sum(cd_dep_count#41)#73 AS sum(cd_dep_count)#83, cd_dep_employed_count#42, count(1)#70 AS cnt2#84, avg(cd_dep_employed_count#42)#74 AS avg(cd_dep_employed_count)#85, max(cd_dep_employed_count#42)#75 AS max(cd_dep_employed_count)#86, sum(cd_dep_employed_count#42)#76 AS sum(cd_dep_employed_count)#87, cd_dep_college_count#43, count(1)#70 AS cnt3#88, avg(cd_dep_college_count#43)#77 AS avg(cd_dep_college_count)#89, max(cd_dep_college_count#43)#78 AS max(cd_dep_college_count)#90, sum(cd_dep_college_count#43)#79 AS sum(cd_dep_college_count)#91]

(43) TakeOrderedAndProject
Input [18]: [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cnt1#80, avg(cd_dep_count)#81, max(cd_dep_count)#82, sum(cd_dep_count)#83, cd_dep_employed_count#42, cnt2#84, avg(cd_dep_employed_count)#85, max(cd_dep_employed_count)#86, sum(cd_dep_employed_count)#87, cd_dep_college_count#43, cnt3#88, avg(cd_dep_college_count)#89, max(cd_dep_college_count)#90, sum(cd_dep_college_count)#91]
Arguments: 100, [ca_state#37 ASC NULLS FIRST, cd_gender#39 ASC NULLS FIRST, cd_marital_status#40 ASC NULLS FIRST, cd_dep_count#41 ASC NULLS FIRST, cd_dep_employed_count#42 ASC NULLS FIRST, cd_dep_college_count#43 ASC NULLS FIRST], [ca_state#37, cd_gender#39, cd_marital_status#40, cd_dep_count#41, cnt1#80, avg(cd_dep_count)#81, max(cd_dep_count)#82, sum(cd_dep_count)#83, cd_dep_employed_count#42, cnt2#84, avg(cd_dep_employed_count)#85, max(cd_dep_employed_count)#86, sum(cd_dep_employed_count)#87, cd_dep_college_count#43, cnt3#88, avg(cd_dep_college_count)#89, max(cd_dep_college_count)#90, sum(cd_dep_college_count)#91]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#92
BroadcastExchange (47)
+- * Project (46)
   +- * Filter (45)
      +- BatchScan spark_catalog.default.date_dim (44)


(44) BatchScan spark_catalog.default.date_dim
Output [28]: [d_date_sk#27, d_date_id#93, d_date#94, d_month_seq#95, d_week_seq#96, d_quarter_seq#97, d_year#98, d_dow#99, d_moy#100, d_dom#101, d_qoy#102, d_fy_year#103, d_fy_quarter_seq#104, d_fy_week_seq#105, d_day_name#106, d_quarter_name#107, d_holiday#108, d_weekend#109, d_following_holiday#110, d_first_dom#111, d_last_dom#112, d_same_day_ly#113, d_same_day_lq#114, d_current_day#115, d_current_week#116, d_current_month#117, d_current_quarter#118, d_current_year#119]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_qoy IS NOT NULL, d_year = 1999, d_qoy < 4, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(45) Filter [codegen id : 1]
Input [28]: [d_date_sk#27, d_date_id#93, d_date#94, d_month_seq#95, d_week_seq#96, d_quarter_seq#97, d_year#98, d_dow#99, d_moy#100, d_dom#101, d_qoy#102, d_fy_year#103, d_fy_quarter_seq#104, d_fy_week_seq#105, d_day_name#106, d_quarter_name#107, d_holiday#108, d_weekend#109, d_following_holiday#110, d_first_dom#111, d_last_dom#112, d_same_day_ly#113, d_same_day_lq#114, d_current_day#115, d_current_week#116, d_current_month#117, d_current_quarter#118, d_current_year#119]
Condition : ((((isnotnull(d_year#98) AND isnotnull(d_qoy#102)) AND (d_year#98 = 1999)) AND (d_qoy#102 < 4)) AND isnotnull(d_date_sk#27))

(46) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [28]: [d_date_sk#27, d_date_id#93, d_date#94, d_month_seq#95, d_week_seq#96, d_quarter_seq#97, d_year#98, d_dow#99, d_moy#100, d_dom#101, d_qoy#102, d_fy_year#103, d_fy_quarter_seq#104, d_fy_week_seq#105, d_day_name#106, d_quarter_name#107, d_holiday#108, d_weekend#109, d_following_holiday#110, d_first_dom#111, d_last_dom#112, d_same_day_ly#113, d_same_day_lq#114, d_current_day#115, d_current_week#116, d_current_month#117, d_current_quarter#118, d_current_year#119]

(47) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 12 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#120
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- BatchScan spark_catalog.default.date_dim (48)


(48) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#30, d_year#121, d_qoy#122]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_qoy IS NOT NULL, d_year = 1999, d_qoy < 4, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(49) Filter [codegen id : 1]
Input [3]: [d_date_sk#30, d_year#121, d_qoy#122]
Condition : ((((isnotnull(d_year#121) AND isnotnull(d_qoy#122)) AND (d_year#121 = 1999)) AND (d_qoy#122 < 4)) AND isnotnull(d_date_sk#30))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#30]
Input [3]: [d_date_sk#30, d_year#121, d_qoy#122]

(51) BroadcastExchange
Input [1]: [d_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:3 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#32 IN dynamicpruning#120


