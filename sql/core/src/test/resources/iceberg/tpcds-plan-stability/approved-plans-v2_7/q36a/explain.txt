== Physical Plan ==
TakeOrderedAndProject (40)
+- * Project (39)
   +- Window (38)
      +- * Sort (37)
         +- Exchange (36)
            +- * HashAggregate (35)
               +- Exchange (34)
                  +- * HashAggregate (33)
                     +- Union (32)
                        :- * HashAggregate (21)
                        :  +- Exchange (20)
                        :     +- * HashAggregate (19)
                        :        +- * Project (18)
                        :           +- * BroadcastHashJoin Inner BuildRight (17)
                        :              :- * Project (12)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (11)
                        :              :     :- * Project (6)
                        :              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :     :     :- * Project (3)
                        :              :     :     :  +- * Filter (2)
                        :              :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
                        :              :     :     +- ReusedExchange (4)
                        :              :     +- BroadcastExchange (10)
                        :              :        +- * Project (9)
                        :              :           +- * Filter (8)
                        :              :              +- BatchScan spark_catalog.default.item (7)
                        :              +- BroadcastExchange (16)
                        :                 +- * Project (15)
                        :                    +- * Filter (14)
                        :                       +- BatchScan spark_catalog.default.store (13)
                        :- * HashAggregate (26)
                        :  +- Exchange (25)
                        :     +- * HashAggregate (24)
                        :        +- * HashAggregate (23)
                        :           +- ReusedExchange (22)
                        +- * HashAggregate (31)
                           +- Exchange (30)
                              +- * HashAggregate (29)
                                 +- * HashAggregate (28)
                                    +- ReusedExchange (27)


(1) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_item_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#3))

(3) Project [codegen id : 4]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]

(4) ReusedExchange [Reuses operator id: 44]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, d_date_sk#6]

(7) BatchScan spark_catalog.default.item
Output [3]: [i_item_sk#7, i_class#8, i_category#9]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [3]: [i_item_sk#7, i_class#8, i_category#9]
Condition : isnotnull(i_item_sk#7)

(9) Project [codegen id : 2]
Output [3]: [i_item_sk#7, i_class#8, i_category#9]
Input [3]: [i_item_sk#7, i_class#8, i_category#9]

(10) BroadcastExchange
Input [3]: [i_item_sk#7, i_class#8, i_category#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#7]
Join condition: None

(12) Project [codegen id : 4]
Output [5]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#8, i_category#9]
Input [7]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_item_sk#7, i_class#8, i_category#9]

(13) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#10, s_state#11]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_state IS NOT NULL, s_state = 'TN', s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [2]: [s_store_sk#10, s_state#11]
Condition : ((isnotnull(s_state#11) AND (s_state#11 = TN)) AND isnotnull(s_store_sk#10))

(15) Project [codegen id : 3]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_state#11]

(16) BroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#10]
Join condition: None

(18) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_class#8, i_category#9]
Input [6]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#8, i_category#9, s_store_sk#10]

(19) HashAggregate [codegen id : 4]
Input [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_class#8, i_category#9]
Keys [2]: [i_category#9, i_class#8]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum#12, sum#13]
Results [4]: [i_category#9, i_class#8, sum#14, sum#15]

(20) Exchange
Input [4]: [i_category#9, i_class#8, sum#14, sum#15]
Arguments: hashpartitioning(i_category#9, i_class#8, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 5]
Input [4]: [i_category#9, i_class#8, sum#14, sum#15]
Keys [2]: [i_category#9, i_class#8]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#16, sum(UnscaledValue(ss_ext_sales_price#4))#17]
Results [6]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#16,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#17,17,2))), DecimalType(37,20)) as decimal(38,20)) AS gross_margin#18, i_category#9, i_class#8, 0 AS t_category#19, 0 AS t_class#20, 0 AS lochierarchy#21]

(22) ReusedExchange [Reuses operator id: 20]
Output [4]: [i_category#9, i_class#8, sum#22, sum#23]

(23) HashAggregate [codegen id : 10]
Input [4]: [i_category#9, i_class#8, sum#22, sum#23]
Keys [2]: [i_category#9, i_class#8]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#24, sum(UnscaledValue(ss_ext_sales_price#4))#25]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#24,17,2) AS ss_net_profit#26, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#25,17,2) AS ss_ext_sales_price#27, i_category#9]

(24) HashAggregate [codegen id : 10]
Input [3]: [ss_net_profit#26, ss_ext_sales_price#27, i_category#9]
Keys [1]: [i_category#9]
Functions [2]: [partial_sum(ss_net_profit#26), partial_sum(ss_ext_sales_price#27)]
Aggregate Attributes [4]: [sum#28, isEmpty#29, sum#30, isEmpty#31]
Results [5]: [i_category#9, sum#32, isEmpty#33, sum#34, isEmpty#35]

(25) Exchange
Input [5]: [i_category#9, sum#32, isEmpty#33, sum#34, isEmpty#35]
Arguments: hashpartitioning(i_category#9, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) HashAggregate [codegen id : 11]
Input [5]: [i_category#9, sum#32, isEmpty#33, sum#34, isEmpty#35]
Keys [1]: [i_category#9]
Functions [2]: [sum(ss_net_profit#26), sum(ss_ext_sales_price#27)]
Aggregate Attributes [2]: [sum(ss_net_profit#26)#36, sum(ss_ext_sales_price#27)#37]
Results [6]: [cast(CheckOverflow((promote_precision(sum(ss_net_profit#26)#36) / promote_precision(sum(ss_ext_sales_price#27)#37)), DecimalType(38,11)) as decimal(38,20)) AS gross_margin#38, i_category#9, null AS i_class#39, 0 AS t_category#40, 1 AS t_class#41, 1 AS lochierarchy#42]

(27) ReusedExchange [Reuses operator id: 20]
Output [4]: [i_category#9, i_class#8, sum#43, sum#44]

(28) HashAggregate [codegen id : 16]
Input [4]: [i_category#9, i_class#8, sum#43, sum#44]
Keys [2]: [i_category#9, i_class#8]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#24, sum(UnscaledValue(ss_ext_sales_price#4))#25]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#24,17,2) AS ss_net_profit#26, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#25,17,2) AS ss_ext_sales_price#27]

(29) HashAggregate [codegen id : 16]
Input [2]: [ss_net_profit#26, ss_ext_sales_price#27]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#26), partial_sum(ss_ext_sales_price#27)]
Aggregate Attributes [4]: [sum#45, isEmpty#46, sum#47, isEmpty#48]
Results [4]: [sum#49, isEmpty#50, sum#51, isEmpty#52]

(30) Exchange
Input [4]: [sum#49, isEmpty#50, sum#51, isEmpty#52]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(31) HashAggregate [codegen id : 17]
Input [4]: [sum#49, isEmpty#50, sum#51, isEmpty#52]
Keys: []
Functions [2]: [sum(ss_net_profit#26), sum(ss_ext_sales_price#27)]
Aggregate Attributes [2]: [sum(ss_net_profit#26)#53, sum(ss_ext_sales_price#27)#54]
Results [6]: [cast(CheckOverflow((promote_precision(sum(ss_net_profit#26)#53) / promote_precision(sum(ss_ext_sales_price#27)#54)), DecimalType(38,11)) as decimal(38,20)) AS gross_margin#55, null AS i_category#56, null AS i_class#57, 1 AS t_category#58, 1 AS t_class#59, 2 AS lochierarchy#60]

(32) Union

(33) HashAggregate [codegen id : 18]
Input [6]: [gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21]
Keys [6]: [gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21]

(34) Exchange
Input [6]: [gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21]
Arguments: hashpartitioning(gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) HashAggregate [codegen id : 19]
Input [6]: [gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21]
Keys [6]: [gross_margin#18, i_category#9, i_class#8, t_category#19, t_class#20, lochierarchy#21]
Functions: []
Aggregate Attributes: []
Results [5]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, CASE WHEN (t_class#20 = 0) THEN i_category#9 END AS _w0#61]

(36) Exchange
Input [5]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, _w0#61]
Arguments: hashpartitioning(lochierarchy#21, _w0#61, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(37) Sort [codegen id : 20]
Input [5]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, _w0#61]
Arguments: [lochierarchy#21 ASC NULLS FIRST, _w0#61 ASC NULLS FIRST, gross_margin#18 ASC NULLS FIRST], false, 0

(38) Window
Input [5]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, _w0#61]
Arguments: [rank(gross_margin#18) windowspecdefinition(lochierarchy#21, _w0#61, gross_margin#18 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#62], [lochierarchy#21, _w0#61], [gross_margin#18 ASC NULLS FIRST]

(39) Project [codegen id : 21]
Output [5]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, rank_within_parent#62]
Input [6]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, _w0#61, rank_within_parent#62]

(40) TakeOrderedAndProject
Input [5]: [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, rank_within_parent#62]
Arguments: 100, [lochierarchy#21 DESC NULLS LAST, CASE WHEN (lochierarchy#21 = 0) THEN i_category#9 END ASC NULLS FIRST, rank_within_parent#62 ASC NULLS FIRST], [gross_margin#18, i_category#9, i_class#8, lochierarchy#21, rank_within_parent#62]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#63
BroadcastExchange (44)
+- * Project (43)
   +- * Filter (42)
      +- BatchScan spark_catalog.default.date_dim (41)


(41) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#64]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2001, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(42) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#64]
Condition : ((isnotnull(d_year#64) AND (d_year#64 = 2001)) AND isnotnull(d_date_sk#6))

(43) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#64]

(44) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


