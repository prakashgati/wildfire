== Physical Plan ==
TakeOrderedAndProject (71)
+- * HashAggregate (70)
   +- Exchange (69)
      +- * HashAggregate (68)
         +- Union (67)
            :- * Project (22)
            :  +- * Filter (21)
            :     +- Window (20)
            :        +- * Sort (19)
            :           +- Window (18)
            :              +- * Sort (17)
            :                 +- Exchange (16)
            :                    +- * HashAggregate (15)
            :                       +- Exchange (14)
            :                          +- * HashAggregate (13)
            :                             +- * Project (12)
            :                                +- * BroadcastHashJoin Inner BuildRight (11)
            :                                   :- * Project (9)
            :                                   :  +- * BroadcastHashJoin Inner BuildRight (8)
            :                                   :     :- * Project (3)
            :                                   :     :  +- * Filter (2)
            :                                   :     :     +- BatchScan spark_catalog.default.web_sales (1)
            :                                   :     +- BroadcastExchange (7)
            :                                   :        +- * Project (6)
            :                                   :           +- * Filter (5)
            :                                   :              +- BatchScan spark_catalog.default.web_returns (4)
            :                                   +- ReusedExchange (10)
            :- * Project (44)
            :  +- * Filter (43)
            :     +- Window (42)
            :        +- * Sort (41)
            :           +- Window (40)
            :              +- * Sort (39)
            :                 +- Exchange (38)
            :                    +- * HashAggregate (37)
            :                       +- Exchange (36)
            :                          +- * HashAggregate (35)
            :                             +- * Project (34)
            :                                +- * BroadcastHashJoin Inner BuildRight (33)
            :                                   :- * Project (31)
            :                                   :  +- * BroadcastHashJoin Inner BuildRight (30)
            :                                   :     :- * Project (25)
            :                                   :     :  +- * Filter (24)
            :                                   :     :     +- BatchScan spark_catalog.default.catalog_sales (23)
            :                                   :     +- BroadcastExchange (29)
            :                                   :        +- * Project (28)
            :                                   :           +- * Filter (27)
            :                                   :              +- BatchScan spark_catalog.default.catalog_returns (26)
            :                                   +- ReusedExchange (32)
            +- * Project (66)
               +- * Filter (65)
                  +- Window (64)
                     +- * Sort (63)
                        +- Window (62)
                           +- * Sort (61)
                              +- Exchange (60)
                                 +- * HashAggregate (59)
                                    +- Exchange (58)
                                       +- * HashAggregate (57)
                                          +- * Project (56)
                                             +- * BroadcastHashJoin Inner BuildRight (55)
                                                :- * Project (53)
                                                :  +- * BroadcastHashJoin Inner BuildRight (52)
                                                :     :- * Project (47)
                                                :     :  +- * Filter (46)
                                                :     :     +- BatchScan spark_catalog.default.store_sales (45)
                                                :     +- BroadcastExchange (51)
                                                :        +- * Project (50)
                                                :           +- * Filter (49)
                                                :              +- BatchScan spark_catalog.default.store_returns (48)
                                                +- ReusedExchange (54)


(1) BatchScan spark_catalog.default.web_sales
Output [6]: [ws_sold_date_sk#1, ws_item_sk#2, ws_order_number#3, ws_quantity#4, ws_net_paid#5, ws_net_profit#6]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_net_profit IS NOT NULL, ws_net_paid IS NOT NULL, ws_quantity IS NOT NULL, ws_net_profit > 1.00, ws_net_paid > 0.00, ws_quantity > 0, ws_order_number IS NOT NULL, ws_item_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [6]: [ws_sold_date_sk#1, ws_item_sk#2, ws_order_number#3, ws_quantity#4, ws_net_paid#5, ws_net_profit#6]
Condition : ((((((((isnotnull(ws_net_profit#6) AND isnotnull(ws_net_paid#5)) AND isnotnull(ws_quantity#4)) AND (ws_net_profit#6 > 1.00)) AND (ws_net_paid#5 > 0.00)) AND (ws_quantity#4 > 0)) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_item_sk#2)) AND isnotnull(ws_sold_date_sk#1))

(3) Project [codegen id : 3]
Output [5]: [ws_sold_date_sk#1, ws_item_sk#2, ws_order_number#3, ws_quantity#4, ws_net_paid#5]
Input [6]: [ws_sold_date_sk#1, ws_item_sk#2, ws_order_number#3, ws_quantity#4, ws_net_paid#5, ws_net_profit#6]

(4) BatchScan spark_catalog.default.web_returns
Output [4]: [wr_item_sk#7, wr_order_number#8, wr_return_quantity#9, wr_return_amt#10]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_return_amt IS NOT NULL, wr_return_amt > 10000.00, wr_order_number IS NOT NULL, wr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [4]: [wr_item_sk#7, wr_order_number#8, wr_return_quantity#9, wr_return_amt#10]
Condition : (((isnotnull(wr_return_amt#10) AND (wr_return_amt#10 > 10000.00)) AND isnotnull(wr_order_number#8)) AND isnotnull(wr_item_sk#7))

(6) Project [codegen id : 1]
Output [4]: [wr_item_sk#7, wr_order_number#8, wr_return_quantity#9, wr_return_amt#10]
Input [4]: [wr_item_sk#7, wr_order_number#8, wr_return_quantity#9, wr_return_amt#10]

(7) BroadcastExchange
Input [4]: [wr_item_sk#7, wr_order_number#8, wr_return_quantity#9, wr_return_amt#10]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ws_order_number#3, ws_item_sk#2]
Right keys [2]: [wr_order_number#8, wr_item_sk#7]
Join condition: None

(9) Project [codegen id : 3]
Output [6]: [ws_sold_date_sk#1, ws_item_sk#2, ws_quantity#4, ws_net_paid#5, wr_return_quantity#9, wr_return_amt#10]
Input [9]: [ws_sold_date_sk#1, ws_item_sk#2, ws_order_number#3, ws_quantity#4, ws_net_paid#5, wr_item_sk#7, wr_order_number#8, wr_return_quantity#9, wr_return_amt#10]

(10) ReusedExchange [Reuses operator id: 75]
Output [1]: [d_date_sk#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(12) Project [codegen id : 3]
Output [5]: [ws_item_sk#2, ws_quantity#4, ws_net_paid#5, wr_return_quantity#9, wr_return_amt#10]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_quantity#4, ws_net_paid#5, wr_return_quantity#9, wr_return_amt#10, d_date_sk#11]

(13) HashAggregate [codegen id : 3]
Input [5]: [ws_item_sk#2, ws_quantity#4, ws_net_paid#5, wr_return_quantity#9, wr_return_amt#10]
Keys [1]: [ws_item_sk#2]
Functions [4]: [partial_sum(coalesce(wr_return_quantity#9, 0)), partial_sum(coalesce(ws_quantity#4, 0)), partial_sum(coalesce(cast(wr_return_amt#10 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#5 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#12, sum#13, sum#14, isEmpty#15, sum#16, isEmpty#17]
Results [7]: [ws_item_sk#2, sum#18, sum#19, sum#20, isEmpty#21, sum#22, isEmpty#23]

(14) Exchange
Input [7]: [ws_item_sk#2, sum#18, sum#19, sum#20, isEmpty#21, sum#22, isEmpty#23]
Arguments: hashpartitioning(ws_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 4]
Input [7]: [ws_item_sk#2, sum#18, sum#19, sum#20, isEmpty#21, sum#22, isEmpty#23]
Keys [1]: [ws_item_sk#2]
Functions [4]: [sum(coalesce(wr_return_quantity#9, 0)), sum(coalesce(ws_quantity#4, 0)), sum(coalesce(cast(wr_return_amt#10 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#5 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(wr_return_quantity#9, 0))#24, sum(coalesce(ws_quantity#4, 0))#25, sum(coalesce(cast(wr_return_amt#10 as decimal(12,2)), 0.00))#26, sum(coalesce(cast(ws_net_paid#5 as decimal(12,2)), 0.00))#27]
Results [3]: [ws_item_sk#2 AS item#28, CheckOverflow((promote_precision(cast(sum(coalesce(wr_return_quantity#9, 0))#24 as decimal(15,4))) / promote_precision(cast(sum(coalesce(ws_quantity#4, 0))#25 as decimal(15,4)))), DecimalType(35,20)) AS return_ratio#29, CheckOverflow((promote_precision(cast(sum(coalesce(cast(wr_return_amt#10 as decimal(12,2)), 0.00))#26 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(ws_net_paid#5 as decimal(12,2)), 0.00))#27 as decimal(15,4)))), DecimalType(35,20)) AS currency_ratio#30]

(16) Exchange
Input [3]: [item#28, return_ratio#29, currency_ratio#30]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 5]
Input [3]: [item#28, return_ratio#29, currency_ratio#30]
Arguments: [return_ratio#29 ASC NULLS FIRST], false, 0

(18) Window
Input [3]: [item#28, return_ratio#29, currency_ratio#30]
Arguments: [rank(return_ratio#29) windowspecdefinition(return_ratio#29 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#31], [return_ratio#29 ASC NULLS FIRST]

(19) Sort [codegen id : 6]
Input [4]: [item#28, return_ratio#29, currency_ratio#30, return_rank#31]
Arguments: [currency_ratio#30 ASC NULLS FIRST], false, 0

(20) Window
Input [4]: [item#28, return_ratio#29, currency_ratio#30, return_rank#31]
Arguments: [rank(currency_ratio#30) windowspecdefinition(currency_ratio#30 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#32], [currency_ratio#30 ASC NULLS FIRST]

(21) Filter [codegen id : 7]
Input [5]: [item#28, return_ratio#29, currency_ratio#30, return_rank#31, currency_rank#32]
Condition : ((return_rank#31 <= 10) OR (currency_rank#32 <= 10))

(22) Project [codegen id : 7]
Output [5]: [web AS channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Input [5]: [item#28, return_ratio#29, currency_ratio#30, return_rank#31, currency_rank#32]

(23) BatchScan spark_catalog.default.catalog_sales
Output [6]: [cs_sold_date_sk#34, cs_item_sk#35, cs_order_number#36, cs_quantity#37, cs_net_paid#38, cs_net_profit#39]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_net_profit IS NOT NULL, cs_net_paid IS NOT NULL, cs_quantity IS NOT NULL, cs_net_profit > 1.00, cs_net_paid > 0.00, cs_quantity > 0, cs_order_number IS NOT NULL, cs_item_sk IS NOT NULL, cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 10]
Input [6]: [cs_sold_date_sk#34, cs_item_sk#35, cs_order_number#36, cs_quantity#37, cs_net_paid#38, cs_net_profit#39]
Condition : ((((((((isnotnull(cs_net_profit#39) AND isnotnull(cs_net_paid#38)) AND isnotnull(cs_quantity#37)) AND (cs_net_profit#39 > 1.00)) AND (cs_net_paid#38 > 0.00)) AND (cs_quantity#37 > 0)) AND isnotnull(cs_order_number#36)) AND isnotnull(cs_item_sk#35)) AND isnotnull(cs_sold_date_sk#34))

(25) Project [codegen id : 10]
Output [5]: [cs_sold_date_sk#34, cs_item_sk#35, cs_order_number#36, cs_quantity#37, cs_net_paid#38]
Input [6]: [cs_sold_date_sk#34, cs_item_sk#35, cs_order_number#36, cs_quantity#37, cs_net_paid#38, cs_net_profit#39]

(26) BatchScan spark_catalog.default.catalog_returns
Output [4]: [cr_item_sk#40, cr_order_number#41, cr_return_quantity#42, cr_return_amount#43]
spark_catalog.default.catalog_returns [scan class = SparkBatchQueryScan] [filters=cr_return_amount IS NOT NULL, cr_return_amount > 10000.00, cr_order_number IS NOT NULL, cr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(27) Filter [codegen id : 8]
Input [4]: [cr_item_sk#40, cr_order_number#41, cr_return_quantity#42, cr_return_amount#43]
Condition : (((isnotnull(cr_return_amount#43) AND (cr_return_amount#43 > 10000.00)) AND isnotnull(cr_order_number#41)) AND isnotnull(cr_item_sk#40))

(28) Project [codegen id : 8]
Output [4]: [cr_item_sk#40, cr_order_number#41, cr_return_quantity#42, cr_return_amount#43]
Input [4]: [cr_item_sk#40, cr_order_number#41, cr_return_quantity#42, cr_return_amount#43]

(29) BroadcastExchange
Input [4]: [cr_item_sk#40, cr_order_number#41, cr_return_quantity#42, cr_return_amount#43]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=4]

(30) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [cs_order_number#36, cs_item_sk#35]
Right keys [2]: [cr_order_number#41, cr_item_sk#40]
Join condition: None

(31) Project [codegen id : 10]
Output [6]: [cs_sold_date_sk#34, cs_item_sk#35, cs_quantity#37, cs_net_paid#38, cr_return_quantity#42, cr_return_amount#43]
Input [9]: [cs_sold_date_sk#34, cs_item_sk#35, cs_order_number#36, cs_quantity#37, cs_net_paid#38, cr_item_sk#40, cr_order_number#41, cr_return_quantity#42, cr_return_amount#43]

(32) ReusedExchange [Reuses operator id: 75]
Output [1]: [d_date_sk#44]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#34]
Right keys [1]: [d_date_sk#44]
Join condition: None

(34) Project [codegen id : 10]
Output [5]: [cs_item_sk#35, cs_quantity#37, cs_net_paid#38, cr_return_quantity#42, cr_return_amount#43]
Input [7]: [cs_sold_date_sk#34, cs_item_sk#35, cs_quantity#37, cs_net_paid#38, cr_return_quantity#42, cr_return_amount#43, d_date_sk#44]

(35) HashAggregate [codegen id : 10]
Input [5]: [cs_item_sk#35, cs_quantity#37, cs_net_paid#38, cr_return_quantity#42, cr_return_amount#43]
Keys [1]: [cs_item_sk#35]
Functions [4]: [partial_sum(coalesce(cr_return_quantity#42, 0)), partial_sum(coalesce(cs_quantity#37, 0)), partial_sum(coalesce(cast(cr_return_amount#43 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#38 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#45, sum#46, sum#47, isEmpty#48, sum#49, isEmpty#50]
Results [7]: [cs_item_sk#35, sum#51, sum#52, sum#53, isEmpty#54, sum#55, isEmpty#56]

(36) Exchange
Input [7]: [cs_item_sk#35, sum#51, sum#52, sum#53, isEmpty#54, sum#55, isEmpty#56]
Arguments: hashpartitioning(cs_item_sk#35, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(37) HashAggregate [codegen id : 11]
Input [7]: [cs_item_sk#35, sum#51, sum#52, sum#53, isEmpty#54, sum#55, isEmpty#56]
Keys [1]: [cs_item_sk#35]
Functions [4]: [sum(coalesce(cr_return_quantity#42, 0)), sum(coalesce(cs_quantity#37, 0)), sum(coalesce(cast(cr_return_amount#43 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#38 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(cr_return_quantity#42, 0))#57, sum(coalesce(cs_quantity#37, 0))#58, sum(coalesce(cast(cr_return_amount#43 as decimal(12,2)), 0.00))#59, sum(coalesce(cast(cs_net_paid#38 as decimal(12,2)), 0.00))#60]
Results [3]: [cs_item_sk#35 AS item#61, CheckOverflow((promote_precision(cast(sum(coalesce(cr_return_quantity#42, 0))#57 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cs_quantity#37, 0))#58 as decimal(15,4)))), DecimalType(35,20)) AS return_ratio#62, CheckOverflow((promote_precision(cast(sum(coalesce(cast(cr_return_amount#43 as decimal(12,2)), 0.00))#59 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(cs_net_paid#38 as decimal(12,2)), 0.00))#60 as decimal(15,4)))), DecimalType(35,20)) AS currency_ratio#63]

(38) Exchange
Input [3]: [item#61, return_ratio#62, currency_ratio#63]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(39) Sort [codegen id : 12]
Input [3]: [item#61, return_ratio#62, currency_ratio#63]
Arguments: [return_ratio#62 ASC NULLS FIRST], false, 0

(40) Window
Input [3]: [item#61, return_ratio#62, currency_ratio#63]
Arguments: [rank(return_ratio#62) windowspecdefinition(return_ratio#62 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#64], [return_ratio#62 ASC NULLS FIRST]

(41) Sort [codegen id : 13]
Input [4]: [item#61, return_ratio#62, currency_ratio#63, return_rank#64]
Arguments: [currency_ratio#63 ASC NULLS FIRST], false, 0

(42) Window
Input [4]: [item#61, return_ratio#62, currency_ratio#63, return_rank#64]
Arguments: [rank(currency_ratio#63) windowspecdefinition(currency_ratio#63 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#65], [currency_ratio#63 ASC NULLS FIRST]

(43) Filter [codegen id : 14]
Input [5]: [item#61, return_ratio#62, currency_ratio#63, return_rank#64, currency_rank#65]
Condition : ((return_rank#64 <= 10) OR (currency_rank#65 <= 10))

(44) Project [codegen id : 14]
Output [5]: [catalog AS channel#66, item#61, return_ratio#62, return_rank#64, currency_rank#65]
Input [5]: [item#61, return_ratio#62, currency_ratio#63, return_rank#64, currency_rank#65]

(45) BatchScan spark_catalog.default.store_sales
Output [6]: [ss_sold_date_sk#67, ss_item_sk#68, ss_ticket_number#69, ss_quantity#70, ss_net_paid#71, ss_net_profit#72]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_net_profit IS NOT NULL, ss_net_paid IS NOT NULL, ss_quantity IS NOT NULL, ss_net_profit > 1.00, ss_net_paid > 0.00, ss_quantity > 0, ss_ticket_number IS NOT NULL, ss_item_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(46) Filter [codegen id : 17]
Input [6]: [ss_sold_date_sk#67, ss_item_sk#68, ss_ticket_number#69, ss_quantity#70, ss_net_paid#71, ss_net_profit#72]
Condition : ((((((((isnotnull(ss_net_profit#72) AND isnotnull(ss_net_paid#71)) AND isnotnull(ss_quantity#70)) AND (ss_net_profit#72 > 1.00)) AND (ss_net_paid#71 > 0.00)) AND (ss_quantity#70 > 0)) AND isnotnull(ss_ticket_number#69)) AND isnotnull(ss_item_sk#68)) AND isnotnull(ss_sold_date_sk#67))

(47) Project [codegen id : 17]
Output [5]: [ss_sold_date_sk#67, ss_item_sk#68, ss_ticket_number#69, ss_quantity#70, ss_net_paid#71]
Input [6]: [ss_sold_date_sk#67, ss_item_sk#68, ss_ticket_number#69, ss_quantity#70, ss_net_paid#71, ss_net_profit#72]

(48) BatchScan spark_catalog.default.store_returns
Output [4]: [sr_item_sk#73, sr_ticket_number#74, sr_return_quantity#75, sr_return_amt#76]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_return_amt IS NOT NULL, sr_return_amt > 10000.00, sr_ticket_number IS NOT NULL, sr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(49) Filter [codegen id : 15]
Input [4]: [sr_item_sk#73, sr_ticket_number#74, sr_return_quantity#75, sr_return_amt#76]
Condition : (((isnotnull(sr_return_amt#76) AND (sr_return_amt#76 > 10000.00)) AND isnotnull(sr_ticket_number#74)) AND isnotnull(sr_item_sk#73))

(50) Project [codegen id : 15]
Output [4]: [sr_item_sk#73, sr_ticket_number#74, sr_return_quantity#75, sr_return_amt#76]
Input [4]: [sr_item_sk#73, sr_ticket_number#74, sr_return_quantity#75, sr_return_amt#76]

(51) BroadcastExchange
Input [4]: [sr_item_sk#73, sr_ticket_number#74, sr_return_quantity#75, sr_return_amt#76]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=7]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [2]: [ss_ticket_number#69, ss_item_sk#68]
Right keys [2]: [sr_ticket_number#74, sr_item_sk#73]
Join condition: None

(53) Project [codegen id : 17]
Output [6]: [ss_sold_date_sk#67, ss_item_sk#68, ss_quantity#70, ss_net_paid#71, sr_return_quantity#75, sr_return_amt#76]
Input [9]: [ss_sold_date_sk#67, ss_item_sk#68, ss_ticket_number#69, ss_quantity#70, ss_net_paid#71, sr_item_sk#73, sr_ticket_number#74, sr_return_quantity#75, sr_return_amt#76]

(54) ReusedExchange [Reuses operator id: 75]
Output [1]: [d_date_sk#77]

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#67]
Right keys [1]: [d_date_sk#77]
Join condition: None

(56) Project [codegen id : 17]
Output [5]: [ss_item_sk#68, ss_quantity#70, ss_net_paid#71, sr_return_quantity#75, sr_return_amt#76]
Input [7]: [ss_sold_date_sk#67, ss_item_sk#68, ss_quantity#70, ss_net_paid#71, sr_return_quantity#75, sr_return_amt#76, d_date_sk#77]

(57) HashAggregate [codegen id : 17]
Input [5]: [ss_item_sk#68, ss_quantity#70, ss_net_paid#71, sr_return_quantity#75, sr_return_amt#76]
Keys [1]: [ss_item_sk#68]
Functions [4]: [partial_sum(coalesce(sr_return_quantity#75, 0)), partial_sum(coalesce(ss_quantity#70, 0)), partial_sum(coalesce(cast(sr_return_amt#76 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#71 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#78, sum#79, sum#80, isEmpty#81, sum#82, isEmpty#83]
Results [7]: [ss_item_sk#68, sum#84, sum#85, sum#86, isEmpty#87, sum#88, isEmpty#89]

(58) Exchange
Input [7]: [ss_item_sk#68, sum#84, sum#85, sum#86, isEmpty#87, sum#88, isEmpty#89]
Arguments: hashpartitioning(ss_item_sk#68, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(59) HashAggregate [codegen id : 18]
Input [7]: [ss_item_sk#68, sum#84, sum#85, sum#86, isEmpty#87, sum#88, isEmpty#89]
Keys [1]: [ss_item_sk#68]
Functions [4]: [sum(coalesce(sr_return_quantity#75, 0)), sum(coalesce(ss_quantity#70, 0)), sum(coalesce(cast(sr_return_amt#76 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#71 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(sr_return_quantity#75, 0))#90, sum(coalesce(ss_quantity#70, 0))#91, sum(coalesce(cast(sr_return_amt#76 as decimal(12,2)), 0.00))#92, sum(coalesce(cast(ss_net_paid#71 as decimal(12,2)), 0.00))#93]
Results [3]: [ss_item_sk#68 AS item#94, CheckOverflow((promote_precision(cast(sum(coalesce(sr_return_quantity#75, 0))#90 as decimal(15,4))) / promote_precision(cast(sum(coalesce(ss_quantity#70, 0))#91 as decimal(15,4)))), DecimalType(35,20)) AS return_ratio#95, CheckOverflow((promote_precision(cast(sum(coalesce(cast(sr_return_amt#76 as decimal(12,2)), 0.00))#92 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(ss_net_paid#71 as decimal(12,2)), 0.00))#93 as decimal(15,4)))), DecimalType(35,20)) AS currency_ratio#96]

(60) Exchange
Input [3]: [item#94, return_ratio#95, currency_ratio#96]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(61) Sort [codegen id : 19]
Input [3]: [item#94, return_ratio#95, currency_ratio#96]
Arguments: [return_ratio#95 ASC NULLS FIRST], false, 0

(62) Window
Input [3]: [item#94, return_ratio#95, currency_ratio#96]
Arguments: [rank(return_ratio#95) windowspecdefinition(return_ratio#95 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#97], [return_ratio#95 ASC NULLS FIRST]

(63) Sort [codegen id : 20]
Input [4]: [item#94, return_ratio#95, currency_ratio#96, return_rank#97]
Arguments: [currency_ratio#96 ASC NULLS FIRST], false, 0

(64) Window
Input [4]: [item#94, return_ratio#95, currency_ratio#96, return_rank#97]
Arguments: [rank(currency_ratio#96) windowspecdefinition(currency_ratio#96 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#98], [currency_ratio#96 ASC NULLS FIRST]

(65) Filter [codegen id : 21]
Input [5]: [item#94, return_ratio#95, currency_ratio#96, return_rank#97, currency_rank#98]
Condition : ((return_rank#97 <= 10) OR (currency_rank#98 <= 10))

(66) Project [codegen id : 21]
Output [5]: [store AS channel#99, item#94, return_ratio#95, return_rank#97, currency_rank#98]
Input [5]: [item#94, return_ratio#95, currency_ratio#96, return_rank#97, currency_rank#98]

(67) Union

(68) HashAggregate [codegen id : 22]
Input [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Keys [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]

(69) Exchange
Input [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Arguments: hashpartitioning(channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(70) HashAggregate [codegen id : 23]
Input [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Keys [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]

(71) TakeOrderedAndProject
Input [5]: [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]
Arguments: 100, [channel#33 ASC NULLS FIRST, return_rank#31 ASC NULLS FIRST, currency_rank#32 ASC NULLS FIRST, item#28 ASC NULLS FIRST], [channel#33, item#28, return_ratio#29, return_rank#31, currency_rank#32]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#1 IN dynamicpruning#100
BroadcastExchange (75)
+- * Project (74)
   +- * Filter (73)
      +- BatchScan spark_catalog.default.date_dim (72)


(72) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#101, d_moy#102]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_moy IS NOT NULL, d_year = 2001, d_moy = 12, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(73) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#101, d_moy#102]
Condition : ((((isnotnull(d_year#101) AND isnotnull(d_moy#102)) AND (d_year#101 = 2001)) AND (d_moy#102 = 12)) AND isnotnull(d_date_sk#11))

(74) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#101, d_moy#102]

(75) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:2 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#34 IN dynamicpruning#100

Subquery:3 Hosting operator id = 45 Hosting Expression = ss_sold_date_sk#67 IN dynamicpruning#100


