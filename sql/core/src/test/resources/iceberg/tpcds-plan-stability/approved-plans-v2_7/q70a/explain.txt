== Physical Plan ==
TakeOrderedAndProject (55)
+- * Project (54)
   +- Window (53)
      +- * Sort (52)
         +- Exchange (51)
            +- * HashAggregate (50)
               +- Exchange (49)
                  +- * HashAggregate (48)
                     +- Union (47)
                        :- * HashAggregate (36)
                        :  +- Exchange (35)
                        :     +- * HashAggregate (34)
                        :        +- * Project (33)
                        :           +- * BroadcastHashJoin Inner BuildRight (32)
                        :              :- * Project (6)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :     :- * Project (3)
                        :              :     :  +- * Filter (2)
                        :              :     :     +- BatchScan spark_catalog.default.store_sales (1)
                        :              :     +- ReusedExchange (4)
                        :              +- BroadcastExchange (31)
                        :                 +- * BroadcastHashJoin LeftSemi BuildRight (30)
                        :                    :- * Project (9)
                        :                    :  +- * Filter (8)
                        :                    :     +- BatchScan spark_catalog.default.store (7)
                        :                    +- BroadcastExchange (29)
                        :                       +- * Project (28)
                        :                          +- * Filter (27)
                        :                             +- Window (26)
                        :                                +- * Sort (25)
                        :                                   +- * HashAggregate (24)
                        :                                      +- Exchange (23)
                        :                                         +- * HashAggregate (22)
                        :                                            +- * Project (21)
                        :                                               +- * BroadcastHashJoin Inner BuildRight (20)
                        :                                                  :- * Project (18)
                        :                                                  :  +- * BroadcastHashJoin Inner BuildRight (17)
                        :                                                  :     :- * Project (12)
                        :                                                  :     :  +- * Filter (11)
                        :                                                  :     :     +- BatchScan spark_catalog.default.store_sales (10)
                        :                                                  :     +- BroadcastExchange (16)
                        :                                                  :        +- * Project (15)
                        :                                                  :           +- * Filter (14)
                        :                                                  :              +- BatchScan spark_catalog.default.store (13)
                        :                                                  +- ReusedExchange (19)
                        :- * HashAggregate (41)
                        :  +- Exchange (40)
                        :     +- * HashAggregate (39)
                        :        +- * HashAggregate (38)
                        :           +- ReusedExchange (37)
                        +- * HashAggregate (46)
                           +- Exchange (45)
                              +- * HashAggregate (44)
                                 +- * HashAggregate (43)
                                    +- ReusedExchange (42)


(1) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 8]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(3) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(4) ReusedExchange [Reuses operator id: 59]
Output [1]: [d_date_sk#4]

(5) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 8]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(7) BatchScan spark_catalog.default.store
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Condition : isnotnull(s_store_sk#5)

(9) Project [codegen id : 7]
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]

(10) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_store_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
Condition : (isnotnull(ss_store_sk#9) AND isnotnull(ss_sold_date_sk#8))

(12) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
Input [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]

(13) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#11, s_state#12]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]
Condition : isnotnull(s_store_sk#11)

(15) Project [codegen id : 2]
Output [2]: [s_store_sk#11, s_state#12]
Input [2]: [s_store_sk#11, s_state#12]

(16) BroadcastExchange
Input [2]: [s_store_sk#11, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#9]
Right keys [1]: [s_store_sk#11]
Join condition: None

(18) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#8, ss_net_profit#10, s_state#12]
Input [5]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10, s_store_sk#11, s_state#12]

(19) ReusedExchange [Reuses operator id: 59]
Output [1]: [d_date_sk#13]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join condition: None

(21) Project [codegen id : 4]
Output [2]: [ss_net_profit#10, s_state#12]
Input [4]: [ss_sold_date_sk#8, ss_net_profit#10, s_state#12, d_date_sk#13]

(22) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#10, s_state#12]
Keys [1]: [s_state#12]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum#14]
Results [2]: [s_state#12, sum#15]

(23) Exchange
Input [2]: [s_state#12, sum#15]
Arguments: hashpartitioning(s_state#12, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(24) HashAggregate [codegen id : 5]
Input [2]: [s_state#12, sum#15]
Keys [1]: [s_state#12]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#10))#16]
Results [3]: [s_state#12, s_state#12, MakeDecimal(sum(UnscaledValue(ss_net_profit#10))#16,17,2) AS _w1#17]

(25) Sort [codegen id : 5]
Input [3]: [s_state#12, s_state#12, _w1#17]
Arguments: [s_state#12 ASC NULLS FIRST, _w1#17 DESC NULLS LAST], false, 0

(26) Window
Input [3]: [s_state#12, s_state#12, _w1#17]
Arguments: [rank(_w1#17) windowspecdefinition(s_state#12, _w1#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#18], [s_state#12], [_w1#17 DESC NULLS LAST]

(27) Filter [codegen id : 6]
Input [4]: [s_state#12, s_state#12, _w1#17, ranking#18]
Condition : (ranking#18 <= 5)

(28) Project [codegen id : 6]
Output [1]: [s_state#12]
Input [4]: [s_state#12, s_state#12, _w1#17, ranking#18]

(29) BroadcastExchange
Input [1]: [s_state#12]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_state#7]
Right keys [1]: [s_state#12]
Join condition: None

(31) BroadcastExchange
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#5]
Join condition: None

(33) Project [codegen id : 8]
Output [3]: [ss_net_profit#3, s_county#6, s_state#7]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#5, s_county#6, s_state#7]

(34) HashAggregate [codegen id : 8]
Input [3]: [ss_net_profit#3, s_county#6, s_state#7]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#19]
Results [3]: [s_state#7, s_county#6, sum#20]

(35) Exchange
Input [3]: [s_state#7, s_county#6, sum#20]
Arguments: hashpartitioning(s_state#7, s_county#6, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) HashAggregate [codegen id : 9]
Input [3]: [s_state#7, s_county#6, sum#20]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#21]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#21,17,2) as decimal(27,2)) AS total_sum#22, s_state#7, s_county#6, 0 AS g_state#23, 0 AS g_county#24, 0 AS lochierarchy#25]

(37) ReusedExchange [Reuses operator id: 35]
Output [3]: [s_state#7, s_county#6, sum#26]

(38) HashAggregate [codegen id : 18]
Input [3]: [s_state#7, s_county#6, sum#26]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#21]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#21,17,2) AS total_sum#27, s_state#7]

(39) HashAggregate [codegen id : 18]
Input [2]: [total_sum#27, s_state#7]
Keys [1]: [s_state#7]
Functions [1]: [partial_sum(total_sum#27)]
Aggregate Attributes [2]: [sum#28, isEmpty#29]
Results [3]: [s_state#7, sum#30, isEmpty#31]

(40) Exchange
Input [3]: [s_state#7, sum#30, isEmpty#31]
Arguments: hashpartitioning(s_state#7, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(41) HashAggregate [codegen id : 19]
Input [3]: [s_state#7, sum#30, isEmpty#31]
Keys [1]: [s_state#7]
Functions [1]: [sum(total_sum#27)]
Aggregate Attributes [1]: [sum(total_sum#27)#32]
Results [6]: [sum(total_sum#27)#32 AS total_sum#33, s_state#7, null AS s_county#34, 0 AS g_state#35, 1 AS g_county#36, 1 AS lochierarchy#37]

(42) ReusedExchange [Reuses operator id: 35]
Output [3]: [s_state#7, s_county#6, sum#38]

(43) HashAggregate [codegen id : 28]
Input [3]: [s_state#7, s_county#6, sum#38]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#21]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#21,17,2) AS total_sum#27]

(44) HashAggregate [codegen id : 28]
Input [1]: [total_sum#27]
Keys: []
Functions [1]: [partial_sum(total_sum#27)]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [2]: [sum#41, isEmpty#42]

(45) Exchange
Input [2]: [sum#41, isEmpty#42]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(46) HashAggregate [codegen id : 29]
Input [2]: [sum#41, isEmpty#42]
Keys: []
Functions [1]: [sum(total_sum#27)]
Aggregate Attributes [1]: [sum(total_sum#27)#43]
Results [6]: [sum(total_sum#27)#43 AS total_sum#44, null AS s_state#45, null AS s_county#46, 1 AS g_state#47, 1 AS g_county#48, 2 AS lochierarchy#49]

(47) Union

(48) HashAggregate [codegen id : 30]
Input [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Keys [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]

(49) Exchange
Input [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Arguments: hashpartitioning(total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(50) HashAggregate [codegen id : 31]
Input [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Keys [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, CASE WHEN (g_county#24 = 0) THEN s_state#7 END AS _w0#50]

(51) Exchange
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#50]
Arguments: hashpartitioning(lochierarchy#25, _w0#50, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(52) Sort [codegen id : 32]
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#50]
Arguments: [lochierarchy#25 ASC NULLS FIRST, _w0#50 ASC NULLS FIRST, total_sum#22 DESC NULLS LAST], false, 0

(53) Window
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#50]
Arguments: [rank(total_sum#22) windowspecdefinition(lochierarchy#25, _w0#50, total_sum#22 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#51], [lochierarchy#25, _w0#50], [total_sum#22 DESC NULLS LAST]

(54) Project [codegen id : 33]
Output [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, rank_within_parent#51]
Input [6]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#50, rank_within_parent#51]

(55) TakeOrderedAndProject
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, rank_within_parent#51]
Arguments: 100, [lochierarchy#25 DESC NULLS LAST, CASE WHEN (lochierarchy#25 = 0) THEN s_state#7 END ASC NULLS FIRST, rank_within_parent#51 ASC NULLS FIRST], [total_sum#22, s_state#7, s_county#6, lochierarchy#25, rank_within_parent#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#52
BroadcastExchange (59)
+- * Project (58)
   +- * Filter (57)
      +- BatchScan spark_catalog.default.date_dim (56)


(56) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#53]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1212, d_month_seq <= 1223, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(57) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#53]
Condition : (((isnotnull(d_month_seq#53) AND (d_month_seq#53 >= 1212)) AND (d_month_seq#53 <= 1223)) AND isnotnull(d_date_sk#4))

(58) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#53]

(59) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:2 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#52


