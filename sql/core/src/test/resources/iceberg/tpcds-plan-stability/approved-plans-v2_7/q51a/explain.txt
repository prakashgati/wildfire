== Physical Plan ==
TakeOrderedAndProject (67)
+- * Filter (66)
   +- * HashAggregate (65)
      +- * HashAggregate (64)
         +- * Project (63)
            +- * BroadcastHashJoin Inner BuildRight (62)
               :- Window (56)
               :  +- * Sort (55)
               :     +- Exchange (54)
               :        +- * Project (53)
               :           +- * Filter (52)
               :              +- * SortMergeJoin FullOuter (51)
               :                 :- * Sort (25)
               :                 :  +- Exchange (24)
               :                 :     +- * HashAggregate (23)
               :                 :        +- Exchange (22)
               :                 :           +- * HashAggregate (21)
               :                 :              +- * Project (20)
               :                 :                 +- * BroadcastHashJoin Inner BuildRight (19)
               :                 :                    :- * Project (13)
               :                 :                    :  +- Window (12)
               :                 :                    :     +- * Sort (11)
               :                 :                    :        +- Exchange (10)
               :                 :                    :           +- * HashAggregate (9)
               :                 :                    :              +- Exchange (8)
               :                 :                    :                 +- * HashAggregate (7)
               :                 :                    :                    +- * Project (6)
               :                 :                    :                       +- * BroadcastHashJoin Inner BuildRight (5)
               :                 :                    :                          :- * Project (3)
               :                 :                    :                          :  +- * Filter (2)
               :                 :                    :                          :     +- BatchScan spark_catalog.default.web_sales (1)
               :                 :                    :                          +- ReusedExchange (4)
               :                 :                    +- BroadcastExchange (18)
               :                 :                       +- * Project (17)
               :                 :                          +- Window (16)
               :                 :                             +- * Sort (15)
               :                 :                                +- ReusedExchange (14)
               :                 +- * Sort (50)
               :                    +- Exchange (49)
               :                       +- * HashAggregate (48)
               :                          +- Exchange (47)
               :                             +- * HashAggregate (46)
               :                                +- * Project (45)
               :                                   +- * BroadcastHashJoin Inner BuildRight (44)
               :                                      :- * Project (38)
               :                                      :  +- Window (37)
               :                                      :     +- * Sort (36)
               :                                      :        +- Exchange (35)
               :                                      :           +- * HashAggregate (34)
               :                                      :              +- Exchange (33)
               :                                      :                 +- * HashAggregate (32)
               :                                      :                    +- * Project (31)
               :                                      :                       +- * BroadcastHashJoin Inner BuildRight (30)
               :                                      :                          :- * Project (28)
               :                                      :                          :  +- * Filter (27)
               :                                      :                          :     +- BatchScan spark_catalog.default.store_sales (26)
               :                                      :                          +- ReusedExchange (29)
               :                                      +- BroadcastExchange (43)
               :                                         +- * Project (42)
               :                                            +- Window (41)
               :                                               +- * Sort (40)
               :                                                  +- ReusedExchange (39)
               +- BroadcastExchange (61)
                  +- * Project (60)
                     +- Window (59)
                        +- * Sort (58)
                           +- ReusedExchange (57)


(1) BatchScan spark_catalog.default.web_sales
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_item_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 2]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
Condition : (isnotnull(ws_item_sk#2) AND isnotnull(ws_sold_date_sk#1))

(3) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]

(4) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#4, d_date#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#2, ws_sales_price#3, d_date#5]
Input [5]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3, d_date_sk#4, d_date#5]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#2, ws_sales_price#3, d_date#5]
Keys [2]: [ws_item_sk#2, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#3))]
Aggregate Attributes [1]: [sum#6]
Results [3]: [ws_item_sk#2, d_date#5, sum#7]

(8) Exchange
Input [3]: [ws_item_sk#2, d_date#5, sum#7]
Arguments: hashpartitioning(ws_item_sk#2, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#2, d_date#5, sum#7]
Keys [2]: [ws_item_sk#2, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#3))#8]
Results [4]: [ws_item_sk#2 AS item_sk#9, d_date#5, MakeDecimal(sum(UnscaledValue(ws_sales_price#3))#8,17,2) AS sumws#10, ws_item_sk#2]

(10) Exchange
Input [4]: [item_sk#9, d_date#5, sumws#10, ws_item_sk#2]
Arguments: hashpartitioning(ws_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [4]: [item_sk#9, d_date#5, sumws#10, ws_item_sk#2]
Arguments: [ws_item_sk#2 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(12) Window
Input [4]: [item_sk#9, d_date#5, sumws#10, ws_item_sk#2]
Arguments: [row_number() windowspecdefinition(ws_item_sk#2, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#11], [ws_item_sk#2], [d_date#5 ASC NULLS FIRST]

(13) Project [codegen id : 10]
Output [4]: [item_sk#9, d_date#5, sumws#10, rk#11]
Input [5]: [item_sk#9, d_date#5, sumws#10, ws_item_sk#2, rk#11]

(14) ReusedExchange [Reuses operator id: 10]
Output [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]

(15) Sort [codegen id : 8]
Input [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]
Arguments: [ws_item_sk#13 ASC NULLS FIRST, d_date#12 ASC NULLS FIRST], false, 0

(16) Window
Input [4]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13]
Arguments: [row_number() windowspecdefinition(ws_item_sk#13, d_date#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#14], [ws_item_sk#13], [d_date#12 ASC NULLS FIRST]

(17) Project [codegen id : 9]
Output [3]: [item_sk#9 AS item_sk#15, sumws#10 AS sumws#16, rk#14]
Input [5]: [item_sk#9, d_date#12, sumws#10, ws_item_sk#13, rk#14]

(18) BroadcastExchange
Input [3]: [item_sk#15, sumws#16, rk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(19) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#9]
Right keys [1]: [item_sk#15]
Join condition: (rk#11 >= rk#14)

(20) Project [codegen id : 10]
Output [4]: [item_sk#9, d_date#5, sumws#10, sumws#16]
Input [7]: [item_sk#9, d_date#5, sumws#10, rk#11, item_sk#15, sumws#16, rk#14]

(21) HashAggregate [codegen id : 10]
Input [4]: [item_sk#9, d_date#5, sumws#10, sumws#16]
Keys [3]: [item_sk#9, d_date#5, sumws#10]
Functions [1]: [partial_sum(sumws#16)]
Aggregate Attributes [2]: [sum#17, isEmpty#18]
Results [5]: [item_sk#9, d_date#5, sumws#10, sum#19, isEmpty#20]

(22) Exchange
Input [5]: [item_sk#9, d_date#5, sumws#10, sum#19, isEmpty#20]
Arguments: hashpartitioning(item_sk#9, d_date#5, sumws#10, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) HashAggregate [codegen id : 11]
Input [5]: [item_sk#9, d_date#5, sumws#10, sum#19, isEmpty#20]
Keys [3]: [item_sk#9, d_date#5, sumws#10]
Functions [1]: [sum(sumws#16)]
Aggregate Attributes [1]: [sum(sumws#16)#21]
Results [3]: [item_sk#9, d_date#5, sum(sumws#16)#21 AS cume_sales#22]

(24) Exchange
Input [3]: [item_sk#9, d_date#5, cume_sales#22]
Arguments: hashpartitioning(item_sk#9, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(25) Sort [codegen id : 12]
Input [3]: [item_sk#9, d_date#5, cume_sales#22]
Arguments: [item_sk#9 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(26) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#23, ss_item_sk#24, ss_sales_price#25]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_item_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(27) Filter [codegen id : 14]
Input [3]: [ss_sold_date_sk#23, ss_item_sk#24, ss_sales_price#25]
Condition : (isnotnull(ss_item_sk#24) AND isnotnull(ss_sold_date_sk#23))

(28) Project [codegen id : 14]
Output [3]: [ss_sold_date_sk#23, ss_item_sk#24, ss_sales_price#25]
Input [3]: [ss_sold_date_sk#23, ss_item_sk#24, ss_sales_price#25]

(29) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#26, d_date#27]

(30) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#23]
Right keys [1]: [d_date_sk#26]
Join condition: None

(31) Project [codegen id : 14]
Output [3]: [ss_item_sk#24, ss_sales_price#25, d_date#27]
Input [5]: [ss_sold_date_sk#23, ss_item_sk#24, ss_sales_price#25, d_date_sk#26, d_date#27]

(32) HashAggregate [codegen id : 14]
Input [3]: [ss_item_sk#24, ss_sales_price#25, d_date#27]
Keys [2]: [ss_item_sk#24, d_date#27]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#28]
Results [3]: [ss_item_sk#24, d_date#27, sum#29]

(33) Exchange
Input [3]: [ss_item_sk#24, d_date#27, sum#29]
Arguments: hashpartitioning(ss_item_sk#24, d_date#27, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(34) HashAggregate [codegen id : 15]
Input [3]: [ss_item_sk#24, d_date#27, sum#29]
Keys [2]: [ss_item_sk#24, d_date#27]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#30]
Results [4]: [ss_item_sk#24 AS item_sk#31, d_date#27, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#30,17,2) AS sumss#32, ss_item_sk#24]

(35) Exchange
Input [4]: [item_sk#31, d_date#27, sumss#32, ss_item_sk#24]
Arguments: hashpartitioning(ss_item_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(36) Sort [codegen id : 16]
Input [4]: [item_sk#31, d_date#27, sumss#32, ss_item_sk#24]
Arguments: [ss_item_sk#24 ASC NULLS FIRST, d_date#27 ASC NULLS FIRST], false, 0

(37) Window
Input [4]: [item_sk#31, d_date#27, sumss#32, ss_item_sk#24]
Arguments: [row_number() windowspecdefinition(ss_item_sk#24, d_date#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#33], [ss_item_sk#24], [d_date#27 ASC NULLS FIRST]

(38) Project [codegen id : 22]
Output [4]: [item_sk#31, d_date#27, sumss#32, rk#33]
Input [5]: [item_sk#31, d_date#27, sumss#32, ss_item_sk#24, rk#33]

(39) ReusedExchange [Reuses operator id: 35]
Output [4]: [item_sk#31, d_date#34, sumss#32, ss_item_sk#35]

(40) Sort [codegen id : 20]
Input [4]: [item_sk#31, d_date#34, sumss#32, ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST, d_date#34 ASC NULLS FIRST], false, 0

(41) Window
Input [4]: [item_sk#31, d_date#34, sumss#32, ss_item_sk#35]
Arguments: [row_number() windowspecdefinition(ss_item_sk#35, d_date#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#36], [ss_item_sk#35], [d_date#34 ASC NULLS FIRST]

(42) Project [codegen id : 21]
Output [3]: [item_sk#31 AS item_sk#37, sumss#32 AS sumss#38, rk#36]
Input [5]: [item_sk#31, d_date#34, sumss#32, ss_item_sk#35, rk#36]

(43) BroadcastExchange
Input [3]: [item_sk#37, sumss#38, rk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(44) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [item_sk#31]
Right keys [1]: [item_sk#37]
Join condition: (rk#33 >= rk#36)

(45) Project [codegen id : 22]
Output [4]: [item_sk#31, d_date#27, sumss#32, sumss#38]
Input [7]: [item_sk#31, d_date#27, sumss#32, rk#33, item_sk#37, sumss#38, rk#36]

(46) HashAggregate [codegen id : 22]
Input [4]: [item_sk#31, d_date#27, sumss#32, sumss#38]
Keys [3]: [item_sk#31, d_date#27, sumss#32]
Functions [1]: [partial_sum(sumss#38)]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [5]: [item_sk#31, d_date#27, sumss#32, sum#41, isEmpty#42]

(47) Exchange
Input [5]: [item_sk#31, d_date#27, sumss#32, sum#41, isEmpty#42]
Arguments: hashpartitioning(item_sk#31, d_date#27, sumss#32, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(48) HashAggregate [codegen id : 23]
Input [5]: [item_sk#31, d_date#27, sumss#32, sum#41, isEmpty#42]
Keys [3]: [item_sk#31, d_date#27, sumss#32]
Functions [1]: [sum(sumss#38)]
Aggregate Attributes [1]: [sum(sumss#38)#43]
Results [3]: [item_sk#31, d_date#27, sum(sumss#38)#43 AS cume_sales#44]

(49) Exchange
Input [3]: [item_sk#31, d_date#27, cume_sales#44]
Arguments: hashpartitioning(item_sk#31, d_date#27, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(50) Sort [codegen id : 24]
Input [3]: [item_sk#31, d_date#27, cume_sales#44]
Arguments: [item_sk#31 ASC NULLS FIRST, d_date#27 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 25]
Left keys [2]: [item_sk#9, d_date#5]
Right keys [2]: [item_sk#31, d_date#27]
Join condition: None

(52) Filter [codegen id : 25]
Input [6]: [item_sk#9, d_date#5, cume_sales#22, item_sk#31, d_date#27, cume_sales#44]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#9) THEN item_sk#9 ELSE item_sk#31 END)

(53) Project [codegen id : 25]
Output [4]: [CASE WHEN isnotnull(item_sk#9) THEN item_sk#9 ELSE item_sk#31 END AS item_sk#45, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#27 END AS d_date#46, cume_sales#22 AS web_sales#47, cume_sales#44 AS store_sales#48]
Input [6]: [item_sk#9, d_date#5, cume_sales#22, item_sk#31, d_date#27, cume_sales#44]

(54) Exchange
Input [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Arguments: hashpartitioning(item_sk#45, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(55) Sort [codegen id : 26]
Input [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Arguments: [item_sk#45 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0

(56) Window
Input [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Arguments: [row_number() windowspecdefinition(item_sk#45, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#49], [item_sk#45], [d_date#46 ASC NULLS FIRST]

(57) ReusedExchange [Reuses operator id: 54]
Output [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]

(58) Sort [codegen id : 52]
Input [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Arguments: [item_sk#45 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0

(59) Window
Input [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Arguments: [row_number() windowspecdefinition(item_sk#45, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#50], [item_sk#45], [d_date#46 ASC NULLS FIRST]

(60) Project [codegen id : 53]
Output [4]: [item_sk#45 AS item_sk#51, web_sales#47 AS web_sales#52, store_sales#48 AS store_sales#53, rk#50]
Input [5]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, rk#50]

(61) BroadcastExchange
Input [4]: [item_sk#51, web_sales#52, store_sales#53, rk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

(62) BroadcastHashJoin [codegen id : 54]
Left keys [1]: [item_sk#45]
Right keys [1]: [item_sk#51]
Join condition: (rk#49 >= rk#50)

(63) Project [codegen id : 54]
Output [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, web_sales#52, store_sales#53]
Input [9]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, rk#49, item_sk#51, web_sales#52, store_sales#53, rk#50]

(64) HashAggregate [codegen id : 54]
Input [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, web_sales#52, store_sales#53]
Keys [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Functions [2]: [partial_max(web_sales#52), partial_max(store_sales#53)]
Aggregate Attributes [2]: [max#54, max#55]
Results [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, max#56, max#57]

(65) HashAggregate [codegen id : 54]
Input [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, max#56, max#57]
Keys [4]: [item_sk#45, d_date#46, web_sales#47, store_sales#48]
Functions [2]: [max(web_sales#52), max(store_sales#53)]
Aggregate Attributes [2]: [max(web_sales#52)#58, max(store_sales#53)#59]
Results [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, max(web_sales#52)#58 AS web_cumulative#60, max(store_sales#53)#59 AS store_cumulative#61]

(66) Filter [codegen id : 54]
Input [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, web_cumulative#60, store_cumulative#61]
Condition : ((isnotnull(web_cumulative#60) AND isnotnull(store_cumulative#61)) AND (web_cumulative#60 > store_cumulative#61))

(67) TakeOrderedAndProject
Input [6]: [item_sk#45, d_date#46, web_sales#47, store_sales#48, web_cumulative#60, store_cumulative#61]
Arguments: 100, [item_sk#45 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], [item_sk#45, d_date#46, web_sales#47, store_sales#48, web_cumulative#60, store_cumulative#61]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#1 IN dynamicpruning#62
BroadcastExchange (71)
+- * Project (70)
   +- * Filter (69)
      +- BatchScan spark_catalog.default.date_dim (68)


(68) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#63]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1212, d_month_seq <= 1223, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(69) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#63]
Condition : (((isnotnull(d_month_seq#63) AND (d_month_seq#63 >= 1212)) AND (d_month_seq#63 <= 1223)) AND isnotnull(d_date_sk#4))

(70) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#63]

(71) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 26 Hosting Expression = ss_sold_date_sk#23 IN dynamicpruning#62


