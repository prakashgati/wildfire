== Physical Plan ==
TakeOrderedAndProject (39)
+- * Filter (38)
   +- * HashAggregate (37)
      +- Exchange (36)
         +- * HashAggregate (35)
            +- * Project (34)
               +- * BroadcastHashJoin Inner BuildRight (33)
                  :- * Project (18)
                  :  +- * BroadcastHashJoin Inner BuildRight (17)
                  :     :- * Project (15)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :     :     :- * Project (9)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :- * Project (3)
                  :     :     :     :  +- * Filter (2)
                  :     :     :     :     +- BatchScan spark_catalog.default.customer_address (1)
                  :     :     :     +- BroadcastExchange (7)
                  :     :     :        +- * Project (6)
                  :     :     :           +- * Filter (5)
                  :     :     :              +- BatchScan spark_catalog.default.customer (4)
                  :     :     +- BroadcastExchange (13)
                  :     :        +- * Project (12)
                  :     :           +- * Filter (11)
                  :     :              +- BatchScan spark_catalog.default.store_sales (10)
                  :     +- ReusedExchange (16)
                  +- BroadcastExchange (32)
                     +- * Project (31)
                        +- * Filter (30)
                           +- * BroadcastHashJoin LeftOuter BuildRight (29)
                              :- * Project (21)
                              :  +- * Filter (20)
                              :     +- BatchScan spark_catalog.default.item (19)
                              +- BroadcastExchange (28)
                                 +- * HashAggregate (27)
                                    +- Exchange (26)
                                       +- * HashAggregate (25)
                                          +- * Project (24)
                                             +- * Filter (23)
                                                +- BatchScan spark_catalog.default.item (22)


(1) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 7]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(3) Project [codegen id : 7]
Output [2]: [ca_address_sk#1, ca_state#2]
Input [2]: [ca_address_sk#1, ca_state#2]

(4) BatchScan spark_catalog.default.customer
Output [2]: [c_customer_sk#3, c_current_addr_sk#4]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_current_addr_sk IS NOT NULL, c_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [c_customer_sk#3, c_current_addr_sk#4]
Condition : (isnotnull(c_current_addr_sk#4) AND isnotnull(c_customer_sk#3))

(6) Project [codegen id : 1]
Output [2]: [c_customer_sk#3, c_current_addr_sk#4]
Input [2]: [c_customer_sk#3, c_current_addr_sk#4]

(7) BroadcastExchange
Input [2]: [c_customer_sk#3, c_current_addr_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#4]
Join condition: None

(9) Project [codegen id : 7]
Output [2]: [ca_state#2, c_customer_sk#3]
Input [4]: [ca_address_sk#1, ca_state#2, c_customer_sk#3, c_current_addr_sk#4]

(10) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_customer_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL, ss_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7]
Condition : ((isnotnull(ss_customer_sk#7) AND isnotnull(ss_sold_date_sk#5)) AND isnotnull(ss_item_sk#6))

(12) Project [codegen id : 2]
Output [3]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7]
Input [3]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7]

(13) BroadcastExchange
Input [3]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(15) Project [codegen id : 7]
Output [3]: [ca_state#2, ss_sold_date_sk#5, ss_item_sk#6]
Input [5]: [ca_state#2, c_customer_sk#3, ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7]

(16) ReusedExchange [Reuses operator id: 43]
Output [1]: [d_date_sk#8]

(17) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#8]
Join condition: None

(18) Project [codegen id : 7]
Output [2]: [ca_state#2, ss_item_sk#6]
Input [4]: [ca_state#2, ss_sold_date_sk#5, ss_item_sk#6, d_date_sk#8]

(19) BatchScan spark_catalog.default.item
Output [3]: [i_item_sk#9, i_current_price#10, i_category#11]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_current_price IS NOT NULL, i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 6]
Input [3]: [i_item_sk#9, i_current_price#10, i_category#11]
Condition : (isnotnull(i_current_price#10) AND isnotnull(i_item_sk#9))

(21) Project [codegen id : 6]
Output [3]: [i_item_sk#9, i_current_price#10, i_category#11]
Input [3]: [i_item_sk#9, i_current_price#10, i_category#11]

(22) BatchScan spark_catalog.default.item
Output [2]: [i_current_price#12, i_category#13]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 4]
Input [2]: [i_current_price#12, i_category#13]
Condition : isnotnull(i_category#13)

(24) Project [codegen id : 4]
Output [2]: [i_current_price#12, i_category#13]
Input [2]: [i_current_price#12, i_category#13]

(25) HashAggregate [codegen id : 4]
Input [2]: [i_current_price#12, i_category#13]
Keys [1]: [i_category#13]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#12))]
Aggregate Attributes [2]: [sum#14, count#15]
Results [3]: [i_category#13, sum#16, count#17]

(26) Exchange
Input [3]: [i_category#13, sum#16, count#17]
Arguments: hashpartitioning(i_category#13, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(27) HashAggregate [codegen id : 5]
Input [3]: [i_category#13, sum#16, count#17]
Keys [1]: [i_category#13]
Functions [1]: [avg(UnscaledValue(i_current_price#12))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#12))#18]
Results [2]: [cast((avg(UnscaledValue(i_current_price#12))#18 / 100.0) as decimal(11,6)) AS avg(i_current_price)#19, i_category#13]

(28) BroadcastExchange
Input [2]: [avg(i_current_price)#19, i_category#13]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_category#11]
Right keys [1]: [i_category#13]
Join condition: None

(30) Filter [codegen id : 6]
Input [5]: [i_item_sk#9, i_current_price#10, i_category#11, avg(i_current_price)#19, i_category#13]
Condition : (cast(i_current_price#10 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#19)), DecimalType(14,7)))

(31) Project [codegen id : 6]
Output [1]: [i_item_sk#9]
Input [5]: [i_item_sk#9, i_current_price#10, i_category#11, avg(i_current_price)#19, i_category#13]

(32) BroadcastExchange
Input [1]: [i_item_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(33) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#9]
Join condition: None

(34) Project [codegen id : 7]
Output [1]: [ca_state#2]
Input [3]: [ca_state#2, ss_item_sk#6, i_item_sk#9]

(35) HashAggregate [codegen id : 7]
Input [1]: [ca_state#2]
Keys [1]: [ca_state#2]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#20]
Results [2]: [ca_state#2, count#21]

(36) Exchange
Input [2]: [ca_state#2, count#21]
Arguments: hashpartitioning(ca_state#2, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(37) HashAggregate [codegen id : 8]
Input [2]: [ca_state#2, count#21]
Keys [1]: [ca_state#2]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#22]
Results [3]: [ca_state#2 AS state#23, count(1)#22 AS cnt#24, ca_state#2]

(38) Filter [codegen id : 8]
Input [3]: [state#23, cnt#24, ca_state#2]
Condition : (cnt#24 >= 10)

(39) TakeOrderedAndProject
Input [3]: [state#23, cnt#24, ca_state#2]
Arguments: 100, [cnt#24 ASC NULLS FIRST, ca_state#2 ASC NULLS FIRST], [state#23, cnt#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#25
BroadcastExchange (43)
+- * Project (42)
   +- * Filter (41)
      +- BatchScan spark_catalog.default.date_dim (40)


(40) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#26]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(41) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#26]
Condition : ((isnotnull(d_month_seq#26) AND isnotnull(d_date_sk#8)) AND (d_month_seq#26 = Subquery scalar-subquery#27, [id=#28]))

(42) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#26]

(43) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 41 Hosting Expression = Subquery scalar-subquery#27, [id=#28]
* HashAggregate (49)
+- Exchange (48)
   +- * HashAggregate (47)
      +- * Project (46)
         +- * Filter (45)
            +- BatchScan spark_catalog.default.date_dim (44)


(44) BatchScan spark_catalog.default.date_dim
Output [3]: [d_month_seq#29, d_year#30, d_moy#31]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_moy IS NOT NULL, d_year = 2000, d_moy = 1], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(45) Filter [codegen id : 1]
Input [3]: [d_month_seq#29, d_year#30, d_moy#31]
Condition : (((isnotnull(d_year#30) AND isnotnull(d_moy#31)) AND (d_year#30 = 2000)) AND (d_moy#31 = 1))

(46) Project [codegen id : 1]
Output [1]: [d_month_seq#29]
Input [3]: [d_month_seq#29, d_year#30, d_moy#31]

(47) HashAggregate [codegen id : 1]
Input [1]: [d_month_seq#29]
Keys [1]: [d_month_seq#29]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#29]

(48) Exchange
Input [1]: [d_month_seq#29]
Arguments: hashpartitioning(d_month_seq#29, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(49) HashAggregate [codegen id : 2]
Input [1]: [d_month_seq#29]
Keys [1]: [d_month_seq#29]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#29]


