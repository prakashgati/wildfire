== Physical Plan ==
TakeOrderedAndProject (105)
+- * Project (104)
   +- * BroadcastHashJoin Inner BuildRight (103)
      :- * HashAggregate (58)
      :  +- Exchange (57)
      :     +- * HashAggregate (56)
      :        +- * HashAggregate (55)
      :           +- Exchange (54)
      :              +- * HashAggregate (53)
      :                 +- Union (52)
      :                    :- * Project (18)
      :                    :  +- * BroadcastHashJoin LeftOuter BuildRight (17)
      :                    :     :- * Project (12)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (11)
      :                    :     :     :- * Project (9)
      :                    :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :                    :     :     :     :- * Project (3)
      :                    :     :     :     :  +- * Filter (2)
      :                    :     :     :     :     +- BatchScan spark_catalog.default.catalog_sales (1)
      :                    :     :     :     +- BroadcastExchange (7)
      :                    :     :     :        +- * Project (6)
      :                    :     :     :           +- * Filter (5)
      :                    :     :     :              +- BatchScan spark_catalog.default.item (4)
      :                    :     :     +- ReusedExchange (10)
      :                    :     +- BroadcastExchange (16)
      :                    :        +- * Project (15)
      :                    :           +- * Filter (14)
      :                    :              +- BatchScan spark_catalog.default.catalog_returns (13)
      :                    :- * Project (36)
      :                    :  +- * BroadcastHashJoin LeftOuter BuildRight (35)
      :                    :     :- * Project (30)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (29)
      :                    :     :     :- * Project (27)
      :                    :     :     :  +- * BroadcastHashJoin Inner BuildRight (26)
      :                    :     :     :     :- * Project (21)
      :                    :     :     :     :  +- * Filter (20)
      :                    :     :     :     :     +- BatchScan spark_catalog.default.store_sales (19)
      :                    :     :     :     +- BroadcastExchange (25)
      :                    :     :     :        +- * Project (24)
      :                    :     :     :           +- * Filter (23)
      :                    :     :     :              +- BatchScan spark_catalog.default.item (22)
      :                    :     :     +- ReusedExchange (28)
      :                    :     +- BroadcastExchange (34)
      :                    :        +- * Project (33)
      :                    :           +- * Filter (32)
      :                    :              +- BatchScan spark_catalog.default.store_returns (31)
      :                    +- * Project (51)
      :                       +- * BroadcastHashJoin LeftOuter BuildRight (50)
      :                          :- * Project (45)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (44)
      :                          :     :- * Project (42)
      :                          :     :  +- * BroadcastHashJoin Inner BuildRight (41)
      :                          :     :     :- * Project (39)
      :                          :     :     :  +- * Filter (38)
      :                          :     :     :     +- BatchScan spark_catalog.default.web_sales (37)
      :                          :     :     +- ReusedExchange (40)
      :                          :     +- ReusedExchange (43)
      :                          +- BroadcastExchange (49)
      :                             +- * Project (48)
      :                                +- * Filter (47)
      :                                   +- BatchScan spark_catalog.default.web_returns (46)
      +- BroadcastExchange (102)
         +- * HashAggregate (101)
            +- Exchange (100)
               +- * HashAggregate (99)
                  +- * HashAggregate (98)
                     +- Exchange (97)
                        +- * HashAggregate (96)
                           +- Union (95)
                              :- * Project (70)
                              :  +- * BroadcastHashJoin LeftOuter BuildRight (69)
                              :     :- * Project (67)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (66)
                              :     :     :- * Project (64)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (63)
                              :     :     :     :- * Project (61)
                              :     :     :     :  +- * Filter (60)
                              :     :     :     :     +- BatchScan spark_catalog.default.catalog_sales (59)
                              :     :     :     +- ReusedExchange (62)
                              :     :     +- ReusedExchange (65)
                              :     +- ReusedExchange (68)
                              :- * Project (82)
                              :  +- * BroadcastHashJoin LeftOuter BuildRight (81)
                              :     :- * Project (79)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (78)
                              :     :     :- * Project (76)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (75)
                              :     :     :     :- * Project (73)
                              :     :     :     :  +- * Filter (72)
                              :     :     :     :     +- BatchScan spark_catalog.default.store_sales (71)
                              :     :     :     +- ReusedExchange (74)
                              :     :     +- ReusedExchange (77)
                              :     +- ReusedExchange (80)
                              +- * Project (94)
                                 +- * BroadcastHashJoin LeftOuter BuildRight (93)
                                    :- * Project (91)
                                    :  +- * BroadcastHashJoin Inner BuildRight (90)
                                    :     :- * Project (88)
                                    :     :  +- * BroadcastHashJoin Inner BuildRight (87)
                                    :     :     :- * Project (85)
                                    :     :     :  +- * Filter (84)
                                    :     :     :     +- BatchScan spark_catalog.default.web_sales (83)
                                    :     :     +- ReusedExchange (86)
                                    :     +- ReusedExchange (89)
                                    +- ReusedExchange (92)


(1) BatchScan spark_catalog.default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_item_sk IS NOT NULL, cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_sold_date_sk#1))

(3) Project [codegen id : 4]
Output [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
Input [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]

(4) BatchScan spark_catalog.default.item
Output [6]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, i_category#10, i_manufact_id#11]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_category IS NOT NULL, i_category = 'Books', i_item_sk IS NOT NULL, i_brand_id IS NOT NULL, i_class_id IS NOT NULL, i_category_id IS NOT NULL, i_manufact_id IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [6]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, i_category#10, i_manufact_id#11]
Condition : ((((((isnotnull(i_category#10) AND (i_category#10 = Books)) AND isnotnull(i_item_sk#6)) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9)) AND isnotnull(i_manufact_id#11))

(6) Project [codegen id : 1]
Output [5]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]
Input [6]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, i_category#10, i_manufact_id#11]

(7) BroadcastExchange
Input [5]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(9) Project [codegen id : 4]
Output [9]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]
Input [10]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]

(10) ReusedExchange [Reuses operator id: 109]
Output [2]: [d_date_sk#12, d_year#13]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#12]
Join condition: None

(12) Project [codegen id : 4]
Output [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, d_year#13]
Input [11]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, d_date_sk#12, d_year#13]

(13) BatchScan spark_catalog.default.catalog_returns
Output [4]: [cr_item_sk#14, cr_order_number#15, cr_return_quantity#16, cr_return_amount#17]
spark_catalog.default.catalog_returns [scan class = SparkBatchQueryScan] [filters=cr_order_number IS NOT NULL, cr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [4]: [cr_item_sk#14, cr_order_number#15, cr_return_quantity#16, cr_return_amount#17]
Condition : (isnotnull(cr_order_number#15) AND isnotnull(cr_item_sk#14))

(15) Project [codegen id : 3]
Output [4]: [cr_item_sk#14, cr_order_number#15, cr_return_quantity#16, cr_return_amount#17]
Input [4]: [cr_item_sk#14, cr_order_number#15, cr_return_quantity#16, cr_return_amount#17]

(16) BroadcastExchange
Input [4]: [cr_item_sk#14, cr_order_number#15, cr_return_quantity#16, cr_return_amount#17]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [cs_order_number#3, cs_item_sk#2]
Right keys [2]: [cr_order_number#15, cr_item_sk#14]
Join condition: None

(18) Project [codegen id : 4]
Output [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, (cs_quantity#4 - coalesce(cr_return_quantity#16, 0)) AS sales_cnt#18, CheckOverflow((promote_precision(cast(cs_ext_sales_price#5 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#17, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#19]
Input [13]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, d_year#13, cr_item_sk#14, cr_order_number#15, cr_return_quantity#16, cr_return_amount#17]

(19) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_item_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 8]
Input [5]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24]
Condition : (isnotnull(ss_item_sk#21) AND isnotnull(ss_sold_date_sk#20))

(21) Project [codegen id : 8]
Output [5]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24]
Input [5]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24]

(22) BatchScan spark_catalog.default.item
Output [6]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28, i_category#29, i_manufact_id#30]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_category IS NOT NULL, i_category = 'Books', i_item_sk IS NOT NULL, i_brand_id IS NOT NULL, i_class_id IS NOT NULL, i_category_id IS NOT NULL, i_manufact_id IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(23) Filter [codegen id : 5]
Input [6]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28, i_category#29, i_manufact_id#30]
Condition : ((((((isnotnull(i_category#29) AND (i_category#29 = Books)) AND isnotnull(i_item_sk#25)) AND isnotnull(i_brand_id#26)) AND isnotnull(i_class_id#27)) AND isnotnull(i_category_id#28)) AND isnotnull(i_manufact_id#30))

(24) Project [codegen id : 5]
Output [5]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30]
Input [6]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28, i_category#29, i_manufact_id#30]

(25) BroadcastExchange
Input [5]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#21]
Right keys [1]: [i_item_sk#25]
Join condition: None

(27) Project [codegen id : 8]
Output [9]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30]
Input [10]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24, i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30]

(28) ReusedExchange [Reuses operator id: 109]
Output [2]: [d_date_sk#31, d_year#32]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#20]
Right keys [1]: [d_date_sk#31]
Join condition: None

(30) Project [codegen id : 8]
Output [9]: [ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30, d_year#32]
Input [11]: [ss_sold_date_sk#20, ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30, d_date_sk#31, d_year#32]

(31) BatchScan spark_catalog.default.store_returns
Output [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_ticket_number IS NOT NULL, sr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(32) Filter [codegen id : 7]
Input [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Condition : (isnotnull(sr_ticket_number#34) AND isnotnull(sr_item_sk#33))

(33) Project [codegen id : 7]
Output [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Input [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]

(34) BroadcastExchange
Input [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=4]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [ss_ticket_number#22, ss_item_sk#21]
Right keys [2]: [sr_ticket_number#34, sr_item_sk#33]
Join condition: None

(36) Project [codegen id : 8]
Output [7]: [d_year#32, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30, (ss_quantity#23 - coalesce(sr_return_quantity#35, 0)) AS sales_cnt#37, CheckOverflow((promote_precision(cast(ss_ext_sales_price#24 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#36, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#38]
Input [13]: [ss_item_sk#21, ss_ticket_number#22, ss_quantity#23, ss_ext_sales_price#24, i_brand_id#26, i_class_id#27, i_category_id#28, i_manufact_id#30, d_year#32, sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]

(37) BatchScan spark_catalog.default.web_sales
Output [5]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_item_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(38) Filter [codegen id : 12]
Input [5]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43]
Condition : (isnotnull(ws_item_sk#40) AND isnotnull(ws_sold_date_sk#39))

(39) Project [codegen id : 12]
Output [5]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43]
Input [5]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43]

(40) ReusedExchange [Reuses operator id: 25]
Output [5]: [i_item_sk#44, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48]

(41) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_item_sk#40]
Right keys [1]: [i_item_sk#44]
Join condition: None

(42) Project [codegen id : 12]
Output [9]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48]
Input [10]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43, i_item_sk#44, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48]

(43) ReusedExchange [Reuses operator id: 109]
Output [2]: [d_date_sk#49, d_year#50]

(44) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_sold_date_sk#39]
Right keys [1]: [d_date_sk#49]
Join condition: None

(45) Project [codegen id : 12]
Output [9]: [ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48, d_year#50]
Input [11]: [ws_sold_date_sk#39, ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48, d_date_sk#49, d_year#50]

(46) BatchScan spark_catalog.default.web_returns
Output [4]: [wr_item_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_order_number IS NOT NULL, wr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(47) Filter [codegen id : 11]
Input [4]: [wr_item_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54]
Condition : (isnotnull(wr_order_number#52) AND isnotnull(wr_item_sk#51))

(48) Project [codegen id : 11]
Output [4]: [wr_item_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54]
Input [4]: [wr_item_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54]

(49) BroadcastExchange
Input [4]: [wr_item_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=5]

(50) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [ws_order_number#41, ws_item_sk#40]
Right keys [2]: [wr_order_number#52, wr_item_sk#51]
Join condition: None

(51) Project [codegen id : 12]
Output [7]: [d_year#50, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48, (ws_quantity#42 - coalesce(wr_return_quantity#53, 0)) AS sales_cnt#55, CheckOverflow((promote_precision(cast(ws_ext_sales_price#43 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#54, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#56]
Input [13]: [ws_item_sk#40, ws_order_number#41, ws_quantity#42, ws_ext_sales_price#43, i_brand_id#45, i_class_id#46, i_category_id#47, i_manufact_id#48, d_year#50, wr_item_sk#51, wr_order_number#52, wr_return_quantity#53, wr_return_amt#54]

(52) Union

(53) HashAggregate [codegen id : 13]
Input [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]
Keys [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]

(54) Exchange
Input [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]
Arguments: hashpartitioning(d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(55) HashAggregate [codegen id : 14]
Input [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]
Keys [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]

(56) HashAggregate [codegen id : 14]
Input [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#18, sales_amt#19]
Keys [5]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]
Functions [2]: [partial_sum(sales_cnt#18), partial_sum(UnscaledValue(sales_amt#19))]
Aggregate Attributes [2]: [sum#57, sum#58]
Results [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sum#59, sum#60]

(57) Exchange
Input [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sum#59, sum#60]
Arguments: hashpartitioning(d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(58) HashAggregate [codegen id : 30]
Input [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sum#59, sum#60]
Keys [5]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]
Functions [2]: [sum(sales_cnt#18), sum(UnscaledValue(sales_amt#19))]
Aggregate Attributes [2]: [sum(sales_cnt#18)#61, sum(UnscaledValue(sales_amt#19))#62]
Results [7]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sum(sales_cnt#18)#61 AS sales_cnt#63, MakeDecimal(sum(UnscaledValue(sales_amt#19))#62,18,2) AS sales_amt#64]

(59) BatchScan spark_catalog.default.catalog_sales
Output [5]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_item_sk IS NOT NULL, cs_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(60) Filter [codegen id : 18]
Input [5]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69]
Condition : (isnotnull(cs_item_sk#66) AND isnotnull(cs_sold_date_sk#65))

(61) Project [codegen id : 18]
Output [5]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69]
Input [5]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69]

(62) ReusedExchange [Reuses operator id: 25]
Output [5]: [i_item_sk#70, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74]

(63) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [i_item_sk#70]
Join condition: None

(64) Project [codegen id : 18]
Output [9]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74]
Input [10]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69, i_item_sk#70, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74]

(65) ReusedExchange [Reuses operator id: 113]
Output [2]: [d_date_sk#75, d_year#76]

(66) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_sold_date_sk#65]
Right keys [1]: [d_date_sk#75]
Join condition: None

(67) Project [codegen id : 18]
Output [9]: [cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, d_year#76]
Input [11]: [cs_sold_date_sk#65, cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, d_date_sk#75, d_year#76]

(68) ReusedExchange [Reuses operator id: 16]
Output [4]: [cr_item_sk#77, cr_order_number#78, cr_return_quantity#79, cr_return_amount#80]

(69) BroadcastHashJoin [codegen id : 18]
Left keys [2]: [cs_order_number#67, cs_item_sk#66]
Right keys [2]: [cr_order_number#78, cr_item_sk#77]
Join condition: None

(70) Project [codegen id : 18]
Output [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, (cs_quantity#68 - coalesce(cr_return_quantity#79, 0)) AS sales_cnt#18, CheckOverflow((promote_precision(cast(cs_ext_sales_price#69 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#80, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#19]
Input [13]: [cs_item_sk#66, cs_order_number#67, cs_quantity#68, cs_ext_sales_price#69, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, d_year#76, cr_item_sk#77, cr_order_number#78, cr_return_quantity#79, cr_return_amount#80]

(71) BatchScan spark_catalog.default.store_sales
Output [5]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_item_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(72) Filter [codegen id : 22]
Input [5]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85]
Condition : (isnotnull(ss_item_sk#82) AND isnotnull(ss_sold_date_sk#81))

(73) Project [codegen id : 22]
Output [5]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85]
Input [5]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85]

(74) ReusedExchange [Reuses operator id: 25]
Output [5]: [i_item_sk#86, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90]

(75) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ss_item_sk#82]
Right keys [1]: [i_item_sk#86]
Join condition: None

(76) Project [codegen id : 22]
Output [9]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90]
Input [10]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85, i_item_sk#86, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90]

(77) ReusedExchange [Reuses operator id: 113]
Output [2]: [d_date_sk#91, d_year#92]

(78) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ss_sold_date_sk#81]
Right keys [1]: [d_date_sk#91]
Join condition: None

(79) Project [codegen id : 22]
Output [9]: [ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90, d_year#92]
Input [11]: [ss_sold_date_sk#81, ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90, d_date_sk#91, d_year#92]

(80) ReusedExchange [Reuses operator id: 34]
Output [4]: [sr_item_sk#93, sr_ticket_number#94, sr_return_quantity#95, sr_return_amt#96]

(81) BroadcastHashJoin [codegen id : 22]
Left keys [2]: [ss_ticket_number#83, ss_item_sk#82]
Right keys [2]: [sr_ticket_number#94, sr_item_sk#93]
Join condition: None

(82) Project [codegen id : 22]
Output [7]: [d_year#92, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90, (ss_quantity#84 - coalesce(sr_return_quantity#95, 0)) AS sales_cnt#37, CheckOverflow((promote_precision(cast(ss_ext_sales_price#85 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#96, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#38]
Input [13]: [ss_item_sk#82, ss_ticket_number#83, ss_quantity#84, ss_ext_sales_price#85, i_brand_id#87, i_class_id#88, i_category_id#89, i_manufact_id#90, d_year#92, sr_item_sk#93, sr_ticket_number#94, sr_return_quantity#95, sr_return_amt#96]

(83) BatchScan spark_catalog.default.web_sales
Output [5]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_item_sk IS NOT NULL, ws_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(84) Filter [codegen id : 26]
Input [5]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101]
Condition : (isnotnull(ws_item_sk#98) AND isnotnull(ws_sold_date_sk#97))

(85) Project [codegen id : 26]
Output [5]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101]
Input [5]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101]

(86) ReusedExchange [Reuses operator id: 25]
Output [5]: [i_item_sk#102, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106]

(87) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [ws_item_sk#98]
Right keys [1]: [i_item_sk#102]
Join condition: None

(88) Project [codegen id : 26]
Output [9]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106]
Input [10]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101, i_item_sk#102, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106]

(89) ReusedExchange [Reuses operator id: 113]
Output [2]: [d_date_sk#107, d_year#108]

(90) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [ws_sold_date_sk#97]
Right keys [1]: [d_date_sk#107]
Join condition: None

(91) Project [codegen id : 26]
Output [9]: [ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106, d_year#108]
Input [11]: [ws_sold_date_sk#97, ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106, d_date_sk#107, d_year#108]

(92) ReusedExchange [Reuses operator id: 49]
Output [4]: [wr_item_sk#109, wr_order_number#110, wr_return_quantity#111, wr_return_amt#112]

(93) BroadcastHashJoin [codegen id : 26]
Left keys [2]: [ws_order_number#99, ws_item_sk#98]
Right keys [2]: [wr_order_number#110, wr_item_sk#109]
Join condition: None

(94) Project [codegen id : 26]
Output [7]: [d_year#108, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106, (ws_quantity#100 - coalesce(wr_return_quantity#111, 0)) AS sales_cnt#55, CheckOverflow((promote_precision(cast(ws_ext_sales_price#101 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#112, 0.00) as decimal(8,2)))), DecimalType(8,2)) AS sales_amt#56]
Input [13]: [ws_item_sk#98, ws_order_number#99, ws_quantity#100, ws_ext_sales_price#101, i_brand_id#103, i_class_id#104, i_category_id#105, i_manufact_id#106, d_year#108, wr_item_sk#109, wr_order_number#110, wr_return_quantity#111, wr_return_amt#112]

(95) Union

(96) HashAggregate [codegen id : 27]
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]
Keys [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]

(97) Exchange
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]
Arguments: hashpartitioning(d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(98) HashAggregate [codegen id : 28]
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]
Keys [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]

(99) HashAggregate [codegen id : 28]
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#18, sales_amt#19]
Keys [5]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74]
Functions [2]: [partial_sum(sales_cnt#18), partial_sum(UnscaledValue(sales_amt#19))]
Aggregate Attributes [2]: [sum#57, sum#113]
Results [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sum#59, sum#114]

(100) Exchange
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sum#59, sum#114]
Arguments: hashpartitioning(d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(101) HashAggregate [codegen id : 29]
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sum#59, sum#114]
Keys [5]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74]
Functions [2]: [sum(sales_cnt#18), sum(UnscaledValue(sales_amt#19))]
Aggregate Attributes [2]: [sum(sales_cnt#18)#61, sum(UnscaledValue(sales_amt#19))#62]
Results [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sum(sales_cnt#18)#61 AS sales_cnt#115, MakeDecimal(sum(UnscaledValue(sales_amt#19))#62,18,2) AS sales_amt#116]

(102) BroadcastExchange
Input [7]: [d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#115, sales_amt#116]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true], input[4, int, true]),false), [plan_id=10]

(103) BroadcastHashJoin [codegen id : 30]
Left keys [4]: [i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11]
Right keys [4]: [i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74]
Join condition: (CheckOverflow((promote_precision(cast(sales_cnt#63 as decimal(17,2))) / promote_precision(cast(sales_cnt#115 as decimal(17,2)))), DecimalType(37,20)) < 0.90000000000000000000)

(104) Project [codegen id : 30]
Output [10]: [d_year#76 AS prev_year#117, d_year#13 AS year#118, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#115 AS prev_yr_cnt#119, sales_cnt#63 AS curr_yr_cnt#120, (sales_cnt#63 - sales_cnt#115) AS sales_cnt_diff#121, CheckOverflow((promote_precision(cast(sales_amt#64 as decimal(19,2))) - promote_precision(cast(sales_amt#116 as decimal(19,2)))), DecimalType(19,2)) AS sales_amt_diff#122]
Input [14]: [d_year#13, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, sales_cnt#63, sales_amt#64, d_year#76, i_brand_id#71, i_class_id#72, i_category_id#73, i_manufact_id#74, sales_cnt#115, sales_amt#116]

(105) TakeOrderedAndProject
Input [10]: [prev_year#117, year#118, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, prev_yr_cnt#119, curr_yr_cnt#120, sales_cnt_diff#121, sales_amt_diff#122]
Arguments: 100, [sales_cnt_diff#121 ASC NULLS FIRST, sales_amt_diff#122 ASC NULLS FIRST], [prev_year#117, year#118, i_brand_id#7, i_class_id#8, i_category_id#9, i_manufact_id#11, prev_yr_cnt#119, curr_yr_cnt#120, sales_cnt_diff#121, sales_amt_diff#122]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#1 IN dynamicpruning#123
BroadcastExchange (109)
+- * Project (108)
   +- * Filter (107)
      +- BatchScan spark_catalog.default.date_dim (106)


(106) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2002, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(107) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_year#13) AND (d_year#13 = 2002)) AND isnotnull(d_date_sk#12))

(108) Project [codegen id : 1]
Output [2]: [d_date_sk#12, d_year#13]
Input [2]: [d_date_sk#12, d_year#13]

(109) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:2 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#20 IN dynamicpruning#123

Subquery:3 Hosting operator id = 37 Hosting Expression = ws_sold_date_sk#39 IN dynamicpruning#123

Subquery:4 Hosting operator id = 59 Hosting Expression = cs_sold_date_sk#65 IN dynamicpruning#124
BroadcastExchange (113)
+- * Project (112)
   +- * Filter (111)
      +- BatchScan spark_catalog.default.date_dim (110)


(110) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#75, d_year#76]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2001, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(111) Filter [codegen id : 1]
Input [2]: [d_date_sk#75, d_year#76]
Condition : ((isnotnull(d_year#76) AND (d_year#76 = 2001)) AND isnotnull(d_date_sk#75))

(112) Project [codegen id : 1]
Output [2]: [d_date_sk#75, d_year#76]
Input [2]: [d_date_sk#75, d_year#76]

(113) BroadcastExchange
Input [2]: [d_date_sk#75, d_year#76]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:5 Hosting operator id = 71 Hosting Expression = ss_sold_date_sk#81 IN dynamicpruning#124

Subquery:6 Hosting operator id = 83 Hosting Expression = ws_sold_date_sk#97 IN dynamicpruning#124


