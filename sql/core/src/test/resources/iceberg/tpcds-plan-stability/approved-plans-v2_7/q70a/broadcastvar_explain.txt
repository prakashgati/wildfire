== Physical Plan ==
TakeOrderedAndProject (85)
+- * Project (84)
   +- Window (83)
      +- * Sort (82)
         +- Exchange (81)
            +- * HashAggregate (80)
               +- Exchange (79)
                  +- * HashAggregate (78)
                     +- Union (77)
                        :- * HashAggregate (36)
                        :  +- Exchange (35)
                        :     +- * HashAggregate (34)
                        :        +- * Project (33)
                        :           +- * BroadcastHashJoin Inner BuildRight (32)
                        :              :- * Project (6)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :     :- * Project (3)
                        :              :     :  +- * Filter (2)
                        :              :     :     +- BatchScan spark_catalog.default.store_sales (1)
                        :              :     +- ReusedExchange (4)
                        :              +- BroadcastExchange (31)
                        :                 +- * BroadcastHashJoin LeftSemi BuildRight (30)
                        :                    :- * Project (9)
                        :                    :  +- * Filter (8)
                        :                    :     +- BatchScan spark_catalog.default.store (7)
                        :                    +- BroadcastExchange (29)
                        :                       +- * Project (28)
                        :                          +- * Filter (27)
                        :                             +- Window (26)
                        :                                +- * Sort (25)
                        :                                   +- * HashAggregate (24)
                        :                                      +- Exchange (23)
                        :                                         +- * HashAggregate (22)
                        :                                            +- * Project (21)
                        :                                               +- * BroadcastHashJoin Inner BuildRight (20)
                        :                                                  :- * Project (18)
                        :                                                  :  +- * BroadcastHashJoin Inner BuildRight (17)
                        :                                                  :     :- * Project (12)
                        :                                                  :     :  +- * Filter (11)
                        :                                                  :     :     +- BatchScan spark_catalog.default.store_sales (10)
                        :                                                  :     +- BroadcastExchange (16)
                        :                                                  :        +- * Project (15)
                        :                                                  :           +- * Filter (14)
                        :                                                  :              +- BatchScan spark_catalog.default.store (13)
                        :                                                  +- ReusedExchange (19)
                        :- * HashAggregate (56)
                        :  +- Exchange (55)
                        :     +- * HashAggregate (54)
                        :        +- * HashAggregate (53)
                        :           +- Exchange (52)
                        :              +- * HashAggregate (51)
                        :                 +- * Project (50)
                        :                    +- * BroadcastHashJoin Inner BuildRight (49)
                        :                       :- * Project (42)
                        :                       :  +- * BroadcastHashJoin Inner BuildRight (41)
                        :                       :     :- * Project (39)
                        :                       :     :  +- * Filter (38)
                        :                       :     :     +- BatchScan spark_catalog.default.store_sales (37)
                        :                       :     +- ReusedExchange (40)
                        :                       +- BroadcastExchange (48)
                        :                          +- * BroadcastHashJoin LeftSemi BuildRight (47)
                        :                             :- * Project (45)
                        :                             :  +- * Filter (44)
                        :                             :     +- BatchScan spark_catalog.default.store (43)
                        :                             +- ReusedExchange (46)
                        +- * HashAggregate (76)
                           +- Exchange (75)
                              +- * HashAggregate (74)
                                 +- * HashAggregate (73)
                                    +- Exchange (72)
                                       +- * HashAggregate (71)
                                          +- * Project (70)
                                             +- * BroadcastHashJoin Inner BuildRight (69)
                                                :- * Project (62)
                                                :  +- * BroadcastHashJoin Inner BuildRight (61)
                                                :     :- * Project (59)
                                                :     :  +- * Filter (58)
                                                :     :     +- BatchScan spark_catalog.default.store_sales (57)
                                                :     +- ReusedExchange (60)
                                                +- BroadcastExchange (68)
                                                   +- * BroadcastHashJoin LeftSemi BuildRight (67)
                                                      :- * Project (65)
                                                      :  +- * Filter (64)
                                                      :     +- BatchScan spark_catalog.default.store (63)
                                                      +- ReusedExchange (66)


(1) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 8]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(3) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(4) ReusedExchange [Reuses operator id: 89]
Output [1]: [d_date_sk#4]

(5) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 8]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(7) BatchScan spark_catalog.default.store
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Condition : isnotnull(s_store_sk#5)

(9) Project [codegen id : 7]
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]

(10) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_store_sk IS NOT NULL, ss_sold_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
Condition : (isnotnull(ss_store_sk#9) AND isnotnull(ss_sold_date_sk#8))

(12) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]
Input [3]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10]

(13) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#11, s_state#12]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]
Condition : isnotnull(s_store_sk#11)

(15) Project [codegen id : 2]
Output [2]: [s_store_sk#11, s_state#12]
Input [2]: [s_store_sk#11, s_state#12]

(16) BroadcastExchange
Input [2]: [s_store_sk#11, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#9]
Right keys [1]: [s_store_sk#11]
Join condition: None

(18) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#8, ss_net_profit#10, s_state#12]
Input [5]: [ss_sold_date_sk#8, ss_store_sk#9, ss_net_profit#10, s_store_sk#11, s_state#12]

(19) ReusedExchange [Reuses operator id: 89]
Output [1]: [d_date_sk#13]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join condition: None

(21) Project [codegen id : 4]
Output [2]: [ss_net_profit#10, s_state#12]
Input [4]: [ss_sold_date_sk#8, ss_net_profit#10, s_state#12, d_date_sk#13]

(22) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#10, s_state#12]
Keys [1]: [s_state#12]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum#14]
Results [2]: [s_state#12, sum#15]

(23) Exchange
Input [2]: [s_state#12, sum#15]
Arguments: hashpartitioning(s_state#12, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(24) HashAggregate [codegen id : 5]
Input [2]: [s_state#12, sum#15]
Keys [1]: [s_state#12]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#10))#16]
Results [3]: [s_state#12, s_state#12, MakeDecimal(sum(UnscaledValue(ss_net_profit#10))#16,17,2) AS _w1#17]

(25) Sort [codegen id : 5]
Input [3]: [s_state#12, s_state#12, _w1#17]
Arguments: [s_state#12 ASC NULLS FIRST, _w1#17 DESC NULLS LAST], false, 0

(26) Window
Input [3]: [s_state#12, s_state#12, _w1#17]
Arguments: [rank(_w1#17) windowspecdefinition(s_state#12, _w1#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#18], [s_state#12], [_w1#17 DESC NULLS LAST]

(27) Filter [codegen id : 6]
Input [4]: [s_state#12, s_state#12, _w1#17, ranking#18]
Condition : (ranking#18 <= 5)

(28) Project [codegen id : 6]
Output [1]: [s_state#12]
Input [4]: [s_state#12, s_state#12, _w1#17, ranking#18]

(29) BroadcastExchange
Input [1]: [s_state#12]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_state#7]
Right keys [1]: [s_state#12]
Join condition: None

(31) BroadcastExchange
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#5]
Join condition: None

(33) Project [codegen id : 8]
Output [3]: [ss_net_profit#3, s_county#6, s_state#7]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#5, s_county#6, s_state#7]

(34) HashAggregate [codegen id : 8]
Input [3]: [ss_net_profit#3, s_county#6, s_state#7]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#19]
Results [3]: [s_state#7, s_county#6, sum#20]

(35) Exchange
Input [3]: [s_state#7, s_county#6, sum#20]
Arguments: hashpartitioning(s_state#7, s_county#6, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) HashAggregate [codegen id : 9]
Input [3]: [s_state#7, s_county#6, sum#20]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#21]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#21,17,2) as decimal(27,2)) AS total_sum#22, s_state#7, s_county#6, 0 AS g_state#23, 0 AS g_county#24, 0 AS lochierarchy#25]

(37) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(38) Filter [codegen id : 17]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(39) Project [codegen id : 17]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(40) ReusedExchange [Reuses operator id: 89]
Output [1]: [d_date_sk#4]

(41) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(42) Project [codegen id : 17]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(43) BatchScan spark_catalog.default.store
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(44) Filter [codegen id : 16]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Condition : isnotnull(s_store_sk#5)

(45) Project [codegen id : 16]
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]

(46) ReusedExchange [Reuses operator id: 29]
Output [1]: [s_state#12]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [s_state#7]
Right keys [1]: [s_state#12]
Join condition: None

(48) BroadcastExchange
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(49) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#5]
Join condition: None

(50) Project [codegen id : 17]
Output [3]: [ss_net_profit#3, s_county#6, s_state#7]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#5, s_county#6, s_state#7]

(51) HashAggregate [codegen id : 17]
Input [3]: [ss_net_profit#3, s_county#6, s_state#7]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#26]
Results [3]: [s_state#7, s_county#6, sum#27]

(52) Exchange
Input [3]: [s_state#7, s_county#6, sum#27]
Arguments: hashpartitioning(s_state#7, s_county#6, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(53) HashAggregate [codegen id : 18]
Input [3]: [s_state#7, s_county#6, sum#27]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#21]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#21,17,2) AS total_sum#28, s_state#7]

(54) HashAggregate [codegen id : 18]
Input [2]: [total_sum#28, s_state#7]
Keys [1]: [s_state#7]
Functions [1]: [partial_sum(total_sum#28)]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [s_state#7, sum#31, isEmpty#32]

(55) Exchange
Input [3]: [s_state#7, sum#31, isEmpty#32]
Arguments: hashpartitioning(s_state#7, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(56) HashAggregate [codegen id : 19]
Input [3]: [s_state#7, sum#31, isEmpty#32]
Keys [1]: [s_state#7]
Functions [1]: [sum(total_sum#28)]
Aggregate Attributes [1]: [sum(total_sum#28)#33]
Results [6]: [sum(total_sum#28)#33 AS total_sum#34, s_state#7, null AS s_county#35, 0 AS g_state#36, 1 AS g_county#37, 1 AS lochierarchy#38]

(57) BatchScan spark_catalog.default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(58) Filter [codegen id : 27]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(59) Project [codegen id : 27]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(60) ReusedExchange [Reuses operator id: 89]
Output [1]: [d_date_sk#4]

(61) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(62) Project [codegen id : 27]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(63) BatchScan spark_catalog.default.store
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(64) Filter [codegen id : 26]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Condition : isnotnull(s_store_sk#5)

(65) Project [codegen id : 26]
Output [3]: [s_store_sk#5, s_county#6, s_state#7]
Input [3]: [s_store_sk#5, s_county#6, s_state#7]

(66) ReusedExchange [Reuses operator id: 29]
Output [1]: [s_state#12]

(67) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [s_state#7]
Right keys [1]: [s_state#12]
Join condition: None

(68) BroadcastExchange
Input [3]: [s_store_sk#5, s_county#6, s_state#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(69) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#5]
Join condition: None

(70) Project [codegen id : 27]
Output [3]: [ss_net_profit#3, s_county#6, s_state#7]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#5, s_county#6, s_state#7]

(71) HashAggregate [codegen id : 27]
Input [3]: [ss_net_profit#3, s_county#6, s_state#7]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#39]
Results [3]: [s_state#7, s_county#6, sum#40]

(72) Exchange
Input [3]: [s_state#7, s_county#6, sum#40]
Arguments: hashpartitioning(s_state#7, s_county#6, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(73) HashAggregate [codegen id : 28]
Input [3]: [s_state#7, s_county#6, sum#40]
Keys [2]: [s_state#7, s_county#6]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#21]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#21,17,2) AS total_sum#28]

(74) HashAggregate [codegen id : 28]
Input [1]: [total_sum#28]
Keys: []
Functions [1]: [partial_sum(total_sum#28)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [2]: [sum#43, isEmpty#44]

(75) Exchange
Input [2]: [sum#43, isEmpty#44]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(76) HashAggregate [codegen id : 29]
Input [2]: [sum#43, isEmpty#44]
Keys: []
Functions [1]: [sum(total_sum#28)]
Aggregate Attributes [1]: [sum(total_sum#28)#45]
Results [6]: [sum(total_sum#28)#45 AS total_sum#46, null AS s_state#47, null AS s_county#48, 1 AS g_state#49, 1 AS g_county#50, 2 AS lochierarchy#51]

(77) Union

(78) HashAggregate [codegen id : 30]
Input [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Keys [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]

(79) Exchange
Input [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Arguments: hashpartitioning(total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(80) HashAggregate [codegen id : 31]
Input [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Keys [6]: [total_sum#22, s_state#7, s_county#6, g_state#23, g_county#24, lochierarchy#25]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, CASE WHEN (g_county#24 = 0) THEN s_state#7 END AS _w0#52]

(81) Exchange
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#52]
Arguments: hashpartitioning(lochierarchy#25, _w0#52, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(82) Sort [codegen id : 32]
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#52]
Arguments: [lochierarchy#25 ASC NULLS FIRST, _w0#52 ASC NULLS FIRST, total_sum#22 DESC NULLS LAST], false, 0

(83) Window
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#52]
Arguments: [rank(total_sum#22) windowspecdefinition(lochierarchy#25, _w0#52, total_sum#22 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#53], [lochierarchy#25, _w0#52], [total_sum#22 DESC NULLS LAST]

(84) Project [codegen id : 33]
Output [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, rank_within_parent#53]
Input [6]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, _w0#52, rank_within_parent#53]

(85) TakeOrderedAndProject
Input [5]: [total_sum#22, s_state#7, s_county#6, lochierarchy#25, rank_within_parent#53]
Arguments: 100, [lochierarchy#25 DESC NULLS LAST, CASE WHEN (lochierarchy#25 = 0) THEN s_state#7 END ASC NULLS FIRST, rank_within_parent#53 ASC NULLS FIRST], [total_sum#22, s_state#7, s_county#6, lochierarchy#25, rank_within_parent#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#54
BroadcastExchange (89)
+- * Project (88)
   +- * Filter (87)
      +- BatchScan spark_catalog.default.date_dim (86)


(86) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#55]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1212, d_month_seq <= 1223, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(87) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#55]
Condition : (((isnotnull(d_month_seq#55) AND (d_month_seq#55 >= 1212)) AND (d_month_seq#55 <= 1223)) AND isnotnull(d_date_sk#4))

(88) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#55]

(89) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#54

Subquery:3 Hosting operator id = 37 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#54

Subquery:4 Hosting operator id = 57 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#54


