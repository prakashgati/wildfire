== Physical Plan ==
TakeOrderedAndProject (45)
+- Union (44)
   :- * HashAggregate (23)
   :  +- * HashAggregate (22)
   :     +- * HashAggregate (21)
   :        +- Exchange (20)
   :           +- * HashAggregate (19)
   :              +- * Project (18)
   :                 +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :- * Project (12)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
   :                    :     :- * Project (6)
   :                    :     :  +- * BroadcastHashJoin Inner BuildRight (5)
   :                    :     :     :- * Project (3)
   :                    :     :     :  +- * Filter (2)
   :                    :     :     :     +- BatchScan spark_catalog.default.inventory (1)
   :                    :     :     +- ReusedExchange (4)
   :                    :     +- BroadcastExchange (10)
   :                    :        +- * Project (9)
   :                    :           +- * Filter (8)
   :                    :              +- BatchScan spark_catalog.default.item (7)
   :                    +- BroadcastExchange (16)
   :                       +- * Project (15)
   :                          +- * Filter (14)
   :                             +- BatchScan spark_catalog.default.warehouse (13)
   :- * HashAggregate (28)
   :  +- Exchange (27)
   :     +- * HashAggregate (26)
   :        +- * HashAggregate (25)
   :           +- ReusedExchange (24)
   :- * HashAggregate (33)
   :  +- Exchange (32)
   :     +- * HashAggregate (31)
   :        +- * HashAggregate (30)
   :           +- ReusedExchange (29)
   :- * HashAggregate (38)
   :  +- Exchange (37)
   :     +- * HashAggregate (36)
   :        +- * HashAggregate (35)
   :           +- ReusedExchange (34)
   +- * HashAggregate (43)
      +- Exchange (42)
         +- * HashAggregate (41)
            +- * HashAggregate (40)
               +- ReusedExchange (39)


(1) BatchScan spark_catalog.default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
spark_catalog.default.inventory [scan class = SparkBatchQueryScan] [filters=inv_date_sk IS NOT NULL, inv_item_sk IS NOT NULL, inv_warehouse_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_date_sk#1) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_warehouse_sk#3))

(3) Project [codegen id : 4]
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(4) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 4]
Output [3]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date_sk#5]

(7) BatchScan spark_catalog.default.item
Output [5]: [i_item_sk#6, i_brand#7, i_class#8, i_category#9, i_product_name#10]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [5]: [i_item_sk#6, i_brand#7, i_class#8, i_category#9, i_product_name#10]
Condition : isnotnull(i_item_sk#6)

(9) Project [codegen id : 2]
Output [5]: [i_item_sk#6, i_brand#7, i_class#8, i_category#9, i_product_name#10]
Input [5]: [i_item_sk#6, i_brand#7, i_class#8, i_category#9, i_product_name#10]

(10) BroadcastExchange
Input [5]: [i_item_sk#6, i_brand#7, i_class#8, i_category#9, i_product_name#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(12) Project [codegen id : 4]
Output [6]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, i_brand#7, i_class#8, i_category#9, i_product_name#10]
Input [8]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#6, i_brand#7, i_class#8, i_category#9, i_product_name#10]

(13) BatchScan spark_catalog.default.warehouse
Output [1]: [w_warehouse_sk#11]
spark_catalog.default.warehouse [scan class = SparkBatchQueryScan] [filters=w_warehouse_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [1]: [w_warehouse_sk#11]
Condition : isnotnull(w_warehouse_sk#11)

(15) Project [codegen id : 3]
Output [1]: [w_warehouse_sk#11]
Input [1]: [w_warehouse_sk#11]

(16) BroadcastExchange
Input [1]: [w_warehouse_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#11]
Join condition: None

(18) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#4, i_brand#7, i_class#8, i_category#9, i_product_name#10]
Input [7]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, i_brand#7, i_class#8, i_category#9, i_product_name#10, w_warehouse_sk#11]

(19) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#4, i_brand#7, i_class#8, i_category#9, i_product_name#10]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [partial_avg(inv_quantity_on_hand#4)]
Aggregate Attributes [2]: [sum#12, count#13]
Results [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]

(20) Exchange
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]
Arguments: hashpartitioning(i_product_name#10, i_brand#7, i_class#8, i_category#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 5]
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [avg(inv_quantity_on_hand#4)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#4)#16]
Results [5]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, avg(inv_quantity_on_hand#4)#16 AS qoh#17]

(22) HashAggregate [codegen id : 5]
Input [5]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, qoh#17]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [partial_avg(qoh#17)]
Aggregate Attributes [2]: [sum#18, count#19]
Results [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#20, count#21]

(23) HashAggregate [codegen id : 5]
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#20, count#21]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [avg(qoh#17)]
Aggregate Attributes [1]: [avg(qoh#17)#22]
Results [5]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, avg(qoh#17)#22 AS qoh#23]

(24) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]

(25) HashAggregate [codegen id : 10]
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [avg(inv_quantity_on_hand#4)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#4)#16]
Results [4]: [i_product_name#10, i_brand#7, i_class#8, avg(inv_quantity_on_hand#4)#16 AS qoh#17]

(26) HashAggregate [codegen id : 10]
Input [4]: [i_product_name#10, i_brand#7, i_class#8, qoh#17]
Keys [3]: [i_product_name#10, i_brand#7, i_class#8]
Functions [1]: [partial_avg(qoh#17)]
Aggregate Attributes [2]: [sum#24, count#25]
Results [5]: [i_product_name#10, i_brand#7, i_class#8, sum#26, count#27]

(27) Exchange
Input [5]: [i_product_name#10, i_brand#7, i_class#8, sum#26, count#27]
Arguments: hashpartitioning(i_product_name#10, i_brand#7, i_class#8, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) HashAggregate [codegen id : 11]
Input [5]: [i_product_name#10, i_brand#7, i_class#8, sum#26, count#27]
Keys [3]: [i_product_name#10, i_brand#7, i_class#8]
Functions [1]: [avg(qoh#17)]
Aggregate Attributes [1]: [avg(qoh#17)#28]
Results [5]: [i_product_name#10, i_brand#7, i_class#8, null AS i_category#29, avg(qoh#17)#28 AS qoh#30]

(29) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]

(30) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [avg(inv_quantity_on_hand#4)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#4)#16]
Results [3]: [i_product_name#10, i_brand#7, avg(inv_quantity_on_hand#4)#16 AS qoh#17]

(31) HashAggregate [codegen id : 16]
Input [3]: [i_product_name#10, i_brand#7, qoh#17]
Keys [2]: [i_product_name#10, i_brand#7]
Functions [1]: [partial_avg(qoh#17)]
Aggregate Attributes [2]: [sum#31, count#32]
Results [4]: [i_product_name#10, i_brand#7, sum#33, count#34]

(32) Exchange
Input [4]: [i_product_name#10, i_brand#7, sum#33, count#34]
Arguments: hashpartitioning(i_product_name#10, i_brand#7, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 17]
Input [4]: [i_product_name#10, i_brand#7, sum#33, count#34]
Keys [2]: [i_product_name#10, i_brand#7]
Functions [1]: [avg(qoh#17)]
Aggregate Attributes [1]: [avg(qoh#17)#35]
Results [5]: [i_product_name#10, i_brand#7, null AS i_class#36, null AS i_category#37, avg(qoh#17)#35 AS qoh#38]

(34) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]

(35) HashAggregate [codegen id : 22]
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [avg(inv_quantity_on_hand#4)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#4)#16]
Results [2]: [i_product_name#10, avg(inv_quantity_on_hand#4)#16 AS qoh#17]

(36) HashAggregate [codegen id : 22]
Input [2]: [i_product_name#10, qoh#17]
Keys [1]: [i_product_name#10]
Functions [1]: [partial_avg(qoh#17)]
Aggregate Attributes [2]: [sum#39, count#40]
Results [3]: [i_product_name#10, sum#41, count#42]

(37) Exchange
Input [3]: [i_product_name#10, sum#41, count#42]
Arguments: hashpartitioning(i_product_name#10, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(38) HashAggregate [codegen id : 23]
Input [3]: [i_product_name#10, sum#41, count#42]
Keys [1]: [i_product_name#10]
Functions [1]: [avg(qoh#17)]
Aggregate Attributes [1]: [avg(qoh#17)#43]
Results [5]: [i_product_name#10, null AS i_brand#44, null AS i_class#45, null AS i_category#46, avg(qoh#17)#43 AS qoh#47]

(39) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]

(40) HashAggregate [codegen id : 28]
Input [6]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, sum#14, count#15]
Keys [4]: [i_product_name#10, i_brand#7, i_class#8, i_category#9]
Functions [1]: [avg(inv_quantity_on_hand#4)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#4)#16]
Results [1]: [avg(inv_quantity_on_hand#4)#16 AS qoh#17]

(41) HashAggregate [codegen id : 28]
Input [1]: [qoh#17]
Keys: []
Functions [1]: [partial_avg(qoh#17)]
Aggregate Attributes [2]: [sum#48, count#49]
Results [2]: [sum#50, count#51]

(42) Exchange
Input [2]: [sum#50, count#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(43) HashAggregate [codegen id : 29]
Input [2]: [sum#50, count#51]
Keys: []
Functions [1]: [avg(qoh#17)]
Aggregate Attributes [1]: [avg(qoh#17)#52]
Results [5]: [null AS i_product_name#53, null AS i_brand#54, null AS i_class#55, null AS i_category#56, avg(qoh#17)#52 AS qoh#57]

(44) Union

(45) TakeOrderedAndProject
Input [5]: [i_product_name#10, i_brand#7, i_class#8, i_category#9, qoh#23]
Arguments: 100, [qoh#23 ASC NULLS FIRST, i_product_name#10 ASC NULLS FIRST, i_brand#7 ASC NULLS FIRST, i_class#8 ASC NULLS FIRST, i_category#9 ASC NULLS FIRST], [i_product_name#10, i_brand#7, i_class#8, i_category#9, qoh#23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#1 IN dynamicpruning#58
BroadcastExchange (49)
+- * Project (48)
   +- * Filter (47)
      +- BatchScan spark_catalog.default.date_dim (46)


(46) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#59]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1212, d_month_seq <= 1223, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(47) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#59]
Condition : (((isnotnull(d_month_seq#59) AND (d_month_seq#59 >= 1212)) AND (d_month_seq#59 <= 1223)) AND isnotnull(d_date_sk#5))

(48) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#59]

(49) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


