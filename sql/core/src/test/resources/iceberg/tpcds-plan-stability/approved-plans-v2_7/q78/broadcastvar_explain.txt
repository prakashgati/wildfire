== Physical Plan ==
TakeOrderedAndProject (60)
+- * Project (59)
   +- * BroadcastHashJoin Inner BuildRight (58)
      :- * Project (39)
      :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :- * HashAggregate (19)
      :     :  +- Exchange (18)
      :     :     +- * HashAggregate (17)
      :     :        +- * Project (16)
      :     :           +- * BroadcastHashJoin Inner BuildRight (15)
      :     :              :- * Project (10)
      :     :              :  +- * Filter (9)
      :     :              :     +- * BroadcastHashJoin LeftOuter BuildRight (8)
      :     :              :        :- * Project (3)
      :     :              :        :  +- * Filter (2)
      :     :              :        :     +- BatchScan spark_catalog.default.store_sales (1)
      :     :              :        +- BroadcastExchange (7)
      :     :              :           +- * Project (6)
      :     :              :              +- * Filter (5)
      :     :              :                 +- BatchScan spark_catalog.default.store_returns (4)
      :     :              +- BroadcastExchange (14)
      :     :                 +- * Project (13)
      :     :                    +- * Filter (12)
      :     :                       +- BatchScan spark_catalog.default.date_dim (11)
      :     +- BroadcastExchange (37)
      :        +- * Filter (36)
      :           +- * HashAggregate (35)
      :              +- Exchange (34)
      :                 +- * HashAggregate (33)
      :                    +- * Project (32)
      :                       +- * BroadcastHashJoin Inner BuildRight (31)
      :                          :- * Project (29)
      :                          :  +- * Filter (28)
      :                          :     +- * BroadcastHashJoin LeftOuter BuildRight (27)
      :                          :        :- * Project (22)
      :                          :        :  +- * Filter (21)
      :                          :        :     +- BatchScan spark_catalog.default.web_sales (20)
      :                          :        +- BroadcastExchange (26)
      :                          :           +- * Project (25)
      :                          :              +- * Filter (24)
      :                          :                 +- BatchScan spark_catalog.default.web_returns (23)
      :                          +- ReusedExchange (30)
      +- BroadcastExchange (57)
         +- * Filter (56)
            +- * HashAggregate (55)
               +- Exchange (54)
                  +- * HashAggregate (53)
                     +- * Project (52)
                        +- * BroadcastHashJoin Inner BuildRight (51)
                           :- * Project (49)
                           :  +- * Filter (48)
                           :     +- * BroadcastHashJoin LeftOuter BuildRight (47)
                           :        :- * Project (42)
                           :        :  +- * Filter (41)
                           :        :     +- BatchScan spark_catalog.default.catalog_sales (40)
                           :        +- BroadcastExchange (46)
                           :           +- * Project (45)
                           :              +- * Filter (44)
                           :                 +- BatchScan spark_catalog.default.catalog_returns (43)
                           +- ReusedExchange (50)


(1) BatchScan spark_catalog.default.store_sales
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#4, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_item_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 3]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#4, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_customer_sk#3))

(3) Project [codegen id : 3]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#4, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#4, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7]

(4) BatchScan spark_catalog.default.store_returns
Output [2]: [sr_item_sk#8, sr_ticket_number#9]
spark_catalog.default.store_returns [scan class = SparkBatchQueryScan] [filters=sr_ticket_number IS NOT NULL, sr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Condition : (isnotnull(sr_ticket_number#9) AND isnotnull(sr_item_sk#8))

(6) Project [codegen id : 1]
Output [2]: [sr_item_sk#8, sr_ticket_number#9]
Input [2]: [sr_item_sk#8, sr_ticket_number#9]

(7) BroadcastExchange
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#2]
Right keys [2]: [sr_ticket_number#9, sr_item_sk#8]
Join condition: None

(9) Filter [codegen id : 3]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#4, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7, sr_item_sk#8, sr_ticket_number#9]
Condition : isnull(sr_ticket_number#9)

(10) Project [codegen id : 3]
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#4, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7, sr_item_sk#8, sr_ticket_number#9]

(11) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_year = 2000, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 2000)) AND isnotnull(d_date_sk#10))

(13) Project [codegen id : 2]
Output [2]: [d_date_sk#10, d_year#11]
Input [2]: [d_date_sk#10, d_year#11]

(14) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(16) Project [codegen id : 3]
Output [6]: [ss_item_sk#2, ss_customer_sk#3, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7, d_year#11]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7, d_date_sk#10, d_year#11]

(17) HashAggregate [codegen id : 3]
Input [6]: [ss_item_sk#2, ss_customer_sk#3, ss_quantity#5, ss_wholesale_cost#6, ss_sales_price#7, d_year#11]
Keys [3]: [d_year#11, ss_item_sk#2, ss_customer_sk#3]
Functions [3]: [partial_sum(ss_quantity#5), partial_sum(UnscaledValue(ss_wholesale_cost#6)), partial_sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [3]: [sum#12, sum#13, sum#14]
Results [6]: [d_year#11, ss_item_sk#2, ss_customer_sk#3, sum#15, sum#16, sum#17]

(18) Exchange
Input [6]: [d_year#11, ss_item_sk#2, ss_customer_sk#3, sum#15, sum#16, sum#17]
Arguments: hashpartitioning(d_year#11, ss_item_sk#2, ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) HashAggregate [codegen id : 12]
Input [6]: [d_year#11, ss_item_sk#2, ss_customer_sk#3, sum#15, sum#16, sum#17]
Keys [3]: [d_year#11, ss_item_sk#2, ss_customer_sk#3]
Functions [3]: [sum(ss_quantity#5), sum(UnscaledValue(ss_wholesale_cost#6)), sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [3]: [sum(ss_quantity#5)#18, sum(UnscaledValue(ss_wholesale_cost#6))#19, sum(UnscaledValue(ss_sales_price#7))#20]
Results [6]: [d_year#11 AS ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3, sum(ss_quantity#5)#18 AS ss_qty#22, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#6))#19,17,2) AS ss_wc#23, MakeDecimal(sum(UnscaledValue(ss_sales_price#7))#20,17,2) AS ss_sp#24]

(20) BatchScan spark_catalog.default.web_sales
Output [7]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_order_number#28, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_sold_date_sk IS NOT NULL, ws_item_sk IS NOT NULL, ws_bill_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(21) Filter [codegen id : 6]
Input [7]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_order_number#28, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31]
Condition : ((isnotnull(ws_sold_date_sk#25) AND isnotnull(ws_item_sk#26)) AND isnotnull(ws_bill_customer_sk#27))

(22) Project [codegen id : 6]
Output [7]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_order_number#28, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31]
Input [7]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_order_number#28, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31]

(23) BatchScan spark_catalog.default.web_returns
Output [2]: [wr_item_sk#32, wr_order_number#33]
spark_catalog.default.web_returns [scan class = SparkBatchQueryScan] [filters=wr_order_number IS NOT NULL, wr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 4]
Input [2]: [wr_item_sk#32, wr_order_number#33]
Condition : (isnotnull(wr_order_number#33) AND isnotnull(wr_item_sk#32))

(25) Project [codegen id : 4]
Output [2]: [wr_item_sk#32, wr_order_number#33]
Input [2]: [wr_item_sk#32, wr_order_number#33]

(26) BroadcastExchange
Input [2]: [wr_item_sk#32, wr_order_number#33]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=4]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [ws_order_number#28, ws_item_sk#26]
Right keys [2]: [wr_order_number#33, wr_item_sk#32]
Join condition: None

(28) Filter [codegen id : 6]
Input [9]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_order_number#28, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31, wr_item_sk#32, wr_order_number#33]
Condition : isnull(wr_order_number#33)

(29) Project [codegen id : 6]
Output [6]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31]
Input [9]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_order_number#28, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31, wr_item_sk#32, wr_order_number#33]

(30) ReusedExchange [Reuses operator id: 64]
Output [2]: [d_date_sk#34, d_year#35]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#34]
Join condition: None

(32) Project [codegen id : 6]
Output [6]: [ws_item_sk#26, ws_bill_customer_sk#27, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31, d_year#35]
Input [8]: [ws_sold_date_sk#25, ws_item_sk#26, ws_bill_customer_sk#27, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31, d_date_sk#34, d_year#35]

(33) HashAggregate [codegen id : 6]
Input [6]: [ws_item_sk#26, ws_bill_customer_sk#27, ws_quantity#29, ws_wholesale_cost#30, ws_sales_price#31, d_year#35]
Keys [3]: [d_year#35, ws_item_sk#26, ws_bill_customer_sk#27]
Functions [3]: [partial_sum(ws_quantity#29), partial_sum(UnscaledValue(ws_wholesale_cost#30)), partial_sum(UnscaledValue(ws_sales_price#31))]
Aggregate Attributes [3]: [sum#36, sum#37, sum#38]
Results [6]: [d_year#35, ws_item_sk#26, ws_bill_customer_sk#27, sum#39, sum#40, sum#41]

(34) Exchange
Input [6]: [d_year#35, ws_item_sk#26, ws_bill_customer_sk#27, sum#39, sum#40, sum#41]
Arguments: hashpartitioning(d_year#35, ws_item_sk#26, ws_bill_customer_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(35) HashAggregate [codegen id : 7]
Input [6]: [d_year#35, ws_item_sk#26, ws_bill_customer_sk#27, sum#39, sum#40, sum#41]
Keys [3]: [d_year#35, ws_item_sk#26, ws_bill_customer_sk#27]
Functions [3]: [sum(ws_quantity#29), sum(UnscaledValue(ws_wholesale_cost#30)), sum(UnscaledValue(ws_sales_price#31))]
Aggregate Attributes [3]: [sum(ws_quantity#29)#42, sum(UnscaledValue(ws_wholesale_cost#30))#43, sum(UnscaledValue(ws_sales_price#31))#44]
Results [6]: [d_year#35 AS ws_sold_year#45, ws_item_sk#26, ws_bill_customer_sk#27 AS ws_customer_sk#46, sum(ws_quantity#29)#42 AS ws_qty#47, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#30))#43,17,2) AS ws_wc#48, MakeDecimal(sum(UnscaledValue(ws_sales_price#31))#44,17,2) AS ws_sp#49]

(36) Filter [codegen id : 7]
Input [6]: [ws_sold_year#45, ws_item_sk#26, ws_customer_sk#46, ws_qty#47, ws_wc#48, ws_sp#49]
Condition : (coalesce(ws_qty#47, 0) > 0)

(37) BroadcastExchange
Input [6]: [ws_sold_year#45, ws_item_sk#26, ws_customer_sk#46, ws_qty#47, ws_wc#48, ws_sp#49]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(38) BroadcastHashJoin [codegen id : 12]
Left keys [3]: [ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3]
Right keys [3]: [ws_sold_year#45, ws_item_sk#26, ws_customer_sk#46]
Join condition: None

(39) Project [codegen id : 12]
Output [9]: [ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3, ss_qty#22, ss_wc#23, ss_sp#24, ws_qty#47, ws_wc#48, ws_sp#49]
Input [12]: [ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3, ss_qty#22, ss_wc#23, ss_sp#24, ws_sold_year#45, ws_item_sk#26, ws_customer_sk#46, ws_qty#47, ws_wc#48, ws_sp#49]

(40) BatchScan spark_catalog.default.catalog_sales
Output [7]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_order_number#53, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_sold_date_sk IS NOT NULL, cs_item_sk IS NOT NULL, cs_bill_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(41) Filter [codegen id : 10]
Input [7]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_order_number#53, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56]
Condition : ((isnotnull(cs_sold_date_sk#50) AND isnotnull(cs_item_sk#52)) AND isnotnull(cs_bill_customer_sk#51))

(42) Project [codegen id : 10]
Output [7]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_order_number#53, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56]
Input [7]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_order_number#53, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56]

(43) BatchScan spark_catalog.default.catalog_returns
Output [2]: [cr_item_sk#57, cr_order_number#58]
spark_catalog.default.catalog_returns [scan class = SparkBatchQueryScan] [filters=cr_order_number IS NOT NULL, cr_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(44) Filter [codegen id : 8]
Input [2]: [cr_item_sk#57, cr_order_number#58]
Condition : (isnotnull(cr_order_number#58) AND isnotnull(cr_item_sk#57))

(45) Project [codegen id : 8]
Output [2]: [cr_item_sk#57, cr_order_number#58]
Input [2]: [cr_item_sk#57, cr_order_number#58]

(46) BroadcastExchange
Input [2]: [cr_item_sk#57, cr_order_number#58]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=7]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [cs_order_number#53, cs_item_sk#52]
Right keys [2]: [cr_order_number#58, cr_item_sk#57]
Join condition: None

(48) Filter [codegen id : 10]
Input [9]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_order_number#53, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56, cr_item_sk#57, cr_order_number#58]
Condition : isnull(cr_order_number#58)

(49) Project [codegen id : 10]
Output [6]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56]
Input [9]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_order_number#53, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56, cr_item_sk#57, cr_order_number#58]

(50) ReusedExchange [Reuses operator id: 64]
Output [2]: [d_date_sk#59, d_year#60]

(51) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#50]
Right keys [1]: [d_date_sk#59]
Join condition: None

(52) Project [codegen id : 10]
Output [6]: [cs_bill_customer_sk#51, cs_item_sk#52, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56, d_year#60]
Input [8]: [cs_sold_date_sk#50, cs_bill_customer_sk#51, cs_item_sk#52, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56, d_date_sk#59, d_year#60]

(53) HashAggregate [codegen id : 10]
Input [6]: [cs_bill_customer_sk#51, cs_item_sk#52, cs_quantity#54, cs_wholesale_cost#55, cs_sales_price#56, d_year#60]
Keys [3]: [d_year#60, cs_item_sk#52, cs_bill_customer_sk#51]
Functions [3]: [partial_sum(cs_quantity#54), partial_sum(UnscaledValue(cs_wholesale_cost#55)), partial_sum(UnscaledValue(cs_sales_price#56))]
Aggregate Attributes [3]: [sum#61, sum#62, sum#63]
Results [6]: [d_year#60, cs_item_sk#52, cs_bill_customer_sk#51, sum#64, sum#65, sum#66]

(54) Exchange
Input [6]: [d_year#60, cs_item_sk#52, cs_bill_customer_sk#51, sum#64, sum#65, sum#66]
Arguments: hashpartitioning(d_year#60, cs_item_sk#52, cs_bill_customer_sk#51, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(55) HashAggregate [codegen id : 11]
Input [6]: [d_year#60, cs_item_sk#52, cs_bill_customer_sk#51, sum#64, sum#65, sum#66]
Keys [3]: [d_year#60, cs_item_sk#52, cs_bill_customer_sk#51]
Functions [3]: [sum(cs_quantity#54), sum(UnscaledValue(cs_wholesale_cost#55)), sum(UnscaledValue(cs_sales_price#56))]
Aggregate Attributes [3]: [sum(cs_quantity#54)#67, sum(UnscaledValue(cs_wholesale_cost#55))#68, sum(UnscaledValue(cs_sales_price#56))#69]
Results [6]: [d_year#60 AS cs_sold_year#70, cs_item_sk#52, cs_bill_customer_sk#51 AS cs_customer_sk#71, sum(cs_quantity#54)#67 AS cs_qty#72, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#55))#68,17,2) AS cs_wc#73, MakeDecimal(sum(UnscaledValue(cs_sales_price#56))#69,17,2) AS cs_sp#74]

(56) Filter [codegen id : 11]
Input [6]: [cs_sold_year#70, cs_item_sk#52, cs_customer_sk#71, cs_qty#72, cs_wc#73, cs_sp#74]
Condition : (coalesce(cs_qty#72, 0) > 0)

(57) BroadcastExchange
Input [6]: [cs_sold_year#70, cs_item_sk#52, cs_customer_sk#71, cs_qty#72, cs_wc#73, cs_sp#74]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=9]

(58) BroadcastHashJoin [codegen id : 12]
Left keys [3]: [ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3]
Right keys [3]: [cs_sold_year#70, cs_item_sk#52, cs_customer_sk#71]
Join condition: None

(59) Project [codegen id : 12]
Output [13]: [round((cast(ss_qty#22 as double) / cast(coalesce((ws_qty#47 + cs_qty#72), 1) as double)), 2) AS ratio#75, ss_qty#22 AS store_qty#76, ss_wc#23 AS store_wholesale_cost#77, ss_sp#24 AS store_sales_price#78, (coalesce(ws_qty#47, 0) + coalesce(cs_qty#72, 0)) AS other_chan_qty#79, CheckOverflow((promote_precision(cast(coalesce(ws_wc#48, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#73, 0.00) as decimal(18,2)))), DecimalType(18,2)) AS other_chan_wholesale_cost#80, CheckOverflow((promote_precision(cast(coalesce(ws_sp#49, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#74, 0.00) as decimal(18,2)))), DecimalType(18,2)) AS other_chan_sales_price#81, ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3, ss_qty#22, ss_wc#23, ss_sp#24]
Input [15]: [ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3, ss_qty#22, ss_wc#23, ss_sp#24, ws_qty#47, ws_wc#48, ws_sp#49, cs_sold_year#70, cs_item_sk#52, cs_customer_sk#71, cs_qty#72, cs_wc#73, cs_sp#74]

(60) TakeOrderedAndProject
Input [13]: [ratio#75, store_qty#76, store_wholesale_cost#77, store_sales_price#78, other_chan_qty#79, other_chan_wholesale_cost#80, other_chan_sales_price#81, ss_sold_year#21, ss_item_sk#2, ss_customer_sk#3, ss_qty#22, ss_wc#23, ss_sp#24]
Arguments: 100, [ss_sold_year#21 ASC NULLS FIRST, ss_item_sk#2 ASC NULLS FIRST, ss_customer_sk#3 ASC NULLS FIRST, ss_qty#22 DESC NULLS LAST, ss_wc#23 DESC NULLS LAST, ss_sp#24 DESC NULLS LAST, other_chan_qty#79 ASC NULLS FIRST, other_chan_wholesale_cost#80 ASC NULLS FIRST, other_chan_sales_price#81 ASC NULLS FIRST, ratio#75 ASC NULLS FIRST], [ratio#75, store_qty#76, store_wholesale_cost#77, store_sales_price#78, other_chan_qty#79, other_chan_wholesale_cost#80, other_chan_sales_price#81]

===== Subqueries =====

Subquery:1 Hosting operator id = 20 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#82
BroadcastExchange (64)
+- * Project (63)
   +- * Filter (62)
      +- BatchScan spark_catalog.default.date_dim (61)


(61) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#34, d_year#35]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_date_sk IS NOT NULL, d_year = 2000, d_year IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(62) Filter [codegen id : 1]
Input [2]: [d_date_sk#34, d_year#35]
Condition : ((isnotnull(d_date_sk#34) AND (d_year#35 = 2000)) AND isnotnull(d_year#35))

(63) Project [codegen id : 1]
Output [2]: [d_date_sk#34, d_year#35]
Input [2]: [d_date_sk#34, d_year#35]

(64) BroadcastExchange
Input [2]: [d_date_sk#34, d_year#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:2 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#50 IN dynamicpruning#82


