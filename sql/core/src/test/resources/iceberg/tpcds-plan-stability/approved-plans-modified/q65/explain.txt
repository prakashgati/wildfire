== Physical Plan ==
TakeOrderedAndProject (38)
+- * Project (37)
   +- * BroadcastHashJoin Inner BuildRight (36)
      :- * Project (22)
      :  +- * BroadcastHashJoin Inner BuildRight (21)
      :     :- * Project (16)
      :     :  +- * BroadcastHashJoin Inner BuildRight (15)
      :     :     :- * Project (3)
      :     :     :  +- * Filter (2)
      :     :     :     +- BatchScan spark_catalog.default.store (1)
      :     :     +- BroadcastExchange (14)
      :     :        +- * Filter (13)
      :     :           +- * HashAggregate (12)
      :     :              +- Exchange (11)
      :     :                 +- * HashAggregate (10)
      :     :                    +- * Project (9)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                          :- * Project (6)
      :     :                          :  +- * Filter (5)
      :     :                          :     +- BatchScan spark_catalog.default.store_sales (4)
      :     :                          +- ReusedExchange (7)
      :     +- BroadcastExchange (20)
      :        +- * Project (19)
      :           +- * Filter (18)
      :              +- BatchScan spark_catalog.default.item (17)
      +- BroadcastExchange (35)
         +- * HashAggregate (34)
            +- Exchange (33)
               +- * HashAggregate (32)
                  +- * HashAggregate (31)
                     +- Exchange (30)
                        +- * HashAggregate (29)
                           +- * Project (28)
                              +- * BroadcastHashJoin Inner BuildRight (27)
                                 :- * Project (25)
                                 :  +- * Filter (24)
                                 :     +- BatchScan spark_catalog.default.store_sales (23)
                                 +- ReusedExchange (26)


(1) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#1, s_store_name#2]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) Project [codegen id : 9]
Output [2]: [s_store_sk#1, s_store_name#2]
Input [2]: [s_store_sk#1, s_store_name#2]

(4) BatchScan spark_catalog.default.store_sales
Output [4]: [ss_sold_date_sk#3, ss_item_sk#4, ss_store_sk#5, ss_sales_price#6]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_sold_date_sk >= 2451911, ss_sold_date_sk <= 2452275, ss_store_sk IS NOT NULL, ss_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#3, ss_item_sk#4, ss_store_sk#5, ss_sales_price#6]
Condition : ((((isnotnull(ss_sold_date_sk#3) AND (ss_sold_date_sk#3 >= 2451911)) AND (ss_sold_date_sk#3 <= 2452275)) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_item_sk#4))

(6) Project [codegen id : 2]
Output [4]: [ss_sold_date_sk#3, ss_item_sk#4, ss_store_sk#5, ss_sales_price#6]
Input [4]: [ss_sold_date_sk#3, ss_item_sk#4, ss_store_sk#5, ss_sales_price#6]

(7) ReusedExchange [Reuses operator id: 42]
Output [1]: [d_date_sk#7]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join condition: None

(9) Project [codegen id : 2]
Output [3]: [ss_item_sk#4, ss_store_sk#5, ss_sales_price#6]
Input [5]: [ss_sold_date_sk#3, ss_item_sk#4, ss_store_sk#5, ss_sales_price#6, d_date_sk#7]

(10) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#4, ss_store_sk#5, ss_sales_price#6]
Keys [2]: [ss_store_sk#5, ss_item_sk#4]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ss_store_sk#5, ss_item_sk#4, sum#9]

(11) Exchange
Input [3]: [ss_store_sk#5, ss_item_sk#4, sum#9]
Arguments: hashpartitioning(ss_store_sk#5, ss_item_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(12) HashAggregate [codegen id : 3]
Input [3]: [ss_store_sk#5, ss_item_sk#4, sum#9]
Keys [2]: [ss_store_sk#5, ss_item_sk#4]
Functions [1]: [sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#6))#10]
Results [3]: [ss_store_sk#5, ss_item_sk#4, MakeDecimal(sum(UnscaledValue(ss_sales_price#6))#10,17,2) AS revenue#11]

(13) Filter [codegen id : 3]
Input [3]: [ss_store_sk#5, ss_item_sk#4, revenue#11]
Condition : isnotnull(revenue#11)

(14) BroadcastExchange
Input [3]: [ss_store_sk#5, ss_item_sk#4, revenue#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(15) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#5]
Join condition: None

(16) Project [codegen id : 9]
Output [4]: [s_store_name#2, ss_store_sk#5, ss_item_sk#4, revenue#11]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#5, ss_item_sk#4, revenue#11]

(17) BatchScan spark_catalog.default.item
Output [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(18) Filter [codegen id : 4]
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Condition : isnotnull(i_item_sk#12)

(19) Project [codegen id : 4]
Output [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(20) BroadcastExchange
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#4]
Right keys [1]: [i_item_sk#12]
Join condition: None

(22) Project [codegen id : 9]
Output [7]: [s_store_name#2, ss_store_sk#5, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Input [9]: [s_store_name#2, ss_store_sk#5, ss_item_sk#4, revenue#11, i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(23) BatchScan spark_catalog.default.store_sales
Output [4]: [ss_sold_date_sk#17, ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_sold_date_sk >= 2451911, ss_sold_date_sk <= 2452275, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(24) Filter [codegen id : 6]
Input [4]: [ss_sold_date_sk#17, ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Condition : (((isnotnull(ss_sold_date_sk#17) AND (ss_sold_date_sk#17 >= 2451911)) AND (ss_sold_date_sk#17 <= 2452275)) AND isnotnull(ss_store_sk#19))

(25) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#17, ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Input [4]: [ss_sold_date_sk#17, ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]

(26) ReusedExchange [Reuses operator id: 42]
Output [1]: [d_date_sk#21]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#17]
Right keys [1]: [d_date_sk#21]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Input [5]: [ss_sold_date_sk#17, ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, d_date_sk#21]

(29) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Keys [2]: [ss_store_sk#19, ss_item_sk#18]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#20))]
Aggregate Attributes [1]: [sum#22]
Results [3]: [ss_store_sk#19, ss_item_sk#18, sum#23]

(30) Exchange
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#23]
Arguments: hashpartitioning(ss_store_sk#19, ss_item_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#23]
Keys [2]: [ss_store_sk#19, ss_item_sk#18]
Functions [1]: [sum(UnscaledValue(ss_sales_price#20))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#20))#24]
Results [2]: [ss_store_sk#19, MakeDecimal(sum(UnscaledValue(ss_sales_price#20))#24,17,2) AS revenue#25]

(32) HashAggregate [codegen id : 7]
Input [2]: [ss_store_sk#19, revenue#25]
Keys [1]: [ss_store_sk#19]
Functions [1]: [partial_avg(revenue#25)]
Aggregate Attributes [2]: [sum#26, count#27]
Results [3]: [ss_store_sk#19, sum#28, count#29]

(33) Exchange
Input [3]: [ss_store_sk#19, sum#28, count#29]
Arguments: hashpartitioning(ss_store_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#19, sum#28, count#29]
Keys [1]: [ss_store_sk#19]
Functions [1]: [avg(revenue#25)]
Aggregate Attributes [1]: [avg(revenue#25)#30]
Results [2]: [ss_store_sk#19, avg(revenue#25)#30 AS ave#31]

(35) BroadcastExchange
Input [2]: [ss_store_sk#19, ave#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [ss_store_sk#19]
Join condition: (cast(revenue#11 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#31)), DecimalType(23,7)))

(37) Project [codegen id : 9]
Output [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Input [9]: [s_store_name#2, ss_store_sk#5, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16, ss_store_sk#19, ave#31]

(38) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#13 ASC NULLS FIRST], [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#32
BroadcastExchange (42)
+- * Project (41)
   +- * Filter (40)
      +- BatchScan spark_catalog.default.date_dim (39)


(39) BatchScan spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_month_seq#33]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IS NOT NULL, d_month_seq >= 1212, d_month_seq <= 1223, d_date_sk >= 2451911, d_date_sk <= 2452275, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(40) Filter [codegen id : 1]
Input [2]: [d_date_sk#7, d_month_seq#33]
Condition : (((((isnotnull(d_month_seq#33) AND (d_month_seq#33 >= 1212)) AND (d_month_seq#33 <= 1223)) AND (d_date_sk#7 >= 2451911)) AND (d_date_sk#7 <= 2452275)) AND isnotnull(d_date_sk#7))

(41) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_month_seq#33]

(42) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 23 Hosting Expression = ss_sold_date_sk#17 IN dynamicpruning#32


