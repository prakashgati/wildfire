== Physical Plan ==
TakeOrderedAndProject (37)
+- * Project (36)
   +- * BroadcastHashJoin Inner BuildRight (35)
      :- * Project (33)
      :  +- * BroadcastHashJoin Inner BuildRight (32)
      :     :- * HashAggregate (27)
      :     :  +- Exchange (26)
      :     :     +- * HashAggregate (25)
      :     :        +- * Project (24)
      :     :           +- * BroadcastHashJoin Inner BuildRight (23)
      :     :              :- * Project (18)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :              :     :- * Project (12)
      :     :              :     :  +- * BroadcastHashJoin Inner BuildRight (11)
      :     :              :     :     :- * Project (6)
      :     :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :              :     :     :     :- * Project (3)
      :     :              :     :     :     :  +- * Filter (2)
      :     :              :     :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
      :     :              :     :     :     +- ReusedExchange (4)
      :     :              :     :     +- BroadcastExchange (10)
      :     :              :     :        +- * Project (9)
      :     :              :     :           +- * Filter (8)
      :     :              :     :              +- BatchScan spark_catalog.default.store (7)
      :     :              :     +- BroadcastExchange (16)
      :     :              :        +- * Project (15)
      :     :              :           +- * Filter (14)
      :     :              :              +- BatchScan spark_catalog.default.household_demographics (13)
      :     :              +- BroadcastExchange (22)
      :     :                 +- * Project (21)
      :     :                    +- * Filter (20)
      :     :                       +- BatchScan spark_catalog.default.customer_address (19)
      :     +- BroadcastExchange (31)
      :        +- * Project (30)
      :           +- * Filter (29)
      :              +- BatchScan spark_catalog.default.customer (28)
      +- ReusedExchange (34)


(1) BatchScan spark_catalog.default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IN (2451790, 2451609, 2451294, 2451658, 2452099, 2451482, 2451700, 2452035, 2452274, 2451258, 2451847, 2451714, 2451937, 2451860, 2451601, 2451573, 2451686, 2452008, 2451454, 2451882, 2451832, 2452259, 2451671, 2451903, 2451497, 2452162, 2451322, 2451517, 2451434, 2451273, 2451405, 2452105, 2451924, 2452050, 2452126, 2452203, 2451818, 2451559, 2451853, 2451238, 2451209, 2451357, 2451959, 2452239, 2451608, 2452141, 2452252, 2451623, 2451867, 2451504, 2451910, 2452232, 2451874, 2451581, 2451329, 2451223, 2451783, 2452267, 2452042, 2451895, 2451986, 2452091, 2451693, 2451265, 2451678, 2451825, 2451244, 2451490, 2451287, 2451419, 2451546, 2451245, 2451713, 2452070, 2451189, 2451804, 2451468, 2451525, 2451902, 2452077, 2452161, 2451378, 2451567, 2451931, 2451699, 2451251, 2451840, 2452253, 2451938, 2451510, 2452231, 2452036, 2451616, 2451230, 2452112, 2451846, 2451966, 2451538, 2451819, 2452140, 2452183, 2451496, 2451791, 2451595, 2451574, 2451363, 2451994, 2451917, 2451602, 2452273, 2451237, 2451350, 2451685, 2451259, 2451286, 2451972, 2452224, 2451370, 2452245, 2451643, 2451993, 2451315, 2451301, 2451560, 2451433, 2452225, 2451532, 2451755, 2451854, 2451545, 2451210, 2451587, 2451987, 2451447, 2452197, 2451552, 2451896, 2451679, 2452147, 2451735, 2452022, 2451707, 2451868, 2451398, 2451777, 2451181, 2451503, 2451839, 2452175, 2451441, 2452154, 2452029, 2452196, 2451952, 2451805, 2451965, 2451539, 2452001, 2451833, 2451392, 2451524, 2451461, 2452133, 2451448, 2451307, 2451615, 2451769, 2451412, 2451349, 2451651, 2451763, 2451203, 2452064, 2451980, 2451748, 2451637, 2452182, 2451279, 2451231, 2451734, 2451692, 2452071, 2451336, 2451300, 2451727, 2451630, 2452189, 2451875, 2451973, 2451328, 2452084, 2451399, 2451944, 2452204, 2451385, 2451776, 2451384, 2451272, 2451812, 2451749, 2451566, 2451182, 2451945, 2451420, 2451930, 2452057, 2451756, 2451644, 2451314, 2451364, 2452007, 2451798, 2451475, 2452015, 2451440, 2452000, 2451588, 2452148, 2451195, 2452217, 2451371, 2452176, 2451531, 2452134, 2452211, 2451462, 2451188, 2451741, 2452119, 2451342, 2451580, 2451672, 2451889, 2451280, 2451406, 2451293, 2451217, 2452049, 2452106, 2451321, 2451335, 2451483, 2452260, 2451657, 2451979, 2451518, 2451629, 2451728, 2451923, 2451861, 2451951, 2452246, 2451455, 2451356, 2451224, 2452210, 2452021, 2451427, 2451202, 2452098, 2452168, 2451553, 2451391, 2451706, 2452155, 2451196, 2451770, 2452127, 2451762, 2452078, 2451958, 2451721, 2451665, 2452120, 2451252, 2452085, 2452092, 2451476, 2452218, 2452169, 2451797, 2451650, 2451881, 2451511, 2451469, 2451888, 2452043, 2452266, 2451664, 2452014, 2451343, 2452056, 2452190, 2452063, 2451636, 2451742, 2451811, 2451720, 2451308, 2451489, 2451413, 2451216, 2451594, 2452238, 2451784, 2451426, 2451622, 2451916, 2452113, 2451909, 2451266, 2451826, 2451377, 2452028), ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_hdemo_sk IS NOT NULL, ss_addr_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Condition : (((((ss_sold_date_sk#1 INSET 2451181, 2451182, 2451188, 2451189, 2451195, 2451196, 2451202, 2451203, 2451209, 2451210, 2451216, 2451217, 2451223, 2451224, 2451230, 2451231, 2451237, 2451238, 2451244, 2451245, 2451251, 2451252, 2451258, 2451259, 2451265, 2451266, 2451272, 2451273, 2451279, 2451280, 2451286, 2451287, 2451293, 2451294, 2451300, 2451301, 2451307, 2451308, 2451314, 2451315, 2451321, 2451322, 2451328, 2451329, 2451335, 2451336, 2451342, 2451343, 2451349, 2451350, 2451356, 2451357, 2451363, 2451364, 2451370, 2451371, 2451377, 2451378, 2451384, 2451385, 2451391, 2451392, 2451398, 2451399, 2451405, 2451406, 2451412, 2451413, 2451419, 2451420, 2451426, 2451427, 2451433, 2451434, 2451440, 2451441, 2451447, 2451448, 2451454, 2451455, 2451461, 2451462, 2451468, 2451469, 2451475, 2451476, 2451482, 2451483, 2451489, 2451490, 2451496, 2451497, 2451503, 2451504, 2451510, 2451511, 2451517, 2451518, 2451524, 2451525, 2451531, 2451532, 2451538, 2451539, 2451545, 2451546, 2451552, 2451553, 2451559, 2451560, 2451566, 2451567, 2451573, 2451574, 2451580, 2451581, 2451587, 2451588, 2451594, 2451595, 2451601, 2451602, 2451608, 2451609, 2451615, 2451616, 2451622, 2451623, 2451629, 2451630, 2451636, 2451637, 2451643, 2451644, 2451650, 2451651, 2451657, 2451658, 2451664, 2451665, 2451671, 2451672, 2451678, 2451679, 2451685, 2451686, 2451692, 2451693, 2451699, 2451700, 2451706, 2451707, 2451713, 2451714, 2451720, 2451721, 2451727, 2451728, 2451734, 2451735, 2451741, 2451742, 2451748, 2451749, 2451755, 2451756, 2451762, 2451763, 2451769, 2451770, 2451776, 2451777, 2451783, 2451784, 2451790, 2451791, 2451797, 2451798, 2451804, 2451805, 2451811, 2451812, 2451818, 2451819, 2451825, 2451826, 2451832, 2451833, 2451839, 2451840, 2451846, 2451847, 2451853, 2451854, 2451860, 2451861, 2451867, 2451868, 2451874, 2451875, 2451881, 2451882, 2451888, 2451889, 2451895, 2451896, 2451902, 2451903, 2451909, 2451910, 2451916, 2451917, 2451923, 2451924, 2451930, 2451931, 2451937, 2451938, 2451944, 2451945, 2451951, 2451952, 2451958, 2451959, 2451965, 2451966, 2451972, 2451973, 2451979, 2451980, 2451986, 2451987, 2451993, 2451994, 2452000, 2452001, 2452007, 2452008, 2452014, 2452015, 2452021, 2452022, 2452028, 2452029, 2452035, 2452036, 2452042, 2452043, 2452049, 2452050, 2452056, 2452057, 2452063, 2452064, 2452070, 2452071, 2452077, 2452078, 2452084, 2452085, 2452091, 2452092, 2452098, 2452099, 2452105, 2452106, 2452112, 2452113, 2452119, 2452120, 2452126, 2452127, 2452133, 2452134, 2452140, 2452141, 2452147, 2452148, 2452154, 2452155, 2452161, 2452162, 2452168, 2452169, 2452175, 2452176, 2452182, 2452183, 2452189, 2452190, 2452196, 2452197, 2452203, 2452204, 2452210, 2452211, 2452217, 2452218, 2452224, 2452225, 2452231, 2452232, 2452238, 2452239, 2452245, 2452246, 2452252, 2452253, 2452259, 2452260, 2452266, 2452267, 2452273, 2452274 AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_addr_sk#4)) AND isnotnull(ss_customer_sk#2))

(3) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]

(4) ReusedExchange [Reuses operator id: 41]
Output [1]: [d_date_sk#9]

(5) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(6) Project [codegen id : 5]
Output [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, d_date_sk#9]

(7) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#10, s_city#11]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_city IN ('Midway', 'Concord', 'Spring Hill', 'Brownsville', 'Greenville'), s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_city#11]
Condition : (s_city#11 IN (Midway,Concord,Spring Hill,Brownsville,Greenville) AND isnotnull(s_store_sk#10))

(9) Project [codegen id : 2]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_city#11]

(10) BroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#10]
Join condition: None

(12) Project [codegen id : 5]
Output [6]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [8]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_store_sk#10]

(13) BatchScan spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#12, hd_dep_count#13, hd_vehicle_count#14]
spark_catalog.default.household_demographics [scan class = SparkBatchQueryScan] [filters=(hd_dep_count = 5 OR hd_vehicle_count = 3), hd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [3]: [hd_demo_sk#12, hd_dep_count#13, hd_vehicle_count#14]
Condition : (((hd_dep_count#13 = 5) OR (hd_vehicle_count#14 = 3)) AND isnotnull(hd_demo_sk#12))

(15) Project [codegen id : 3]
Output [1]: [hd_demo_sk#12]
Input [3]: [hd_demo_sk#12, hd_dep_count#13, hd_vehicle_count#14]

(16) BroadcastExchange
Input [1]: [hd_demo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#12]
Join condition: None

(18) Project [codegen id : 5]
Output [5]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, hd_demo_sk#12]

(19) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#15, ca_city#16]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL, ca_city IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 4]
Input [2]: [ca_address_sk#15, ca_city#16]
Condition : (isnotnull(ca_address_sk#15) AND isnotnull(ca_city#16))

(21) Project [codegen id : 4]
Output [2]: [ca_address_sk#15, ca_city#16]
Input [2]: [ca_address_sk#15, ca_city#16]

(22) BroadcastExchange
Input [2]: [ca_address_sk#15, ca_city#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#4]
Right keys [1]: [ca_address_sk#15]
Join condition: None

(24) Project [codegen id : 5]
Output [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#16]
Input [7]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_address_sk#15, ca_city#16]

(25) HashAggregate [codegen id : 5]
Input [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#16]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#7)), partial_sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum#17, sum#18]
Results [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, sum#19, sum#20]

(26) Exchange
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, sum#19, sum#20]
Arguments: hashpartitioning(ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(27) HashAggregate [codegen id : 8]
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16, sum#19, sum#20]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#16]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#7)), sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#7))#21, sum(UnscaledValue(ss_net_profit#8))#22]
Results [5]: [ss_ticket_number#6, ss_customer_sk#2, ca_city#16 AS bought_city#23, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#7))#21,17,2) AS amt#24, MakeDecimal(sum(UnscaledValue(ss_net_profit#8))#22,17,2) AS profit#25]

(28) BatchScan spark_catalog.default.customer
Output [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 6]
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Condition : (isnotnull(c_customer_sk#26) AND isnotnull(c_current_addr_sk#27))

(30) Project [codegen id : 6]
Output [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]

(31) BroadcastExchange
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(33) Project [codegen id : 8]
Output [7]: [ss_ticket_number#6, bought_city#23, amt#24, profit#25, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Input [9]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#23, amt#24, profit#25, c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]

(34) ReusedExchange [Reuses operator id: 22]
Output [2]: [ca_address_sk#30, ca_city#31]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#27]
Right keys [1]: [ca_address_sk#30]
Join condition: NOT (ca_city#31 = bought_city#23)

(36) Project [codegen id : 8]
Output [7]: [c_last_name#29, c_first_name#28, ca_city#31, bought_city#23, ss_ticket_number#6, amt#24, profit#25]
Input [9]: [ss_ticket_number#6, bought_city#23, amt#24, profit#25, c_current_addr_sk#27, c_first_name#28, c_last_name#29, ca_address_sk#30, ca_city#31]

(37) TakeOrderedAndProject
Input [7]: [c_last_name#29, c_first_name#28, ca_city#31, bought_city#23, ss_ticket_number#6, amt#24, profit#25]
Arguments: 100, [c_last_name#29 ASC NULLS FIRST, c_first_name#28 ASC NULLS FIRST, ca_city#31 ASC NULLS FIRST, bought_city#23 ASC NULLS FIRST, ss_ticket_number#6 ASC NULLS FIRST], [c_last_name#29, c_first_name#28, ca_city#31, bought_city#23, ss_ticket_number#6, amt#24, profit#25]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#32
BroadcastExchange (41)
+- * Project (40)
   +- * Filter (39)
      +- BatchScan spark_catalog.default.date_dim (38)


(38) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#33, d_dow#34]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_dow IN (6, 0), d_year IN (1999, 2000, 2001), d_date_sk IN (2451790, 2451609, 2451294, 2451658, 2452099, 2451482, 2451700, 2452035, 2452274, 2451258, 2451847, 2451714, 2451937, 2451860, 2451601, 2451573, 2451686, 2452008, 2451454, 2451882, 2451832, 2452259, 2451671, 2451903, 2451497, 2452162, 2451322, 2451517, 2451434, 2451273, 2451405, 2452105, 2451924, 2452050, 2452126, 2452203, 2451818, 2451559, 2451853, 2451238, 2451209, 2451357, 2451959, 2452239, 2451608, 2452141, 2452252, 2451623, 2451867, 2451504, 2451910, 2452232, 2451874, 2451581, 2451329, 2451223, 2451783, 2452267, 2452042, 2451895, 2451986, 2452091, 2451693, 2451265, 2451678, 2451825, 2451244, 2451490, 2451287, 2451419, 2451546, 2451245, 2451713, 2452070, 2451189, 2451804, 2451468, 2451525, 2451902, 2452077, 2452161, 2451378, 2451567, 2451931, 2451699, 2451251, 2451840, 2452253, 2451938, 2451510, 2452231, 2452036, 2451616, 2451230, 2452112, 2451846, 2451966, 2451538, 2451819, 2452140, 2452183, 2451496, 2451791, 2451595, 2451574, 2451363, 2451994, 2451917, 2451602, 2452273, 2451237, 2451350, 2451685, 2451259, 2451286, 2451972, 2452224, 2451370, 2452245, 2451643, 2451993, 2451315, 2451301, 2451560, 2451433, 2452225, 2451532, 2451755, 2451854, 2451545, 2451210, 2451587, 2451987, 2451447, 2452197, 2451552, 2451896, 2451679, 2452147, 2451735, 2452022, 2451707, 2451868, 2451398, 2451777, 2451181, 2451503, 2451839, 2452175, 2451441, 2452154, 2452029, 2452196, 2451952, 2451805, 2451965, 2451539, 2452001, 2451833, 2451392, 2451524, 2451461, 2452133, 2451448, 2451307, 2451615, 2451769, 2451412, 2451349, 2451651, 2451763, 2451203, 2452064, 2451980, 2451748, 2451637, 2452182, 2451279, 2451231, 2451734, 2451692, 2452071, 2451336, 2451300, 2451727, 2451630, 2452189, 2451875, 2451973, 2451328, 2452084, 2451399, 2451944, 2452204, 2451385, 2451776, 2451384, 2451272, 2451812, 2451749, 2451566, 2451182, 2451945, 2451420, 2451930, 2452057, 2451756, 2451644, 2451314, 2451364, 2452007, 2451798, 2451475, 2452015, 2451440, 2452000, 2451588, 2452148, 2451195, 2452217, 2451371, 2452176, 2451531, 2452134, 2452211, 2451462, 2451188, 2451741, 2452119, 2451342, 2451580, 2451672, 2451889, 2451280, 2451406, 2451293, 2451217, 2452049, 2452106, 2451321, 2451335, 2451483, 2452260, 2451657, 2451979, 2451518, 2451629, 2451728, 2451923, 2451861, 2451951, 2452246, 2451455, 2451356, 2451224, 2452210, 2452021, 2451427, 2451202, 2452098, 2452168, 2451553, 2451391, 2451706, 2452155, 2451196, 2451770, 2452127, 2451762, 2452078, 2451958, 2451721, 2451665, 2452120, 2451252, 2452085, 2452092, 2451476, 2452218, 2452169, 2451797, 2451650, 2451881, 2451511, 2451469, 2451888, 2452043, 2452266, 2451664, 2452014, 2451343, 2452056, 2452190, 2452063, 2451636, 2451742, 2451811, 2451720, 2451308, 2451489, 2451413, 2451216, 2451594, 2452238, 2451784, 2451426, 2451622, 2451916, 2452113, 2451909, 2451266, 2451826, 2451377, 2452028), d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(39) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#33, d_dow#34]
Condition : (((d_dow#34 IN (6,0) AND d_year#33 IN (1999,2000,2001)) AND d_date_sk#9 INSET 2451181, 2451182, 2451188, 2451189, 2451195, 2451196, 2451202, 2451203, 2451209, 2451210, 2451216, 2451217, 2451223, 2451224, 2451230, 2451231, 2451237, 2451238, 2451244, 2451245, 2451251, 2451252, 2451258, 2451259, 2451265, 2451266, 2451272, 2451273, 2451279, 2451280, 2451286, 2451287, 2451293, 2451294, 2451300, 2451301, 2451307, 2451308, 2451314, 2451315, 2451321, 2451322, 2451328, 2451329, 2451335, 2451336, 2451342, 2451343, 2451349, 2451350, 2451356, 2451357, 2451363, 2451364, 2451370, 2451371, 2451377, 2451378, 2451384, 2451385, 2451391, 2451392, 2451398, 2451399, 2451405, 2451406, 2451412, 2451413, 2451419, 2451420, 2451426, 2451427, 2451433, 2451434, 2451440, 2451441, 2451447, 2451448, 2451454, 2451455, 2451461, 2451462, 2451468, 2451469, 2451475, 2451476, 2451482, 2451483, 2451489, 2451490, 2451496, 2451497, 2451503, 2451504, 2451510, 2451511, 2451517, 2451518, 2451524, 2451525, 2451531, 2451532, 2451538, 2451539, 2451545, 2451546, 2451552, 2451553, 2451559, 2451560, 2451566, 2451567, 2451573, 2451574, 2451580, 2451581, 2451587, 2451588, 2451594, 2451595, 2451601, 2451602, 2451608, 2451609, 2451615, 2451616, 2451622, 2451623, 2451629, 2451630, 2451636, 2451637, 2451643, 2451644, 2451650, 2451651, 2451657, 2451658, 2451664, 2451665, 2451671, 2451672, 2451678, 2451679, 2451685, 2451686, 2451692, 2451693, 2451699, 2451700, 2451706, 2451707, 2451713, 2451714, 2451720, 2451721, 2451727, 2451728, 2451734, 2451735, 2451741, 2451742, 2451748, 2451749, 2451755, 2451756, 2451762, 2451763, 2451769, 2451770, 2451776, 2451777, 2451783, 2451784, 2451790, 2451791, 2451797, 2451798, 2451804, 2451805, 2451811, 2451812, 2451818, 2451819, 2451825, 2451826, 2451832, 2451833, 2451839, 2451840, 2451846, 2451847, 2451853, 2451854, 2451860, 2451861, 2451867, 2451868, 2451874, 2451875, 2451881, 2451882, 2451888, 2451889, 2451895, 2451896, 2451902, 2451903, 2451909, 2451910, 2451916, 2451917, 2451923, 2451924, 2451930, 2451931, 2451937, 2451938, 2451944, 2451945, 2451951, 2451952, 2451958, 2451959, 2451965, 2451966, 2451972, 2451973, 2451979, 2451980, 2451986, 2451987, 2451993, 2451994, 2452000, 2452001, 2452007, 2452008, 2452014, 2452015, 2452021, 2452022, 2452028, 2452029, 2452035, 2452036, 2452042, 2452043, 2452049, 2452050, 2452056, 2452057, 2452063, 2452064, 2452070, 2452071, 2452077, 2452078, 2452084, 2452085, 2452091, 2452092, 2452098, 2452099, 2452105, 2452106, 2452112, 2452113, 2452119, 2452120, 2452126, 2452127, 2452133, 2452134, 2452140, 2452141, 2452147, 2452148, 2452154, 2452155, 2452161, 2452162, 2452168, 2452169, 2452175, 2452176, 2452182, 2452183, 2452189, 2452190, 2452196, 2452197, 2452203, 2452204, 2452210, 2452211, 2452217, 2452218, 2452224, 2452225, 2452231, 2452232, 2452238, 2452239, 2452245, 2452246, 2452252, 2452253, 2452259, 2452260, 2452266, 2452267, 2452273, 2452274) AND isnotnull(d_date_sk#9))

(40) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#33, d_dow#34]

(41) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


