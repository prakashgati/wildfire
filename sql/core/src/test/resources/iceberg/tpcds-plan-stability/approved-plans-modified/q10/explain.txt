== Physical Plan ==
TakeOrderedAndProject (43)
+- * HashAggregate (42)
   +- Exchange (41)
      +- * HashAggregate (40)
         +- * Project (39)
            +- * BroadcastHashJoin Inner BuildRight (38)
               :- * Project (33)
               :  +- * BroadcastHashJoin Inner BuildRight (32)
               :     :- * Project (27)
               :     :  +- * BroadcastHashJoin LeftSemi BuildRight (26)
               :     :     :- * BroadcastHashJoin LeftSemi BuildRight (18)
               :     :     :  :- * Project (3)
               :     :     :  :  +- * Filter (2)
               :     :     :  :     +- BatchScan spark_catalog.default.customer (1)
               :     :     :  +- BroadcastExchange (17)
               :     :     :     +- Union (16)
               :     :     :        :- * Project (9)
               :     :     :        :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :        :     :- * Project (6)
               :     :     :        :     :  +- * Filter (5)
               :     :     :        :     :     +- BatchScan spark_catalog.default.web_sales (4)
               :     :     :        :     +- ReusedExchange (7)
               :     :     :        +- * Project (15)
               :     :     :           +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :              :- * Project (12)
               :     :     :              :  +- * Filter (11)
               :     :     :              :     +- BatchScan spark_catalog.default.catalog_sales (10)
               :     :     :              +- ReusedExchange (13)
               :     :     +- BroadcastExchange (25)
               :     :        +- * Project (24)
               :     :           +- * BroadcastHashJoin Inner BuildRight (23)
               :     :              :- * Project (21)
               :     :              :  +- * Filter (20)
               :     :              :     +- BatchScan spark_catalog.default.store_sales (19)
               :     :              +- ReusedExchange (22)
               :     +- BroadcastExchange (31)
               :        +- * Project (30)
               :           +- * Filter (29)
               :              +- BatchScan spark_catalog.default.customer_address (28)
               +- BroadcastExchange (37)
                  +- * Project (36)
                     +- * Filter (35)
                        +- BatchScan spark_catalog.default.customer_demographics (34)


(1) BatchScan spark_catalog.default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL, c_current_cdemo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 9]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : ((isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3)) AND isnotnull(c_current_cdemo_sk#2))

(3) Project [codegen id : 9]
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(4) BatchScan spark_catalog.default.web_sales
Output [2]: [ws_sold_date_sk#4, ws_bill_customer_sk#5]
spark_catalog.default.web_sales [scan class = SparkBatchQueryScan] [filters=ws_sold_date_sk IS NOT NULL, ws_bill_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 2]
Input [2]: [ws_sold_date_sk#4, ws_bill_customer_sk#5]
Condition : (isnotnull(ws_sold_date_sk#4) AND isnotnull(ws_bill_customer_sk#5))

(6) Project [codegen id : 2]
Output [2]: [ws_sold_date_sk#4, ws_bill_customer_sk#5]
Input [2]: [ws_sold_date_sk#4, ws_bill_customer_sk#5]

(7) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#6]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [ws_bill_customer_sk#5 AS customer_sk#7]
Input [3]: [ws_sold_date_sk#4, ws_bill_customer_sk#5, d_date_sk#6]

(10) BatchScan spark_catalog.default.catalog_sales
Output [2]: [cs_sold_date_sk#8, cs_ship_customer_sk#9]
spark_catalog.default.catalog_sales [scan class = SparkBatchQueryScan] [filters=cs_sold_date_sk IS NOT NULL, cs_ship_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(11) Filter [codegen id : 4]
Input [2]: [cs_sold_date_sk#8, cs_ship_customer_sk#9]
Condition : (isnotnull(cs_sold_date_sk#8) AND isnotnull(cs_ship_customer_sk#9))

(12) Project [codegen id : 4]
Output [2]: [cs_sold_date_sk#8, cs_ship_customer_sk#9]
Input [2]: [cs_sold_date_sk#8, cs_ship_customer_sk#9]

(13) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [cs_ship_customer_sk#9 AS customer_sk#11]
Input [3]: [cs_sold_date_sk#8, cs_ship_customer_sk#9, d_date_sk#10]

(16) Union

(17) BroadcastExchange
Input [1]: [customer_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(18) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#7]
Join condition: None

(19) BatchScan spark_catalog.default.store_sales
Output [2]: [ss_sold_date_sk#12, ss_customer_sk#13]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 6]
Input [2]: [ss_sold_date_sk#12, ss_customer_sk#13]
Condition : (isnotnull(ss_sold_date_sk#12) AND isnotnull(ss_customer_sk#13))

(21) Project [codegen id : 6]
Output [2]: [ss_sold_date_sk#12, ss_customer_sk#13]
Input [2]: [ss_sold_date_sk#12, ss_customer_sk#13]

(22) ReusedExchange [Reuses operator id: 47]
Output [1]: [d_date_sk#14]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(24) Project [codegen id : 6]
Output [1]: [ss_customer_sk#13 AS customer_sk#15]
Input [3]: [ss_sold_date_sk#12, ss_customer_sk#13, d_date_sk#14]

(25) BroadcastExchange
Input [1]: [customer_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#15]
Join condition: None

(27) Project [codegen id : 9]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(28) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#16, ca_county#17]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_county IN ('Walker County', 'Richland County', 'Gaines County', 'Douglas County', 'Dona Ana County'), ca_address_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 7]
Input [2]: [ca_address_sk#16, ca_county#17]
Condition : (ca_county#17 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#16))

(30) Project [codegen id : 7]
Output [1]: [ca_address_sk#16]
Input [2]: [ca_address_sk#16, ca_county#17]

(31) BroadcastExchange
Input [1]: [ca_address_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#16]
Join condition: None

(33) Project [codegen id : 9]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#16]

(34) BatchScan spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
spark_catalog.default.customer_demographics [scan class = SparkBatchQueryScan] [filters=cd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(35) Filter [codegen id : 8]
Input [9]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Condition : isnotnull(cd_demo_sk#18)

(36) Project [codegen id : 8]
Output [9]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Input [9]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]

(37) BroadcastExchange
Input [9]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#18]
Join condition: None

(39) Project [codegen id : 9]
Output [8]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Input [10]: [c_current_cdemo_sk#2, cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]

(40) HashAggregate [codegen id : 9]
Input [8]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Keys [8]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#27]
Results [9]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26, count#28]

(41) Exchange
Input [9]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26, count#28]
Arguments: hashpartitioning(cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(42) HashAggregate [codegen id : 10]
Input [9]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26, count#28]
Keys [8]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cd_purchase_estimate#22, cd_credit_rating#23, cd_dep_count#24, cd_dep_employed_count#25, cd_dep_college_count#26]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#29]
Results [14]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, count(1)#29 AS cnt1#30, cd_purchase_estimate#22, count(1)#29 AS cnt2#31, cd_credit_rating#23, count(1)#29 AS cnt3#32, cd_dep_count#24, count(1)#29 AS cnt4#33, cd_dep_employed_count#25, count(1)#29 AS cnt5#34, cd_dep_college_count#26, count(1)#29 AS cnt6#35]

(43) TakeOrderedAndProject
Input [14]: [cd_gender#19, cd_marital_status#20, cd_education_status#21, cnt1#30, cd_purchase_estimate#22, cnt2#31, cd_credit_rating#23, cnt3#32, cd_dep_count#24, cnt4#33, cd_dep_employed_count#25, cnt5#34, cd_dep_college_count#26, cnt6#35]
Arguments: 100, [cd_gender#19 ASC NULLS FIRST, cd_marital_status#20 ASC NULLS FIRST, cd_education_status#21 ASC NULLS FIRST, cd_purchase_estimate#22 ASC NULLS FIRST, cd_credit_rating#23 ASC NULLS FIRST, cd_dep_count#24 ASC NULLS FIRST, cd_dep_employed_count#25 ASC NULLS FIRST, cd_dep_college_count#26 ASC NULLS FIRST], [cd_gender#19, cd_marital_status#20, cd_education_status#21, cnt1#30, cd_purchase_estimate#22, cnt2#31, cd_credit_rating#23, cnt3#32, cd_dep_count#24, cnt4#33, cd_dep_employed_count#25, cnt5#34, cd_dep_college_count#26, cnt6#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ws_sold_date_sk#4 IN dynamicpruning#36
BroadcastExchange (47)
+- * Project (46)
   +- * Filter (45)
      +- BatchScan spark_catalog.default.date_dim (44)


(44) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#37, d_moy#38]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_year IS NOT NULL, d_moy IS NOT NULL, d_year = 2002, d_moy >= 4, d_moy <= 7, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(45) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#37, d_moy#38]
Condition : (((((isnotnull(d_year#37) AND isnotnull(d_moy#38)) AND (d_year#37 = 2002)) AND (d_moy#38 >= 4)) AND (d_moy#38 <= 7)) AND isnotnull(d_date_sk#6))

(46) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [3]: [d_date_sk#6, d_year#37, d_moy#38]

(47) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 10 Hosting Expression = cs_sold_date_sk#8 IN dynamicpruning#36

Subquery:3 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#36


