== Physical Plan ==
TakeOrderedAndProject (27)
+- * Project (26)
   +- * Filter (25)
      +- Window (24)
         +- * Sort (23)
            +- Exchange (22)
               +- * HashAggregate (21)
                  +- Exchange (20)
                     +- * HashAggregate (19)
                        +- * Project (18)
                           +- * BroadcastHashJoin Inner BuildRight (17)
                              :- * Project (12)
                              :  +- * BroadcastHashJoin Inner BuildRight (11)
                              :     :- * Project (9)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                              :     :     :- * Project (3)
                              :     :     :  +- * Filter (2)
                              :     :     :     +- BatchScan spark_catalog.default.item (1)
                              :     :     +- BroadcastExchange (7)
                              :     :        +- * Project (6)
                              :     :           +- * Filter (5)
                              :     :              +- BatchScan spark_catalog.default.store_sales (4)
                              :     +- ReusedExchange (10)
                              +- BroadcastExchange (16)
                                 +- * Project (15)
                                    +- * Filter (14)
                                       +- BatchScan spark_catalog.default.store (13)


(1) BatchScan spark_catalog.default.item
Output [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manufact_id#5]
spark_catalog.default.item [scan class = SparkBatchQueryScan] [filters=(((i_category IN ('Books', 'Children', 'Electronics') AND i_class IN ('personal', 'portable', 'reference', 'self-help')) AND i_brand IN ('scholaramalgamalg #6', 'scholaramalgamalg #7', 'exportiunivamalg #8', 'scholaramalgamalg #8')) OR ((i_category IN ('Women', 'Music', 'Men') AND i_class IN ('accessories', 'classical', 'fragrances', 'pants')) AND i_brand IN ('amalgimporto #9', 'edu packscholar #9', 'exportiimporto #9', 'importoamalg #9'))), i_item_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 4]
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manufact_id#5]
Condition : ((((i_category#4 IN (Books,Children,Electronics) AND i_class#3 IN (personal,portable,reference,self-help)) AND i_brand#2 IN (scholaramalgamalg #6,scholaramalgamalg #7,exportiunivamalg #8,scholaramalgamalg #8)) OR ((i_category#4 IN (Women,Music,Men) AND i_class#3 IN (accessories,classical,fragrances,pants)) AND i_brand#2 IN (amalgimporto #9,edu packscholar #9,exportiimporto #9,importoamalg #9))) AND isnotnull(i_item_sk#1))

(3) Project [codegen id : 4]
Output [2]: [i_item_sk#1, i_manufact_id#5]
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manufact_id#5]

(4) BatchScan spark_catalog.default.store_sales
Output [4]: [ss_sold_date_sk#10, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IS NOT NULL, ss_sold_date_sk >= 2451911, ss_sold_date_sk <= 2452275, ss_item_sk IS NOT NULL, ss_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(5) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#10, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]
Condition : ((((isnotnull(ss_sold_date_sk#10) AND (ss_sold_date_sk#10 >= 2451911)) AND (ss_sold_date_sk#10 <= 2452275)) AND isnotnull(ss_item_sk#11)) AND isnotnull(ss_store_sk#12))

(6) Project [codegen id : 1]
Output [4]: [ss_sold_date_sk#10, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]
Input [4]: [ss_sold_date_sk#10, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]

(7) BroadcastExchange
Input [4]: [ss_sold_date_sk#10, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#11]
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [i_manufact_id#5, ss_sold_date_sk#10, ss_store_sk#12, ss_sales_price#13]
Input [6]: [i_item_sk#1, i_manufact_id#5, ss_sold_date_sk#10, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13]

(10) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#14, d_qoy#15]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#14]
Join condition: None

(12) Project [codegen id : 4]
Output [4]: [i_manufact_id#5, ss_store_sk#12, ss_sales_price#13, d_qoy#15]
Input [6]: [i_manufact_id#5, ss_sold_date_sk#10, ss_store_sk#12, ss_sales_price#13, d_date_sk#14, d_qoy#15]

(13) BatchScan spark_catalog.default.store
Output [1]: [s_store_sk#16]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [1]: [s_store_sk#16]
Condition : isnotnull(s_store_sk#16)

(15) Project [codegen id : 3]
Output [1]: [s_store_sk#16]
Input [1]: [s_store_sk#16]

(16) BroadcastExchange
Input [1]: [s_store_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#12]
Right keys [1]: [s_store_sk#16]
Join condition: None

(18) Project [codegen id : 4]
Output [3]: [i_manufact_id#5, ss_sales_price#13, d_qoy#15]
Input [5]: [i_manufact_id#5, ss_store_sk#12, ss_sales_price#13, d_qoy#15, s_store_sk#16]

(19) HashAggregate [codegen id : 4]
Input [3]: [i_manufact_id#5, ss_sales_price#13, d_qoy#15]
Keys [2]: [i_manufact_id#5, d_qoy#15]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum#17]
Results [3]: [i_manufact_id#5, d_qoy#15, sum#18]

(20) Exchange
Input [3]: [i_manufact_id#5, d_qoy#15, sum#18]
Arguments: hashpartitioning(i_manufact_id#5, d_qoy#15, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 5]
Input [3]: [i_manufact_id#5, d_qoy#15, sum#18]
Keys [2]: [i_manufact_id#5, d_qoy#15]
Functions [1]: [sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#13))#19]
Results [3]: [i_manufact_id#5, MakeDecimal(sum(UnscaledValue(ss_sales_price#13))#19,17,2) AS sum_sales#20, MakeDecimal(sum(UnscaledValue(ss_sales_price#13))#19,17,2) AS _w0#21]

(22) Exchange
Input [3]: [i_manufact_id#5, sum_sales#20, _w0#21]
Arguments: hashpartitioning(i_manufact_id#5, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) Sort [codegen id : 6]
Input [3]: [i_manufact_id#5, sum_sales#20, _w0#21]
Arguments: [i_manufact_id#5 ASC NULLS FIRST], false, 0

(24) Window
Input [3]: [i_manufact_id#5, sum_sales#20, _w0#21]
Arguments: [avg(_w0#21) windowspecdefinition(i_manufact_id#5, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_quarterly_sales#22], [i_manufact_id#5]

(25) Filter [codegen id : 7]
Input [4]: [i_manufact_id#5, sum_sales#20, _w0#21, avg_quarterly_sales#22]
Condition : CASE WHEN (avg_quarterly_sales#22 > 0.000000) THEN (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#20 as decimal(22,6))) - promote_precision(cast(avg_quarterly_sales#22 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_quarterly_sales#22 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000) ELSE false END

(26) Project [codegen id : 7]
Output [3]: [i_manufact_id#5, sum_sales#20, avg_quarterly_sales#22]
Input [4]: [i_manufact_id#5, sum_sales#20, _w0#21, avg_quarterly_sales#22]

(27) TakeOrderedAndProject
Input [3]: [i_manufact_id#5, sum_sales#20, avg_quarterly_sales#22]
Arguments: 100, [avg_quarterly_sales#22 ASC NULLS FIRST, sum_sales#20 ASC NULLS FIRST, i_manufact_id#5 ASC NULLS FIRST], [i_manufact_id#5, sum_sales#20, avg_quarterly_sales#22]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#10 IN dynamicpruning#23
BroadcastExchange (31)
+- * Project (30)
   +- * Filter (29)
      +- BatchScan spark_catalog.default.date_dim (28)


(28) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#14, d_month_seq#24, d_qoy#15]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_month_seq IN (1222, 1215, 1223, 1217, 1214, 1219, 1213, 1218, 1220, 1221, 1216, 1212), d_date_sk >= 2451911, d_date_sk <= 2452275, d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 1]
Input [3]: [d_date_sk#14, d_month_seq#24, d_qoy#15]
Condition : (((d_month_seq#24 INSET 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223 AND (d_date_sk#14 >= 2451911)) AND (d_date_sk#14 <= 2452275)) AND isnotnull(d_date_sk#14))

(30) Project [codegen id : 1]
Output [2]: [d_date_sk#14, d_qoy#15]
Input [3]: [d_date_sk#14, d_month_seq#24, d_qoy#15]

(31) BroadcastExchange
Input [2]: [d_date_sk#14, d_qoy#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


