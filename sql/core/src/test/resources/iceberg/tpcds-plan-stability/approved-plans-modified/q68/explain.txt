== Physical Plan ==
TakeOrderedAndProject (37)
+- * Project (36)
   +- * BroadcastHashJoin Inner BuildRight (35)
      :- * Project (33)
      :  +- * BroadcastHashJoin Inner BuildRight (32)
      :     :- * HashAggregate (27)
      :     :  +- Exchange (26)
      :     :     +- * HashAggregate (25)
      :     :        +- * Project (24)
      :     :           +- * BroadcastHashJoin Inner BuildRight (23)
      :     :              :- * Project (18)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :              :     :- * Project (12)
      :     :              :     :  +- * BroadcastHashJoin Inner BuildRight (11)
      :     :              :     :     :- * Project (6)
      :     :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :              :     :     :     :- * Project (3)
      :     :              :     :     :     :  +- * Filter (2)
      :     :              :     :     :     :     +- BatchScan spark_catalog.default.store_sales (1)
      :     :              :     :     :     +- ReusedExchange (4)
      :     :              :     :     +- BroadcastExchange (10)
      :     :              :     :        +- * Project (9)
      :     :              :     :           +- * Filter (8)
      :     :              :     :              +- BatchScan spark_catalog.default.store (7)
      :     :              :     +- BroadcastExchange (16)
      :     :              :        +- * Project (15)
      :     :              :           +- * Filter (14)
      :     :              :              +- BatchScan spark_catalog.default.household_demographics (13)
      :     :              +- BroadcastExchange (22)
      :     :                 +- * Project (21)
      :     :                    +- * Filter (20)
      :     :                       +- BatchScan spark_catalog.default.customer_address (19)
      :     +- BroadcastExchange (31)
      :        +- * Project (30)
      :           +- * Filter (29)
      :              +- BatchScan spark_catalog.default.customer (28)
      +- ReusedExchange (34)


(1) BatchScan spark_catalog.default.store_sales
Output [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]
spark_catalog.default.store_sales [scan class = SparkBatchQueryScan] [filters=ss_sold_date_sk IN (2451790, 2451180, 2452216, 2451454, 2452184, 2451485, 2451850, 2451514, 2452062, 2451270, 2452123, 2451758, 2451971, 2451546, 2451942, 2451393, 2451667, 2451453, 2452215, 2451819, 2451331, 2451577, 2451911, 2452245, 2451301, 2451545, 2451605, 2451943, 2451851, 2451181, 2452154, 2451820, 2452001, 2451362, 2451392, 2451240, 2452032, 2451637, 2451484, 2452124, 2451300, 2451727, 2452093, 2451759, 2451698, 2451332, 2451606, 2451666, 2451912, 2452185, 2451211, 2451361, 2452031, 2451212, 2451880, 2451789, 2451423, 2451576, 2451728, 2452246, 2452155, 2452092, 2451881, 2451970, 2451697, 2452063, 2451271, 2451636, 2451515, 2451424, 2451239, 2452002), ss_sold_date_sk IS NOT NULL, ss_store_sk IS NOT NULL, ss_hdemo_sk IS NOT NULL, ss_addr_sk IS NOT NULL, ss_customer_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(2) Filter [codegen id : 5]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]
Condition : (((((ss_sold_date_sk#1 INSET 2451180, 2451181, 2451211, 2451212, 2451239, 2451240, 2451270, 2451271, 2451300, 2451301, 2451331, 2451332, 2451361, 2451362, 2451392, 2451393, 2451423, 2451424, 2451453, 2451454, 2451484, 2451485, 2451514, 2451515, 2451545, 2451546, 2451576, 2451577, 2451605, 2451606, 2451636, 2451637, 2451666, 2451667, 2451697, 2451698, 2451727, 2451728, 2451758, 2451759, 2451789, 2451790, 2451819, 2451820, 2451850, 2451851, 2451880, 2451881, 2451911, 2451912, 2451942, 2451943, 2451970, 2451971, 2452001, 2452002, 2452031, 2452032, 2452062, 2452063, 2452092, 2452093, 2452123, 2452124, 2452154, 2452155, 2452184, 2452185, 2452215, 2452216, 2452245, 2452246 AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_addr_sk#4)) AND isnotnull(ss_customer_sk#2))

(3) Project [codegen id : 5]
Output [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]

(4) ReusedExchange [Reuses operator id: 41]
Output [1]: [d_date_sk#10]

(5) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(6) Project [codegen id : 5]
Output [8]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]
Input [10]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9, d_date_sk#10]

(7) BatchScan spark_catalog.default.store
Output [2]: [s_store_sk#11, s_city#12]
spark_catalog.default.store [scan class = SparkBatchQueryScan] [filters=s_city IN ('Midway', 'Fairview'), s_store_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(8) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_city#12]
Condition : (s_city#12 IN (Midway,Fairview) AND isnotnull(s_store_sk#11))

(9) Project [codegen id : 2]
Output [1]: [s_store_sk#11]
Input [2]: [s_store_sk#11, s_city#12]

(10) BroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#11]
Join condition: None

(12) Project [codegen id : 5]
Output [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]
Input [9]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9, s_store_sk#11]

(13) BatchScan spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
spark_catalog.default.household_demographics [scan class = SparkBatchQueryScan] [filters=(hd_dep_count = 5 OR hd_vehicle_count = 3), hd_demo_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(14) Filter [codegen id : 3]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
Condition : (((hd_dep_count#14 = 5) OR (hd_vehicle_count#15 = 3)) AND isnotnull(hd_demo_sk#13))

(15) Project [codegen id : 3]
Output [1]: [hd_demo_sk#13]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]

(16) BroadcastExchange
Input [1]: [hd_demo_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#13]
Join condition: None

(18) Project [codegen id : 5]
Output [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9]
Input [8]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9, hd_demo_sk#13]

(19) BatchScan spark_catalog.default.customer_address
Output [2]: [ca_address_sk#16, ca_city#17]
spark_catalog.default.customer_address [scan class = SparkBatchQueryScan] [filters=ca_address_sk IS NOT NULL, ca_city IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(20) Filter [codegen id : 4]
Input [2]: [ca_address_sk#16, ca_city#17]
Condition : (isnotnull(ca_address_sk#16) AND isnotnull(ca_city#17))

(21) Project [codegen id : 4]
Output [2]: [ca_address_sk#16, ca_city#17]
Input [2]: [ca_address_sk#16, ca_city#17]

(22) BroadcastExchange
Input [2]: [ca_address_sk#16, ca_city#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#4]
Right keys [1]: [ca_address_sk#16]
Join condition: None

(24) Project [codegen id : 5]
Output [7]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9, ca_city#17]
Input [8]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9, ca_address_sk#16, ca_city#17]

(25) HashAggregate [codegen id : 5]
Input [7]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_ext_sales_price#7, ss_ext_list_price#8, ss_ext_tax#9, ca_city#17]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#17]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#7)), partial_sum(UnscaledValue(ss_ext_list_price#8)), partial_sum(UnscaledValue(ss_ext_tax#9))]
Aggregate Attributes [3]: [sum#18, sum#19, sum#20]
Results [7]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#17, sum#21, sum#22, sum#23]

(26) Exchange
Input [7]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#17, sum#21, sum#22, sum#23]
Arguments: hashpartitioning(ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(27) HashAggregate [codegen id : 8]
Input [7]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#17, sum#21, sum#22, sum#23]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#17]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#7)), sum(UnscaledValue(ss_ext_list_price#8)), sum(UnscaledValue(ss_ext_tax#9))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#7))#24, sum(UnscaledValue(ss_ext_list_price#8))#25, sum(UnscaledValue(ss_ext_tax#9))#26]
Results [6]: [ss_ticket_number#6, ss_customer_sk#2, ca_city#17 AS bought_city#27, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#7))#24,17,2) AS extended_price#28, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#8))#25,17,2) AS list_price#29, MakeDecimal(sum(UnscaledValue(ss_ext_tax#9))#26,17,2) AS extended_tax#30]

(28) BatchScan spark_catalog.default.customer
Output [4]: [c_customer_sk#31, c_current_addr_sk#32, c_first_name#33, c_last_name#34]
spark_catalog.default.customer [scan class = SparkBatchQueryScan] [filters=c_customer_sk IS NOT NULL, c_current_addr_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(29) Filter [codegen id : 6]
Input [4]: [c_customer_sk#31, c_current_addr_sk#32, c_first_name#33, c_last_name#34]
Condition : (isnotnull(c_customer_sk#31) AND isnotnull(c_current_addr_sk#32))

(30) Project [codegen id : 6]
Output [4]: [c_customer_sk#31, c_current_addr_sk#32, c_first_name#33, c_last_name#34]
Input [4]: [c_customer_sk#31, c_current_addr_sk#32, c_first_name#33, c_last_name#34]

(31) BroadcastExchange
Input [4]: [c_customer_sk#31, c_current_addr_sk#32, c_first_name#33, c_last_name#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(33) Project [codegen id : 8]
Output [8]: [ss_ticket_number#6, bought_city#27, extended_price#28, list_price#29, extended_tax#30, c_current_addr_sk#32, c_first_name#33, c_last_name#34]
Input [10]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#27, extended_price#28, list_price#29, extended_tax#30, c_customer_sk#31, c_current_addr_sk#32, c_first_name#33, c_last_name#34]

(34) ReusedExchange [Reuses operator id: 22]
Output [2]: [ca_address_sk#35, ca_city#36]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#32]
Right keys [1]: [ca_address_sk#35]
Join condition: NOT (ca_city#36 = bought_city#27)

(36) Project [codegen id : 8]
Output [8]: [c_last_name#34, c_first_name#33, ca_city#36, bought_city#27, ss_ticket_number#6, extended_price#28, extended_tax#30, list_price#29]
Input [10]: [ss_ticket_number#6, bought_city#27, extended_price#28, list_price#29, extended_tax#30, c_current_addr_sk#32, c_first_name#33, c_last_name#34, ca_address_sk#35, ca_city#36]

(37) TakeOrderedAndProject
Input [8]: [c_last_name#34, c_first_name#33, ca_city#36, bought_city#27, ss_ticket_number#6, extended_price#28, extended_tax#30, list_price#29]
Arguments: 100, [c_last_name#34 ASC NULLS FIRST, ss_ticket_number#6 ASC NULLS FIRST], [c_last_name#34, c_first_name#33, ca_city#36, bought_city#27, ss_ticket_number#6, extended_price#28, extended_tax#30, list_price#29]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#37
BroadcastExchange (41)
+- * Project (40)
   +- * Filter (39)
      +- BatchScan spark_catalog.default.date_dim (38)


(38) BatchScan spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#38, d_dom#39]
spark_catalog.default.date_dim [scan class = SparkBatchQueryScan] [filters=d_dom IS NOT NULL, d_dom >= 1, d_dom <= 2, d_year IN (1999, 2000, 2001), d_date_sk IN (2451790, 2451180, 2452216, 2451454, 2452184, 2451485, 2451850, 2451514, 2452062, 2451270, 2452123, 2451758, 2451971, 2451546, 2451942, 2451393, 2451667, 2451453, 2452215, 2451819, 2451331, 2451577, 2451911, 2452245, 2451301, 2451545, 2451605, 2451943, 2451851, 2451181, 2452154, 2451820, 2452001, 2451362, 2451392, 2451240, 2452032, 2451637, 2451484, 2452124, 2451300, 2451727, 2452093, 2451759, 2451698, 2451332, 2451606, 2451666, 2451912, 2452185, 2451211, 2451361, 2452031, 2451212, 2451880, 2451789, 2451423, 2451576, 2451728, 2452246, 2452155, 2452092, 2451881, 2451970, 2451697, 2452063, 2451271, 2451636, 2451515, 2451424, 2451239, 2452002), d_date_sk IS NOT NULL], [runtimeFilters=[]], caseSensitive=false,[ Broadcast Var UNUSED =]

(39) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#38, d_dom#39]
Condition : (((((isnotnull(d_dom#39) AND (d_dom#39 >= 1)) AND (d_dom#39 <= 2)) AND d_year#38 IN (1999,2000,2001)) AND d_date_sk#10 INSET 2451180, 2451181, 2451211, 2451212, 2451239, 2451240, 2451270, 2451271, 2451300, 2451301, 2451331, 2451332, 2451361, 2451362, 2451392, 2451393, 2451423, 2451424, 2451453, 2451454, 2451484, 2451485, 2451514, 2451515, 2451545, 2451546, 2451576, 2451577, 2451605, 2451606, 2451636, 2451637, 2451666, 2451667, 2451697, 2451698, 2451727, 2451728, 2451758, 2451759, 2451789, 2451790, 2451819, 2451820, 2451850, 2451851, 2451880, 2451881, 2451911, 2451912, 2451942, 2451943, 2451970, 2451971, 2452001, 2452002, 2452031, 2452032, 2452062, 2452063, 2452092, 2452093, 2452123, 2452124, 2452154, 2452155, 2452184, 2452185, 2452215, 2452216, 2452245, 2452246) AND isnotnull(d_date_sk#10))

(40) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#38, d_dom#39]

(41) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


